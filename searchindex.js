Search.setIndex({"docnames": ["_version", "assertions", "assertions/check_all", "assertions/check_all_or_any_fn", "assertions/check_any", "assertions/check_elem_in_list", "assertions/check_equal", "assertions/check_exists", "assertions/check_false", "assertions/check_fill_value_and_dtype_are_compatible", "assertions/check_gather_input_valid", "assertions/check_gather_nd_input_valid", "assertions/check_greater", "assertions/check_inplace_sizes_valid", "assertions/check_isinstance", "assertions/check_less", "assertions/check_one_way_broadcastable", "assertions/check_shape", "assertions/check_true", "backend_handler", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/fn_name_from_version_specific_fn_name", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/set_backend_to_specific_version", "backend_handler/set_jax_backend", "backend_handler/set_numpy_backend", "backend_handler/set_tensorflow_backend", "backend_handler/set_torch_backend", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/applied_libraries", "contributing/building_the_docs", "contributing/helpful_resources", "contributing/open_tasks", "contributing/setting_up", "contributing/the_basics", "data_classes", "data_classes/array", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/array", "data_classes/array/array/Array", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_ivy_array", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/experimental", "data_classes/array/experimental/activations", "data_classes/array/experimental/activations/ArrayWithActivationsExperimental", "data_classes/array/experimental/array_methods", "data_classes/array/experimental/array_methods/avg_pool3d", "data_classes/array/experimental/array_methods/diagflat", "data_classes/array/experimental/array_methods/dirichlet", "data_classes/array/experimental/array_methods/exp2", "data_classes/array/experimental/array_methods/flatten", "data_classes/array/experimental/array_methods/fliplr", "data_classes/array/experimental/array_methods/flipud", "data_classes/array/experimental/array_methods/float_power", "data_classes/array/experimental/array_methods/fmax", "data_classes/array/experimental/array_methods/fmod", "data_classes/array/experimental/array_methods/gcd", "data_classes/array/experimental/array_methods/heaviside", "data_classes/array/experimental/array_methods/hstack", "data_classes/array/experimental/array_methods/i0", "data_classes/array/experimental/array_methods/isclose", "data_classes/array/experimental/array_methods/isneginf", "data_classes/array/experimental/array_methods/isposinf", "data_classes/array/experimental/array_methods/kron", "data_classes/array/experimental/array_methods/lcm", "data_classes/array/experimental/array_methods/logaddexp2", "data_classes/array/experimental/array_methods/max_pool1d", "data_classes/array/experimental/array_methods/max_pool2d", "data_classes/array/experimental/array_methods/max_pool3d", "data_classes/array/experimental/array_methods/median", "data_classes/array/experimental/array_methods/moveaxis", "data_classes/array/experimental/array_methods/msort", "data_classes/array/experimental/array_methods/nan_to_num", "data_classes/array/experimental/array_methods/nansum", "data_classes/array/experimental/array_methods/pad", "data_classes/array/experimental/array_methods/rot90", "data_classes/array/experimental/array_methods/signbit", "data_classes/array/experimental/array_methods/sinc", "data_classes/array/experimental/array_methods/top_k", "data_classes/array/experimental/array_methods/trapz", "data_classes/array/experimental/array_methods/vstack", "data_classes/array/experimental/conversions", "data_classes/array/experimental/conversions/ArrayWithConversionsExperimental", "data_classes/array/experimental/creation", "data_classes/array/experimental/creation/ArrayWithCreationExperimental", "data_classes/array/experimental/data_type", "data_classes/array/experimental/data_type/ArrayWithData_typeExperimental", "data_classes/array/experimental/device", "data_classes/array/experimental/device/ArrayWithDeviceExperimental", "data_classes/array/experimental/elementwise", "data_classes/array/experimental/elementwise/ArrayWithElementWiseExperimental", "data_classes/array/experimental/general", "data_classes/array/experimental/general/ArrayWithGeneralExperimental", "data_classes/array/experimental/gradients", "data_classes/array/experimental/gradients/ArrayWithGradientsExperimental", "data_classes/array/experimental/image", "data_classes/array/experimental/image/ArrayWithImageExperimental", "data_classes/array/experimental/layers", "data_classes/array/experimental/layers/ArrayWithLayersExperimental", "data_classes/array/experimental/linalg", "data_classes/array/experimental/linalg/ArrayWithLinalgExperimental", "data_classes/array/experimental/losses", "data_classes/array/experimental/losses/ArrayWithLossesExperimental", "data_classes/array/experimental/manipulation", "data_classes/array/experimental/manipulation/ArrayWithManipulationExperimental", "data_classes/array/experimental/norms", "data_classes/array/experimental/norms/ArrayWithNormsExperimental", "data_classes/array/experimental/random", "data_classes/array/experimental/random/ArrayWithRandomExperimental", "data_classes/array/experimental/searching", "data_classes/array/experimental/searching/ArrayWithSearchingExperimental", "data_classes/array/experimental/set", "data_classes/array/experimental/set/ArrayWithSetExperimental", "data_classes/array/experimental/sorting", "data_classes/array/experimental/sorting/ArrayWithSortingExperimental", "data_classes/array/experimental/statistical", "data_classes/array/experimental/statistical/ArrayWithStatisticalExperimental", "data_classes/array/experimental/utility", "data_classes/array/experimental/utility/ArrayWithUtilityExperimental", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linalg", "data_classes/array/linalg/ArrayWithLinalg", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/conversions", "data_classes/container/conversions/ContainerWithConversions", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/experimental", "data_classes/container/experimental/activations", "data_classes/container/experimental/activations/ContainerWithActivationExperimental", "data_classes/container/experimental/container_methods", "data_classes/container/experimental/container_methods/avg_pool2d", "data_classes/container/experimental/container_methods/avg_pool3d", "data_classes/container/experimental/container_methods/diagflat", "data_classes/container/experimental/container_methods/dirichlet", "data_classes/container/experimental/container_methods/exp2", "data_classes/container/experimental/container_methods/flatten", "data_classes/container/experimental/container_methods/fliplr", "data_classes/container/experimental/container_methods/flipud", "data_classes/container/experimental/container_methods/float_power", "data_classes/container/experimental/container_methods/fmax", "data_classes/container/experimental/container_methods/fmod", "data_classes/container/experimental/container_methods/gcd", "data_classes/container/experimental/container_methods/hamming_window", "data_classes/container/experimental/container_methods/hann_window", "data_classes/container/experimental/container_methods/heaviside", "data_classes/container/experimental/container_methods/hstack", "data_classes/container/experimental/container_methods/i0", "data_classes/container/experimental/container_methods/isclose", "data_classes/container/experimental/container_methods/isneginf", "data_classes/container/experimental/container_methods/isposinf", "data_classes/container/experimental/container_methods/kaiser_bessel_derived_window", "data_classes/container/experimental/container_methods/kaiser_window", "data_classes/container/experimental/container_methods/kron", "data_classes/container/experimental/container_methods/lcm", "data_classes/container/experimental/container_methods/logaddexp2", "data_classes/container/experimental/container_methods/max_pool1d", "data_classes/container/experimental/container_methods/max_pool2d", "data_classes/container/experimental/container_methods/max_pool3d", "data_classes/container/experimental/container_methods/median", "data_classes/container/experimental/container_methods/moveaxis", "data_classes/container/experimental/container_methods/msort", "data_classes/container/experimental/container_methods/nan_to_num", "data_classes/container/experimental/container_methods/nansum", "data_classes/container/experimental/container_methods/pad", "data_classes/container/experimental/container_methods/rot90", "data_classes/container/experimental/container_methods/signbit", "data_classes/container/experimental/container_methods/sinc", "data_classes/container/experimental/container_methods/static_avg_pool2d", "data_classes/container/experimental/container_methods/static_avg_pool3d", "data_classes/container/experimental/container_methods/static_diagflat", "data_classes/container/experimental/container_methods/static_dirichlet", "data_classes/container/experimental/container_methods/static_exp2", "data_classes/container/experimental/container_methods/static_flatten", "data_classes/container/experimental/container_methods/static_fliplr", "data_classes/container/experimental/container_methods/static_flipud", "data_classes/container/experimental/container_methods/static_float_power", "data_classes/container/experimental/container_methods/static_fmax", "data_classes/container/experimental/container_methods/static_fmod", "data_classes/container/experimental/container_methods/static_gcd", "data_classes/container/experimental/container_methods/static_hamming_window", "data_classes/container/experimental/container_methods/static_hann_window", "data_classes/container/experimental/container_methods/static_heaviside", "data_classes/container/experimental/container_methods/static_hstack", "data_classes/container/experimental/container_methods/static_i0", "data_classes/container/experimental/container_methods/static_isclose", "data_classes/container/experimental/container_methods/static_isneginf", "data_classes/container/experimental/container_methods/static_isposinf", "data_classes/container/experimental/container_methods/static_kaiser_bessel_derived_window", "data_classes/container/experimental/container_methods/static_kaiser_window", "data_classes/container/experimental/container_methods/static_kron", "data_classes/container/experimental/container_methods/static_lcm", "data_classes/container/experimental/container_methods/static_logaddexp2", "data_classes/container/experimental/container_methods/static_max_pool1d", "data_classes/container/experimental/container_methods/static_max_pool2d", "data_classes/container/experimental/container_methods/static_max_pool3d", "data_classes/container/experimental/container_methods/static_median", "data_classes/container/experimental/container_methods/static_moveaxis", "data_classes/container/experimental/container_methods/static_msort", "data_classes/container/experimental/container_methods/static_nan_to_num", "data_classes/container/experimental/container_methods/static_nansum", "data_classes/container/experimental/container_methods/static_pad", "data_classes/container/experimental/container_methods/static_rot90", "data_classes/container/experimental/container_methods/static_signbit", "data_classes/container/experimental/container_methods/static_sinc", "data_classes/container/experimental/container_methods/static_top_k", "data_classes/container/experimental/container_methods/static_triu_indices", "data_classes/container/experimental/container_methods/static_vstack", "data_classes/container/experimental/container_methods/top_k", "data_classes/container/experimental/container_methods/triu_indices", "data_classes/container/experimental/container_methods/vstack", "data_classes/container/experimental/conversions", "data_classes/container/experimental/conversions/ContainerWithConversionExperimental", "data_classes/container/experimental/creation", "data_classes/container/experimental/creation/ContainerWithCreationExperimental", "data_classes/container/experimental/data_type", "data_classes/container/experimental/data_type/ContainerWithData_typeExperimental", "data_classes/container/experimental/device", "data_classes/container/experimental/device/ContainerWithDeviceExperimental", "data_classes/container/experimental/elementwise", "data_classes/container/experimental/elementwise/ContainerWithElementWiseExperimental", "data_classes/container/experimental/general", "data_classes/container/experimental/general/ContainerWithGeneralExperimental", "data_classes/container/experimental/gradients", "data_classes/container/experimental/gradients/ContainerWithGradientsExperimental", "data_classes/container/experimental/image", "data_classes/container/experimental/image/ContainerWithImageExperimental", "data_classes/container/experimental/layers", "data_classes/container/experimental/layers/ContainerWithLayersExperimental", "data_classes/container/experimental/linalg", "data_classes/container/experimental/linalg/ContainerWithLinalgExperimental", "data_classes/container/experimental/losses", "data_classes/container/experimental/losses/ContainerWithLossesExperimental", "data_classes/container/experimental/manipulation", "data_classes/container/experimental/manipulation/ContainerWithManipulationExperimental", "data_classes/container/experimental/norms", "data_classes/container/experimental/norms/ContainerWithNormsExperimental", "data_classes/container/experimental/random", "data_classes/container/experimental/random/ContainerWithRandomExperimental", "data_classes/container/experimental/searching", "data_classes/container/experimental/searching/ContainerWithSearchingExperimental", "data_classes/container/experimental/set", "data_classes/container/experimental/set/ContainerWithSetExperimental", "data_classes/container/experimental/sorting", "data_classes/container/experimental/sorting/ContainerWithSortingExperimental", "data_classes/container/experimental/statistical", "data_classes/container/experimental/statistical/ContainerWithStatisticalExperimental", "data_classes/container/experimental/utility", "data_classes/container/experimental/utility/ContainerWithUtilityExperimental", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linalg", "data_classes/container/linalg/ContainerWithLinalg", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/array_api_tests", "deep_dive/arrays", "deep_dive/backend_setting", "deep_dive/containers", "deep_dive/continuous_integration", "deep_dive/data_types", "deep_dive/devices", "deep_dive/docstring_examples", "deep_dive/docstrings", "deep_dive/exception_handling", "deep_dive/formatting", "deep_dive/function_arguments", "deep_dive/function_types", "deep_dive/function_wrapping", "deep_dive/inplace_updates", "deep_dive/ivy_frontends", "deep_dive/ivy_frontends_tests", "deep_dive/ivy_tests", "deep_dive/navigating_the_code", "deep_dive/superset_behaviour", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/from_zero_dim_arrays_to_float", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/integer_arrays_to_float", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/experimental", "functional/experimental/activations", "functional/experimental/compilation", "functional/experimental/constants", "functional/experimental/creation", "functional/experimental/creation/hamming_window", "functional/experimental/creation/hann_window", "functional/experimental/creation/kaiser_bessel_derived_window", "functional/experimental/creation/kaiser_window", "functional/experimental/creation/triu_indices", "functional/experimental/creation/vorbis_window", "functional/experimental/data_type", "functional/experimental/device", "functional/experimental/elementwise", "functional/experimental/elementwise/exp2", "functional/experimental/elementwise/float_power", "functional/experimental/elementwise/fmax", "functional/experimental/elementwise/fmod", "functional/experimental/elementwise/gcd", "functional/experimental/elementwise/isclose", "functional/experimental/elementwise/isneginf", "functional/experimental/elementwise/isposinf", "functional/experimental/elementwise/lcm", "functional/experimental/elementwise/logaddexp2", "functional/experimental/elementwise/nan_to_num", "functional/experimental/elementwise/nansum", "functional/experimental/elementwise/signbit", "functional/experimental/elementwise/sinc", "functional/experimental/elementwise/trapz", "functional/experimental/general", "functional/experimental/gradients", "functional/experimental/layers", "functional/experimental/layers/avg_pool2d", "functional/experimental/layers/avg_pool3d", "functional/experimental/layers/max_pool1d", "functional/experimental/layers/max_pool2d", "functional/experimental/layers/max_pool3d", "functional/experimental/linalg", "functional/experimental/linalg/diagflat", "functional/experimental/linalg/kron", "functional/experimental/losses", "functional/experimental/manipulation", "functional/experimental/manipulation/flatten", "functional/experimental/manipulation/fliplr", "functional/experimental/manipulation/flipud", "functional/experimental/manipulation/heaviside", "functional/experimental/manipulation/hstack", "functional/experimental/manipulation/i0", "functional/experimental/manipulation/moveaxis", "functional/experimental/manipulation/ndenumerate", "functional/experimental/manipulation/ndindex", "functional/experimental/manipulation/pad", "functional/experimental/manipulation/rot90", "functional/experimental/manipulation/top_k", "functional/experimental/manipulation/vstack", "functional/experimental/meta", "functional/experimental/nest", "functional/experimental/norms", "functional/experimental/random", "functional/experimental/random/beta", "functional/experimental/random/dirichlet", "functional/experimental/random/gamma", "functional/experimental/searching", "functional/experimental/set", "functional/experimental/sorting", "functional/experimental/sorting/msort", "functional/experimental/sparse_array", "functional/experimental/sparse_array/is_ivy_sparse_array", "functional/experimental/sparse_array/is_native_sparse_array", "functional/experimental/sparse_array/native_sparse_array", "functional/experimental/sparse_array/native_sparse_array_to_indices_values_and_shape", "functional/experimental/statistical", "functional/experimental/statistical/median", "functional/experimental/utility", "functional/experimental/utility/is_storage", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/deserialize", "functional/ivy/activations/gelu", "functional/ivy/activations/gelu/gelu_array", "functional/ivy/activations/gelu/gelu_container", "functional/ivy/activations/gelu/gelu_functional", "functional/ivy/activations/gelu/static_gelu_container", "functional/ivy/activations/get", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/leaky_relu/leaky_relu_array", "functional/ivy/activations/leaky_relu/leaky_relu_container", "functional/ivy/activations/leaky_relu/leaky_relu_functional", "functional/ivy/activations/leaky_relu/static_leaky_relu_container", "functional/ivy/activations/log_softmax", "functional/ivy/activations/log_softmax/log_softmax_array", "functional/ivy/activations/log_softmax/log_softmax_container", "functional/ivy/activations/log_softmax/log_softmax_functional", "functional/ivy/activations/log_softmax/static_log_softmax_container", "functional/ivy/activations/relu", "functional/ivy/activations/relu/relu_array", "functional/ivy/activations/relu/relu_container", "functional/ivy/activations/relu/relu_functional", "functional/ivy/activations/relu/static_relu_container", "functional/ivy/activations/sigmoid", "functional/ivy/activations/sigmoid/sigmoid_array", "functional/ivy/activations/sigmoid/sigmoid_container", "functional/ivy/activations/sigmoid/sigmoid_functional", "functional/ivy/activations/sigmoid/static_sigmoid_container", "functional/ivy/activations/softmax", "functional/ivy/activations/softmax/softmax_array", "functional/ivy/activations/softmax/softmax_container", "functional/ivy/activations/softmax/softmax_functional", "functional/ivy/activations/softmax/static_softmax_container", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/NestedSequence", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/asarray_handle_nestable", "functional/ivy/creation/asarray_infer_device", "functional/ivy/creation/asarray_to_native_arrays_and_back", "functional/ivy/creation/copy_array", "functional/ivy/creation/copy_array/copy_array_array", "functional/ivy/creation/copy_array/copy_array_functional", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/one_hot", "functional/ivy/creation/one_hot/one_hot_array", "functional/ivy/creation/one_hot/one_hot_container", "functional/ivy/creation/one_hot/one_hot_functional", "functional/ivy/creation/one_hot/static_one_hot_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/astype/astype_array", "functional/ivy/data_type/astype/astype_container", "functional/ivy/data_type/astype/astype_functional", "functional/ivy/data_type/astype/static_astype_container", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/broadcast_to/broadcast_to_array", "functional/ivy/data_type/broadcast_to/broadcast_to_container", "functional/ivy/data_type/broadcast_to/broadcast_to_functional", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/check_float", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_float_dtype/default_float_dtype_functional", "functional/ivy/data_type/default_float_dtype/static_default_float_dtype_container", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/default_uint_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype/dtype_container", "functional/ivy/data_type/dtype/dtype_functional", "functional/ivy/data_type/dtype/static_dtype_container", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/finfo/finfo_array", "functional/ivy/data_type/finfo/finfo_container", "functional/ivy/data_type/finfo/finfo_functional", "functional/ivy/data_type/finfo/static_finfo_container", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_supported_dtypes/function_supported_dtypes_functional", "functional/ivy/data_type/function_supported_dtypes/static_function_supported_dtypes_container", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes/function_unsupported_dtypes_functional", "functional/ivy/data_type/function_unsupported_dtypes/static_function_unsupported_dtypes_container", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/iinfo/iinfo_array", "functional/ivy/data_type/iinfo/iinfo_container", "functional/ivy/data_type/iinfo/iinfo_functional", "functional/ivy/data_type/iinfo/static_iinfo_container", "functional/ivy/data_type/infer_default_dtype", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_bool_dtype", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_array", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_container", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_functional", "functional/ivy/data_type/is_bool_dtype/static_is_bool_dtype_container", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container", "functional/ivy/data_type/is_uint_dtype", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_array", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_container", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_functional", "functional/ivy/data_type/is_uint_dtype/static_is_uint_dtype_container", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/promote_types_of_inputs", "functional/ivy/data_type/result_type", "functional/ivy/data_type/result_type/result_type_array", "functional/ivy/data_type/result_type/result_type_container", "functional/ivy/data_type/result_type/result_type_functional", "functional/ivy/data_type/result_type/static_result_type_container", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/set_default_uint_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/unset_default_uint_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev/dev_array", "functional/ivy/device/dev/dev_container", "functional/ivy/device/dev/dev_functional", "functional/ivy/device/dev/static_dev_container", "functional/ivy/device/dev_util", "functional/ivy/device/function_supported_devices", "functional/ivy/device/function_unsupported_devices", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/to_device/static_to_device_container", "functional/ivy/device/to_device/to_device_array", "functional/ivy/device/to_device/to_device_container", "functional/ivy/device/to_device/to_device_functional", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acos/static_acos_container", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/acosh/static_acosh_container", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asin/static_asin_container", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/asinh/static_asinh_container", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan/static_atan_container", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atan2/static_atan2_container", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/atanh/static_atanh_container", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_and/static_bitwise_and_container", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_invert/static_bitwise_invert_container", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_left_shift/static_bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_or/static_bitwise_or_container", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_right_shift/static_bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/bitwise_xor/static_bitwise_xor_container", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/ceil/static_ceil_container", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cos/static_cos_container", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/cosh/static_cosh_container", "functional/ivy/elementwise/deg2rad", "functional/ivy/elementwise/deg2rad/deg2rad_array", "functional/ivy/elementwise/deg2rad/deg2rad_container", "functional/ivy/elementwise/deg2rad/deg2rad_functional", "functional/ivy/elementwise/deg2rad/static_deg2rad_container", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/equal/static_equal_container", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/erf/static_erf_container", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/exp/static_exp_container", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/expm1/static_expm1_container", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor/static_floor_container", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/floor_divide/static_floor_divide_container", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater/static_greater_container", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/greater_equal/static_greater_equal_container", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isfinite/static_isfinite_container", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isinf/static_isinf_container", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/isnan/static_isnan_container", "functional/ivy/elementwise/isreal", "functional/ivy/elementwise/isreal/isreal_array", "functional/ivy/elementwise/isreal/isreal_container", "functional/ivy/elementwise/isreal/isreal_functional", "functional/ivy/elementwise/isreal/static_isreal_container", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less/static_less_container", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/less_equal/static_less_equal_container", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log/static_log_container", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log10/static_log10_container", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log1p/static_log1p_container", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/log2/static_log2_container", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logaddexp/static_logaddexp_container", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_and/static_logical_and_container", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_not/static_logical_not_container", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_or/static_logical_or_container", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/logical_xor/static_logical_xor_container", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/maximum/maximum_array", "functional/ivy/elementwise/maximum/maximum_container", "functional/ivy/elementwise/maximum/maximum_functional", "functional/ivy/elementwise/maximum/static_maximum_container", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/minimum/minimum_array", "functional/ivy/elementwise/minimum/minimum_container", "functional/ivy/elementwise/minimum/minimum_functional", "functional/ivy/elementwise/minimum/static_minimum_container", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/negative/static_negative_container", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/not_equal/static_not_equal_container", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/positive/static_positive_container", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/pow/static_pow_container", "functional/ivy/elementwise/rad2deg", "functional/ivy/elementwise/rad2deg/rad2deg_array", "functional/ivy/elementwise/rad2deg/rad2deg_container", "functional/ivy/elementwise/rad2deg/rad2deg_functional", "functional/ivy/elementwise/rad2deg/static_rad2deg_container", "functional/ivy/elementwise/reciprocal", "functional/ivy/elementwise/reciprocal/reciprocal_array", "functional/ivy/elementwise/reciprocal/reciprocal_container", "functional/ivy/elementwise/reciprocal/reciprocal_functional", "functional/ivy/elementwise/reciprocal/static_reciprocal_container", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/remainder/static_remainder_container", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/round/static_round_container", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sign/static_sign_container", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sin/static_sin_container", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sinh/static_sinh_container", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/sqrt/static_sqrt_container", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/square/static_square_container", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/static_trunc_container", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/elementwise/trunc_divide", "functional/ivy/elementwise/trunc_divide/static_trunc_divide_container", "functional/ivy/elementwise/trunc_divide/trunc_divide_array", "functional/ivy/elementwise/trunc_divide/trunc_divide_container", "functional/ivy/elementwise/trunc_divide/trunc_divide_functional", "functional/ivy/extensions", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/array_equal/array_equal_array", "functional/ivy/general/array_equal/array_equal_functional", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_array", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_container", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_functional", "functional/ivy/general/assert_supports_inplace/static_assert_supports_inplace_container", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_array", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_container", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_functional", "functional/ivy/general/clip_matrix_norm/static_clip_matrix_norm_container", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_array", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/clip_vector_norm/static_clip_vector_norm_container", "functional/ivy/general/container_types", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/default/default_array", "functional/ivy/general/default/default_functional", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_rearrange/einops_rearrange_array", "functional/ivy/general/einops_rearrange/einops_rearrange_container", "functional/ivy/general/einops_rearrange/einops_rearrange_functional", "functional/ivy/general/einops_rearrange/static_einops_rearrange_container", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_reduce/einops_reduce_array", "functional/ivy/general/einops_reduce/einops_reduce_container", "functional/ivy/general/einops_reduce/einops_reduce_functional", "functional/ivy/general/einops_reduce/static_einops_reduce_container", "functional/ivy/general/einops_repeat", "functional/ivy/general/einops_repeat/einops_repeat_array", "functional/ivy/general/einops_repeat/einops_repeat_container", "functional/ivy/general/einops_repeat/einops_repeat_functional", "functional/ivy/general/einops_repeat/static_einops_repeat_container", "functional/ivy/general/exists", "functional/ivy/general/exists/exists_array", "functional/ivy/general/exists/exists_functional", "functional/ivy/general/fourier_encode", "functional/ivy/general/fourier_encode/fourier_encode_array", "functional/ivy/general/fourier_encode/fourier_encode_container", "functional/ivy/general/fourier_encode/fourier_encode_functional", "functional/ivy/general/fourier_encode/static_fourier_encode_container", "functional/ivy/general/function_supported_devices_and_dtypes", "functional/ivy/general/function_unsupported_devices_and_dtypes", "functional/ivy/general/gather", "functional/ivy/general/gather/gather_array", "functional/ivy/general/gather/gather_container", "functional/ivy/general/gather/gather_functional", "functional/ivy/general/gather/static_gather_container", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_array_mode", "functional/ivy/general/get_exception_trace_mode", "functional/ivy/general/get_item", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_nestable_mode", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_num_dims/get_num_dims_array", "functional/ivy/general/get_num_dims/get_num_dims_container", "functional/ivy/general/get_num_dims/get_num_dims_functional", "functional/ivy/general/get_num_dims/static_get_num_dims_container", "functional/ivy/general/get_queue_timeout", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/get_tmp_dir", "functional/ivy/general/has_nans", "functional/ivy/general/has_nans/has_nans_array", "functional/ivy/general/has_nans/has_nans_container", "functional/ivy/general/has_nans/has_nans_functional", "functional/ivy/general/has_nans/static_has_nans_container", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_decrement/inplace_decrement_array", "functional/ivy/general/inplace_decrement/inplace_decrement_container", "functional/ivy/general/inplace_decrement/inplace_decrement_functional", "functional/ivy/general/inplace_decrement/static_inplace_decrement_container", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_increment/inplace_increment_array", "functional/ivy/general/inplace_increment/inplace_increment_container", "functional/ivy/general/inplace_increment/inplace_increment_functional", "functional/ivy/general/inplace_increment/static_inplace_increment_container", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_update/inplace_update_array", "functional/ivy/general/inplace_update/inplace_update_container", "functional/ivy/general/inplace_update/inplace_update_functional", "functional/ivy/general/inplace_update/static_inplace_update_container", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_array/is_array_array", "functional/ivy/general/is_array/is_array_container", "functional/ivy/general/is_array/is_array_functional", "functional/ivy/general/is_array/static_is_array_container", "functional/ivy/general/is_frontend_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_array/is_ivy_array_array", "functional/ivy/general/is_ivy_array/is_ivy_array_container", "functional/ivy/general/is_ivy_array/is_ivy_array_functional", "functional/ivy/general/is_ivy_array/static_is_ivy_array_container", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_ivy_container/is_ivy_container_array", "functional/ivy/general/is_ivy_container/is_ivy_container_container", "functional/ivy/general/is_ivy_container/is_ivy_container_functional", "functional/ivy/general/is_ivy_container/static_is_ivy_container_container", "functional/ivy/general/is_native_array", "functional/ivy/general/is_native_array/is_native_array_array", "functional/ivy/general/is_native_array/is_native_array_container", "functional/ivy/general/is_native_array/is_native_array_functional", "functional/ivy/general/is_native_array/static_is_native_array_container", "functional/ivy/general/isscalar", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_flat/scatter_flat_array", "functional/ivy/general/scatter_flat/scatter_flat_container", "functional/ivy/general/scatter_flat/scatter_flat_functional", "functional/ivy/general/scatter_flat/static_scatter_flat_container", "functional/ivy/general/scatter_nd", "functional/ivy/general/scatter_nd/scatter_nd_array", "functional/ivy/general/scatter_nd/scatter_nd_container", "functional/ivy/general/scatter_nd/scatter_nd_functional", "functional/ivy/general/scatter_nd/static_scatter_nd_container", "functional/ivy/general/set_array_mode", "functional/ivy/general/set_exception_trace_mode", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_nestable_mode", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_shape_array_mode", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_array_mode", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_divide/stable_divide_array", "functional/ivy/general/stable_divide/stable_divide_container", "functional/ivy/general/stable_divide/stable_divide_functional", "functional/ivy/general/stable_divide/static_stable_divide_container", "functional/ivy/general/stable_pow", "functional/ivy/general/stable_pow/stable_pow_array", "functional/ivy/general/stable_pow/stable_pow_container", "functional/ivy/general/stable_pow/stable_pow_functional", "functional/ivy/general/stable_pow/static_stable_pow_container", "functional/ivy/general/supports_inplace_updates", "functional/ivy/general/supports_inplace_updates/static_supports_inplace_updates_container", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_array", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_container", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_functional", "functional/ivy/general/to_ivy_shape", "functional/ivy/general/to_list", "functional/ivy/general/to_list/static_to_list_container", "functional/ivy/general/to_list/to_list_array", "functional/ivy/general/to_list/to_list_container", "functional/ivy/general/to_list/to_list_functional", "functional/ivy/general/to_native_shape", "functional/ivy/general/to_numpy", "functional/ivy/general/to_numpy/static_to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_array", "functional/ivy/general/to_numpy/to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_functional", "functional/ivy/general/to_scalar", "functional/ivy/general/to_scalar/static_to_scalar_container", "functional/ivy/general/to_scalar/to_scalar_array", "functional/ivy/general/to_scalar/to_scalar_container", "functional/ivy/general/to_scalar/to_scalar_functional", "functional/ivy/general/try_else_none", "functional/ivy/general/unset_array_mode", "functional/ivy/general/unset_exception_trace_mode", "functional/ivy/general/unset_nestable_mode", "functional/ivy/general/unset_queue_timeout", "functional/ivy/general/unset_shape_array_mode", "functional/ivy/general/value_is_nan", "functional/ivy/general/value_is_nan/static_value_is_nan_container", "functional/ivy/general/value_is_nan/value_is_nan_array", "functional/ivy/general/value_is_nan/value_is_nan_container", "functional/ivy/general/value_is_nan/value_is_nan_functional", "functional/ivy/general/vmap", "functional/ivy/gradients", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_array", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/grad", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_array", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_array", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/jac", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_array", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_array", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_array", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/stop_gradient/static_stop_gradient_container", "functional/ivy/gradients/stop_gradient/stop_gradient_array", "functional/ivy/gradients/stop_gradient/stop_gradient_container", "functional/ivy/gradients/stop_gradient/stop_gradient_functional", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/value_and_grad", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable/static_variable_container", "functional/ivy/gradients/variable/variable_array", "functional/ivy/gradients/variable/variable_container", "functional/ivy/gradients/variable/variable_functional", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/variable_data/static_variable_data_container", "functional/ivy/gradients/variable_data/variable_data_array", "functional/ivy/gradients/variable_data/variable_data_container", "functional/ivy/gradients/variable_data/variable_data_functional", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d/conv1d_array", "functional/ivy/layers/conv1d/conv1d_container", "functional/ivy/layers/conv1d/conv1d_functional", "functional/ivy/layers/conv1d/static_conv1d_container", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_array", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_container", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_functional", "functional/ivy/layers/conv1d_transpose/static_conv1d_transpose_container", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d/conv2d_array", "functional/ivy/layers/conv2d/conv2d_container", "functional/ivy/layers/conv2d/conv2d_functional", "functional/ivy/layers/conv2d/static_conv2d_container", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv2d_transpose/conv2d_transpose_container", "functional/ivy/layers/conv2d_transpose/conv2d_transpose_functional", "functional/ivy/layers/conv2d_transpose/static_conv2d_transpose_container", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d/conv3d_array", "functional/ivy/layers/conv3d/conv3d_container", "functional/ivy/layers/conv3d/conv3d_functional", "functional/ivy/layers/conv3d/static_conv3d_container", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_array", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_container", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_functional", "functional/ivy/layers/conv3d_transpose/static_conv3d_transpose_container", "functional/ivy/layers/conv_general_dilated", "functional/ivy/layers/conv_general_transpose", "functional/ivy/layers/deconv_length", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_array", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_container", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_functional", "functional/ivy/layers/depthwise_conv2d/static_depthwise_conv2d_container", "functional/ivy/layers/dropout", "functional/ivy/layers/dropout/dropout_array", "functional/ivy/layers/dropout/dropout_container", "functional/ivy/layers/dropout/dropout_functional", "functional/ivy/layers/dropout/static_dropout_container", "functional/ivy/layers/get_x_data_format", "functional/ivy/layers/handle_padding", "functional/ivy/layers/linear", "functional/ivy/layers/linear/linear_array", "functional/ivy/layers/linear/linear_container", "functional/ivy/layers/linear/linear_functional", "functional/ivy/layers/linear/static_linear_container", "functional/ivy/layers/lstm_update", "functional/ivy/layers/lstm_update/lstm_update_array", "functional/ivy/layers/lstm_update/lstm_update_container", "functional/ivy/layers/lstm_update/lstm_update_functional", "functional/ivy/layers/lstm_update/static_lstm_update_container", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/multi_head_attention/multi_head_attention_array", "functional/ivy/layers/multi_head_attention/multi_head_attention_container", "functional/ivy/layers/multi_head_attention/multi_head_attention_functional", "functional/ivy/layers/multi_head_attention/static_multi_head_attention_container", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_array", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_container", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_functional", "functional/ivy/layers/scaled_dot_product_attention/static_scaled_dot_product_attention_container", "functional/ivy/linalg", "functional/ivy/linalg/cholesky", "functional/ivy/linalg/cholesky/cholesky_array", "functional/ivy/linalg/cholesky/cholesky_container", "functional/ivy/linalg/cholesky/cholesky_functional", "functional/ivy/linalg/cholesky/static_cholesky_container", "functional/ivy/linalg/cross", "functional/ivy/linalg/cross/cross_array", "functional/ivy/linalg/cross/cross_container", "functional/ivy/linalg/cross/cross_functional", "functional/ivy/linalg/cross/static_cross_container", "functional/ivy/linalg/det", "functional/ivy/linalg/det/det_array", "functional/ivy/linalg/det/det_container", "functional/ivy/linalg/det/det_functional", "functional/ivy/linalg/det/static_det_container", "functional/ivy/linalg/diag", "functional/ivy/linalg/diag/diag_array", "functional/ivy/linalg/diag/diag_container", "functional/ivy/linalg/diag/diag_functional", "functional/ivy/linalg/diag/static_diag_container", "functional/ivy/linalg/diagonal", "functional/ivy/linalg/diagonal/diagonal_array", "functional/ivy/linalg/diagonal/diagonal_container", "functional/ivy/linalg/diagonal/diagonal_functional", "functional/ivy/linalg/diagonal/static_diagonal_container", "functional/ivy/linalg/eigh", "functional/ivy/linalg/eigh/eigh_array", "functional/ivy/linalg/eigh/eigh_container", "functional/ivy/linalg/eigh/eigh_functional", "functional/ivy/linalg/eigvalsh", "functional/ivy/linalg/eigvalsh/eigvalsh_array", "functional/ivy/linalg/eigvalsh/eigvalsh_functional", "functional/ivy/linalg/inner", "functional/ivy/linalg/inner/inner_array", "functional/ivy/linalg/inner/inner_container", "functional/ivy/linalg/inner/inner_functional", "functional/ivy/linalg/inner/static_inner_container", "functional/ivy/linalg/inv", "functional/ivy/linalg/inv/inv_array", "functional/ivy/linalg/inv/inv_container", "functional/ivy/linalg/inv/inv_functional", "functional/ivy/linalg/inv/static_inv_container", "functional/ivy/linalg/matmul", "functional/ivy/linalg/matmul/matmul_array", "functional/ivy/linalg/matmul/matmul_container", "functional/ivy/linalg/matmul/matmul_functional", "functional/ivy/linalg/matmul/static_matmul_container", "functional/ivy/linalg/matrix_norm", "functional/ivy/linalg/matrix_norm/matrix_norm_array", "functional/ivy/linalg/matrix_norm/matrix_norm_container", "functional/ivy/linalg/matrix_norm/matrix_norm_functional", "functional/ivy/linalg/matrix_norm/static_matrix_norm_container", "functional/ivy/linalg/matrix_power", "functional/ivy/linalg/matrix_power/matrix_power_container", "functional/ivy/linalg/matrix_power/matrix_power_functional", "functional/ivy/linalg/matrix_power/static_matrix_power_container", "functional/ivy/linalg/matrix_rank", "functional/ivy/linalg/matrix_rank/matrix_rank_array", "functional/ivy/linalg/matrix_rank/matrix_rank_container", "functional/ivy/linalg/matrix_rank/matrix_rank_functional", "functional/ivy/linalg/matrix_rank/static_matrix_rank_container", "functional/ivy/linalg/matrix_transpose", "functional/ivy/linalg/matrix_transpose/matrix_transpose_array", "functional/ivy/linalg/matrix_transpose/matrix_transpose_container", "functional/ivy/linalg/matrix_transpose/matrix_transpose_functional", "functional/ivy/linalg/matrix_transpose/static_matrix_transpose_container", "functional/ivy/linalg/outer", "functional/ivy/linalg/outer/outer_array", "functional/ivy/linalg/outer/outer_container", "functional/ivy/linalg/outer/outer_functional", "functional/ivy/linalg/outer/static_outer_container", "functional/ivy/linalg/pinv", "functional/ivy/linalg/pinv/pinv_array", "functional/ivy/linalg/pinv/pinv_container", "functional/ivy/linalg/pinv/pinv_functional", "functional/ivy/linalg/pinv/static_pinv_container", "functional/ivy/linalg/qr", "functional/ivy/linalg/qr/qr_array", "functional/ivy/linalg/qr/qr_container", "functional/ivy/linalg/qr/qr_functional", "functional/ivy/linalg/qr/static_qr_container", "functional/ivy/linalg/slogdet", "functional/ivy/linalg/slogdet/slogdet_array", "functional/ivy/linalg/slogdet/slogdet_container", "functional/ivy/linalg/slogdet/slogdet_functional", "functional/ivy/linalg/slogdet/static_slogdet_container", "functional/ivy/linalg/solve", "functional/ivy/linalg/solve/solve_array", "functional/ivy/linalg/solve/solve_container", "functional/ivy/linalg/solve/solve_functional", "functional/ivy/linalg/solve/static_solve_container", "functional/ivy/linalg/svd", "functional/ivy/linalg/svd/static_svd_container", "functional/ivy/linalg/svd/svd_array", "functional/ivy/linalg/svd/svd_container", "functional/ivy/linalg/svd/svd_functional", "functional/ivy/linalg/svdvals", "functional/ivy/linalg/svdvals/static_svdvals_container", "functional/ivy/linalg/svdvals/svdvals_array", "functional/ivy/linalg/svdvals/svdvals_container", "functional/ivy/linalg/svdvals/svdvals_functional", "functional/ivy/linalg/tensordot", "functional/ivy/linalg/tensordot/static_tensordot_container", "functional/ivy/linalg/tensordot/tensordot_array", "functional/ivy/linalg/tensordot/tensordot_container", "functional/ivy/linalg/tensordot/tensordot_functional", "functional/ivy/linalg/trace", "functional/ivy/linalg/trace/static_trace_container", "functional/ivy/linalg/trace/trace_array", "functional/ivy/linalg/trace/trace_container", "functional/ivy/linalg/trace/trace_functional", "functional/ivy/linalg/vander", "functional/ivy/linalg/vander/static_vander_container", "functional/ivy/linalg/vander/vander_array", "functional/ivy/linalg/vander/vander_container", "functional/ivy/linalg/vander/vander_functional", "functional/ivy/linalg/vecdot", "functional/ivy/linalg/vecdot/static_vecdot_container", "functional/ivy/linalg/vecdot/vecdot_array", "functional/ivy/linalg/vecdot/vecdot_container", "functional/ivy/linalg/vecdot/vecdot_functional", "functional/ivy/linalg/vector_norm", "functional/ivy/linalg/vector_norm/static_vector_norm_container", "functional/ivy/linalg/vector_norm/vector_norm_array", "functional/ivy/linalg/vector_norm/vector_norm_container", "functional/ivy/linalg/vector_norm/vector_norm_functional", "functional/ivy/linalg/vector_to_skew_symmetric_matrix", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/static_vector_to_skew_symmetric_matrix_container", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_container", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/linear_algebra", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/concat/static_concat_container", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/constant_pad/static_constant_pad_container", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/expand_dims/static_expand_dims_container", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/flip/static_flip_container", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/permute_dims/static_permute_dims_container", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/repeat/static_repeat_container", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/reshape/static_reshape_container", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/split/split_array", "functional/ivy/manipulation/split/split_container", "functional/ivy/manipulation/split/split_functional", "functional/ivy/manipulation/split/static_split_container", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/squeeze/static_squeeze_container", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/stack/static_stack_container", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/static_swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/static_tile_container", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/unstack", "functional/ivy/manipulation/unstack/static_unstack_container", "functional/ivy/manipulation/unstack/unstack_array", "functional/ivy/manipulation/unstack/unstack_container", "functional/ivy/manipulation/unstack/unstack_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/static_zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_argwhere", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/multinomial/multinomial_array", "functional/ivy/random/multinomial/multinomial_container", "functional/ivy/random/multinomial/multinomial_functional", "functional/ivy/random/multinomial/static_multinomial_container", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_array", "functional/ivy/random/randint/randint_container", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_normal/random_normal_array", "functional/ivy/random/random_normal/random_normal_container", "functional/ivy/random/random_normal/random_normal_functional", "functional/ivy/random/random_normal/static_random_normal_container", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_array", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/random/shuffle/shuffle_array", "functional/ivy/random/shuffle/shuffle_container", "functional/ivy/random/shuffle/shuffle_functional", "functional/ivy/random/shuffle/static_shuffle_container", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmax/argmax_array", "functional/ivy/searching/argmax/argmax_container", "functional/ivy/searching/argmax/argmax_functional", "functional/ivy/searching/argmax/static_argmax_container", "functional/ivy/searching/argmin", "functional/ivy/searching/argmin/argmin_array", "functional/ivy/searching/argmin/argmin_container", "functional/ivy/searching/argmin/argmin_functional", "functional/ivy/searching/argmin/static_argmin_container", "functional/ivy/searching/argwhere", "functional/ivy/searching/argwhere/argwhere_array", "functional/ivy/searching/argwhere/argwhere_container", "functional/ivy/searching/argwhere/argwhere_functional", "functional/ivy/searching/argwhere/static_argwhere_container", "functional/ivy/searching/nonzero", "functional/ivy/searching/nonzero/nonzero_array", "functional/ivy/searching/nonzero/nonzero_container", "functional/ivy/searching/nonzero/nonzero_functional", "functional/ivy/searching/nonzero/static_nonzero_container", "functional/ivy/searching/where", "functional/ivy/searching/where/static_where_container", "functional/ivy/searching/where/where_array", "functional/ivy/searching/where/where_container", "functional/ivy/searching/where/where_functional", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_all/static_unique_all_container", "functional/ivy/set/unique_all/unique_all_array", "functional/ivy/set/unique_all/unique_all_container", "functional/ivy/set/unique_all/unique_all_functional", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_inverse/static_unique_inverse_container", "functional/ivy/set/unique_inverse/unique_inverse_array", "functional/ivy/set/unique_inverse/unique_inverse_container", "functional/ivy/set/unique_inverse/unique_inverse_functional", "functional/ivy/set/unique_values", "functional/ivy/set/unique_values/static_unique_values_container", "functional/ivy/set/unique_values/unique_values_array", "functional/ivy/set/unique_values/unique_values_container", "functional/ivy/set/unique_values/unique_values_functional", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/searchsorted", "functional/ivy/sorting/searchsorted/searchsorted_array", "functional/ivy/sorting/searchsorted/searchsorted_container", "functional/ivy/sorting/searchsorted/searchsorted_functional", "functional/ivy/sorting/searchsorted/static_searchsorted_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/cumprod", "functional/ivy/statistical/cumprod/cumprod_array", "functional/ivy/statistical/cumprod/cumprod_container", "functional/ivy/statistical/cumprod/cumprod_functional", "functional/ivy/statistical/cumprod/static_cumprod_container", "functional/ivy/statistical/cumsum", "functional/ivy/statistical/cumsum/cumsum_array", "functional/ivy/statistical/cumsum/cumsum_container", "functional/ivy/statistical/cumsum/cumsum_functional", "functional/ivy/statistical/cumsum/static_cumsum_container", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/static_sum_container", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/static_var_container", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "glossary", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "related_work", "related_work/api_standards", "related_work/compiler_infrastructure", "related_work/exchange_formats", "related_work/frameworks", "related_work/graph_tracers", "related_work/ml_unifying_companies", "related_work/multi_vendor_compiler_frameworks", "related_work/vendor_specific_apis", "related_work/vendor_specific_compilers", "related_work/what_does_ivy_add", "related_work/wrapper_frameworks", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/Initializer", "stateful/initializers/KaimingNormal", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/module/NewTorchModule", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["_version.rst", "assertions.rst", "assertions/check_all.rst", "assertions/check_all_or_any_fn.rst", "assertions/check_any.rst", "assertions/check_elem_in_list.rst", "assertions/check_equal.rst", "assertions/check_exists.rst", "assertions/check_false.rst", "assertions/check_fill_value_and_dtype_are_compatible.rst", "assertions/check_gather_input_valid.rst", "assertions/check_gather_nd_input_valid.rst", "assertions/check_greater.rst", "assertions/check_inplace_sizes_valid.rst", "assertions/check_isinstance.rst", "assertions/check_less.rst", "assertions/check_one_way_broadcastable.rst", "assertions/check_shape.rst", "assertions/check_true.rst", "backend_handler.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/fn_name_from_version_specific_fn_name.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/set_backend_to_specific_version.rst", "backend_handler/set_jax_backend.rst", "backend_handler/set_numpy_backend.rst", "backend_handler/set_tensorflow_backend.rst", "backend_handler/set_torch_backend.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/applied_libraries.rst", "contributing/building_the_docs.rst", "contributing/helpful_resources.rst", "contributing/open_tasks.rst", "contributing/setting_up.rst", "contributing/the_basics.rst", "data_classes.rst", "data_classes/array.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/array.rst", "data_classes/array/array/Array.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_ivy_array.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/experimental.rst", "data_classes/array/experimental/activations.rst", "data_classes/array/experimental/activations/ArrayWithActivationsExperimental.rst", "data_classes/array/experimental/array_methods.rst", "data_classes/array/experimental/array_methods/avg_pool3d.rst", "data_classes/array/experimental/array_methods/diagflat.rst", "data_classes/array/experimental/array_methods/dirichlet.rst", "data_classes/array/experimental/array_methods/exp2.rst", "data_classes/array/experimental/array_methods/flatten.rst", "data_classes/array/experimental/array_methods/fliplr.rst", "data_classes/array/experimental/array_methods/flipud.rst", "data_classes/array/experimental/array_methods/float_power.rst", "data_classes/array/experimental/array_methods/fmax.rst", "data_classes/array/experimental/array_methods/fmod.rst", "data_classes/array/experimental/array_methods/gcd.rst", "data_classes/array/experimental/array_methods/heaviside.rst", "data_classes/array/experimental/array_methods/hstack.rst", "data_classes/array/experimental/array_methods/i0.rst", "data_classes/array/experimental/array_methods/isclose.rst", "data_classes/array/experimental/array_methods/isneginf.rst", "data_classes/array/experimental/array_methods/isposinf.rst", "data_classes/array/experimental/array_methods/kron.rst", "data_classes/array/experimental/array_methods/lcm.rst", "data_classes/array/experimental/array_methods/logaddexp2.rst", "data_classes/array/experimental/array_methods/max_pool1d.rst", "data_classes/array/experimental/array_methods/max_pool2d.rst", "data_classes/array/experimental/array_methods/max_pool3d.rst", "data_classes/array/experimental/array_methods/median.rst", "data_classes/array/experimental/array_methods/moveaxis.rst", "data_classes/array/experimental/array_methods/msort.rst", "data_classes/array/experimental/array_methods/nan_to_num.rst", "data_classes/array/experimental/array_methods/nansum.rst", "data_classes/array/experimental/array_methods/pad.rst", "data_classes/array/experimental/array_methods/rot90.rst", "data_classes/array/experimental/array_methods/signbit.rst", "data_classes/array/experimental/array_methods/sinc.rst", "data_classes/array/experimental/array_methods/top_k.rst", "data_classes/array/experimental/array_methods/trapz.rst", "data_classes/array/experimental/array_methods/vstack.rst", "data_classes/array/experimental/conversions.rst", "data_classes/array/experimental/conversions/ArrayWithConversionsExperimental.rst", "data_classes/array/experimental/creation.rst", "data_classes/array/experimental/creation/ArrayWithCreationExperimental.rst", "data_classes/array/experimental/data_type.rst", "data_classes/array/experimental/data_type/ArrayWithData_typeExperimental.rst", "data_classes/array/experimental/device.rst", "data_classes/array/experimental/device/ArrayWithDeviceExperimental.rst", "data_classes/array/experimental/elementwise.rst", "data_classes/array/experimental/elementwise/ArrayWithElementWiseExperimental.rst", "data_classes/array/experimental/general.rst", "data_classes/array/experimental/general/ArrayWithGeneralExperimental.rst", "data_classes/array/experimental/gradients.rst", "data_classes/array/experimental/gradients/ArrayWithGradientsExperimental.rst", "data_classes/array/experimental/image.rst", "data_classes/array/experimental/image/ArrayWithImageExperimental.rst", "data_classes/array/experimental/layers.rst", "data_classes/array/experimental/layers/ArrayWithLayersExperimental.rst", "data_classes/array/experimental/linalg.rst", "data_classes/array/experimental/linalg/ArrayWithLinalgExperimental.rst", "data_classes/array/experimental/losses.rst", "data_classes/array/experimental/losses/ArrayWithLossesExperimental.rst", "data_classes/array/experimental/manipulation.rst", "data_classes/array/experimental/manipulation/ArrayWithManipulationExperimental.rst", "data_classes/array/experimental/norms.rst", "data_classes/array/experimental/norms/ArrayWithNormsExperimental.rst", "data_classes/array/experimental/random.rst", "data_classes/array/experimental/random/ArrayWithRandomExperimental.rst", "data_classes/array/experimental/searching.rst", "data_classes/array/experimental/searching/ArrayWithSearchingExperimental.rst", "data_classes/array/experimental/set.rst", "data_classes/array/experimental/set/ArrayWithSetExperimental.rst", "data_classes/array/experimental/sorting.rst", "data_classes/array/experimental/sorting/ArrayWithSortingExperimental.rst", "data_classes/array/experimental/statistical.rst", "data_classes/array/experimental/statistical/ArrayWithStatisticalExperimental.rst", "data_classes/array/experimental/utility.rst", "data_classes/array/experimental/utility/ArrayWithUtilityExperimental.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linalg.rst", "data_classes/array/linalg/ArrayWithLinalg.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/conversions.rst", "data_classes/container/conversions/ContainerWithConversions.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/experimental.rst", "data_classes/container/experimental/activations.rst", "data_classes/container/experimental/activations/ContainerWithActivationExperimental.rst", "data_classes/container/experimental/container_methods.rst", "data_classes/container/experimental/container_methods/avg_pool2d.rst", "data_classes/container/experimental/container_methods/avg_pool3d.rst", "data_classes/container/experimental/container_methods/diagflat.rst", "data_classes/container/experimental/container_methods/dirichlet.rst", "data_classes/container/experimental/container_methods/exp2.rst", "data_classes/container/experimental/container_methods/flatten.rst", "data_classes/container/experimental/container_methods/fliplr.rst", "data_classes/container/experimental/container_methods/flipud.rst", "data_classes/container/experimental/container_methods/float_power.rst", "data_classes/container/experimental/container_methods/fmax.rst", "data_classes/container/experimental/container_methods/fmod.rst", "data_classes/container/experimental/container_methods/gcd.rst", "data_classes/container/experimental/container_methods/hamming_window.rst", "data_classes/container/experimental/container_methods/hann_window.rst", "data_classes/container/experimental/container_methods/heaviside.rst", "data_classes/container/experimental/container_methods/hstack.rst", "data_classes/container/experimental/container_methods/i0.rst", "data_classes/container/experimental/container_methods/isclose.rst", "data_classes/container/experimental/container_methods/isneginf.rst", "data_classes/container/experimental/container_methods/isposinf.rst", "data_classes/container/experimental/container_methods/kaiser_bessel_derived_window.rst", "data_classes/container/experimental/container_methods/kaiser_window.rst", "data_classes/container/experimental/container_methods/kron.rst", "data_classes/container/experimental/container_methods/lcm.rst", "data_classes/container/experimental/container_methods/logaddexp2.rst", "data_classes/container/experimental/container_methods/max_pool1d.rst", "data_classes/container/experimental/container_methods/max_pool2d.rst", "data_classes/container/experimental/container_methods/max_pool3d.rst", "data_classes/container/experimental/container_methods/median.rst", "data_classes/container/experimental/container_methods/moveaxis.rst", "data_classes/container/experimental/container_methods/msort.rst", "data_classes/container/experimental/container_methods/nan_to_num.rst", "data_classes/container/experimental/container_methods/nansum.rst", "data_classes/container/experimental/container_methods/pad.rst", "data_classes/container/experimental/container_methods/rot90.rst", "data_classes/container/experimental/container_methods/signbit.rst", "data_classes/container/experimental/container_methods/sinc.rst", "data_classes/container/experimental/container_methods/static_avg_pool2d.rst", "data_classes/container/experimental/container_methods/static_avg_pool3d.rst", "data_classes/container/experimental/container_methods/static_diagflat.rst", "data_classes/container/experimental/container_methods/static_dirichlet.rst", "data_classes/container/experimental/container_methods/static_exp2.rst", "data_classes/container/experimental/container_methods/static_flatten.rst", "data_classes/container/experimental/container_methods/static_fliplr.rst", "data_classes/container/experimental/container_methods/static_flipud.rst", "data_classes/container/experimental/container_methods/static_float_power.rst", "data_classes/container/experimental/container_methods/static_fmax.rst", "data_classes/container/experimental/container_methods/static_fmod.rst", "data_classes/container/experimental/container_methods/static_gcd.rst", "data_classes/container/experimental/container_methods/static_hamming_window.rst", "data_classes/container/experimental/container_methods/static_hann_window.rst", "data_classes/container/experimental/container_methods/static_heaviside.rst", "data_classes/container/experimental/container_methods/static_hstack.rst", "data_classes/container/experimental/container_methods/static_i0.rst", "data_classes/container/experimental/container_methods/static_isclose.rst", "data_classes/container/experimental/container_methods/static_isneginf.rst", "data_classes/container/experimental/container_methods/static_isposinf.rst", "data_classes/container/experimental/container_methods/static_kaiser_bessel_derived_window.rst", "data_classes/container/experimental/container_methods/static_kaiser_window.rst", "data_classes/container/experimental/container_methods/static_kron.rst", "data_classes/container/experimental/container_methods/static_lcm.rst", "data_classes/container/experimental/container_methods/static_logaddexp2.rst", "data_classes/container/experimental/container_methods/static_max_pool1d.rst", "data_classes/container/experimental/container_methods/static_max_pool2d.rst", "data_classes/container/experimental/container_methods/static_max_pool3d.rst", "data_classes/container/experimental/container_methods/static_median.rst", "data_classes/container/experimental/container_methods/static_moveaxis.rst", "data_classes/container/experimental/container_methods/static_msort.rst", "data_classes/container/experimental/container_methods/static_nan_to_num.rst", "data_classes/container/experimental/container_methods/static_nansum.rst", "data_classes/container/experimental/container_methods/static_pad.rst", "data_classes/container/experimental/container_methods/static_rot90.rst", "data_classes/container/experimental/container_methods/static_signbit.rst", "data_classes/container/experimental/container_methods/static_sinc.rst", "data_classes/container/experimental/container_methods/static_top_k.rst", "data_classes/container/experimental/container_methods/static_triu_indices.rst", "data_classes/container/experimental/container_methods/static_vstack.rst", "data_classes/container/experimental/container_methods/top_k.rst", "data_classes/container/experimental/container_methods/triu_indices.rst", "data_classes/container/experimental/container_methods/vstack.rst", "data_classes/container/experimental/conversions.rst", "data_classes/container/experimental/conversions/ContainerWithConversionExperimental.rst", "data_classes/container/experimental/creation.rst", "data_classes/container/experimental/creation/ContainerWithCreationExperimental.rst", "data_classes/container/experimental/data_type.rst", "data_classes/container/experimental/data_type/ContainerWithData_typeExperimental.rst", "data_classes/container/experimental/device.rst", "data_classes/container/experimental/device/ContainerWithDeviceExperimental.rst", "data_classes/container/experimental/elementwise.rst", "data_classes/container/experimental/elementwise/ContainerWithElementWiseExperimental.rst", "data_classes/container/experimental/general.rst", "data_classes/container/experimental/general/ContainerWithGeneralExperimental.rst", "data_classes/container/experimental/gradients.rst", "data_classes/container/experimental/gradients/ContainerWithGradientsExperimental.rst", "data_classes/container/experimental/image.rst", "data_classes/container/experimental/image/ContainerWithImageExperimental.rst", "data_classes/container/experimental/layers.rst", "data_classes/container/experimental/layers/ContainerWithLayersExperimental.rst", "data_classes/container/experimental/linalg.rst", "data_classes/container/experimental/linalg/ContainerWithLinalgExperimental.rst", "data_classes/container/experimental/losses.rst", "data_classes/container/experimental/losses/ContainerWithLossesExperimental.rst", "data_classes/container/experimental/manipulation.rst", "data_classes/container/experimental/manipulation/ContainerWithManipulationExperimental.rst", "data_classes/container/experimental/norms.rst", "data_classes/container/experimental/norms/ContainerWithNormsExperimental.rst", "data_classes/container/experimental/random.rst", "data_classes/container/experimental/random/ContainerWithRandomExperimental.rst", "data_classes/container/experimental/searching.rst", "data_classes/container/experimental/searching/ContainerWithSearchingExperimental.rst", "data_classes/container/experimental/set.rst", "data_classes/container/experimental/set/ContainerWithSetExperimental.rst", "data_classes/container/experimental/sorting.rst", "data_classes/container/experimental/sorting/ContainerWithSortingExperimental.rst", "data_classes/container/experimental/statistical.rst", "data_classes/container/experimental/statistical/ContainerWithStatisticalExperimental.rst", "data_classes/container/experimental/utility.rst", "data_classes/container/experimental/utility/ContainerWithUtilityExperimental.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linalg.rst", "data_classes/container/linalg/ContainerWithLinalg.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/array_api_tests.rst", "deep_dive/arrays.rst", "deep_dive/backend_setting.rst", "deep_dive/containers.rst", "deep_dive/continuous_integration.rst", "deep_dive/data_types.rst", "deep_dive/devices.rst", "deep_dive/docstring_examples.rst", "deep_dive/docstrings.rst", "deep_dive/exception_handling.rst", "deep_dive/formatting.rst", "deep_dive/function_arguments.rst", "deep_dive/function_types.rst", "deep_dive/function_wrapping.rst", "deep_dive/inplace_updates.rst", "deep_dive/ivy_frontends.rst", "deep_dive/ivy_frontends_tests.rst", "deep_dive/ivy_tests.rst", "deep_dive/navigating_the_code.rst", "deep_dive/superset_behaviour.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/from_zero_dim_arrays_to_float.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/integer_arrays_to_float.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/experimental.rst", "functional/experimental/activations.rst", "functional/experimental/compilation.rst", "functional/experimental/constants.rst", "functional/experimental/creation.rst", "functional/experimental/creation/hamming_window.rst", "functional/experimental/creation/hann_window.rst", "functional/experimental/creation/kaiser_bessel_derived_window.rst", "functional/experimental/creation/kaiser_window.rst", "functional/experimental/creation/triu_indices.rst", "functional/experimental/creation/vorbis_window.rst", "functional/experimental/data_type.rst", "functional/experimental/device.rst", "functional/experimental/elementwise.rst", "functional/experimental/elementwise/exp2.rst", "functional/experimental/elementwise/float_power.rst", "functional/experimental/elementwise/fmax.rst", "functional/experimental/elementwise/fmod.rst", "functional/experimental/elementwise/gcd.rst", "functional/experimental/elementwise/isclose.rst", "functional/experimental/elementwise/isneginf.rst", "functional/experimental/elementwise/isposinf.rst", "functional/experimental/elementwise/lcm.rst", "functional/experimental/elementwise/logaddexp2.rst", "functional/experimental/elementwise/nan_to_num.rst", "functional/experimental/elementwise/nansum.rst", "functional/experimental/elementwise/signbit.rst", "functional/experimental/elementwise/sinc.rst", "functional/experimental/elementwise/trapz.rst", "functional/experimental/general.rst", "functional/experimental/gradients.rst", "functional/experimental/layers.rst", "functional/experimental/layers/avg_pool2d.rst", "functional/experimental/layers/avg_pool3d.rst", "functional/experimental/layers/max_pool1d.rst", "functional/experimental/layers/max_pool2d.rst", "functional/experimental/layers/max_pool3d.rst", "functional/experimental/linalg.rst", "functional/experimental/linalg/diagflat.rst", "functional/experimental/linalg/kron.rst", "functional/experimental/losses.rst", "functional/experimental/manipulation.rst", "functional/experimental/manipulation/flatten.rst", "functional/experimental/manipulation/fliplr.rst", "functional/experimental/manipulation/flipud.rst", "functional/experimental/manipulation/heaviside.rst", "functional/experimental/manipulation/hstack.rst", "functional/experimental/manipulation/i0.rst", "functional/experimental/manipulation/moveaxis.rst", "functional/experimental/manipulation/ndenumerate.rst", "functional/experimental/manipulation/ndindex.rst", "functional/experimental/manipulation/pad.rst", "functional/experimental/manipulation/rot90.rst", "functional/experimental/manipulation/top_k.rst", "functional/experimental/manipulation/vstack.rst", "functional/experimental/meta.rst", "functional/experimental/nest.rst", "functional/experimental/norms.rst", "functional/experimental/random.rst", "functional/experimental/random/beta.rst", "functional/experimental/random/dirichlet.rst", "functional/experimental/random/gamma.rst", "functional/experimental/searching.rst", "functional/experimental/set.rst", "functional/experimental/sorting.rst", "functional/experimental/sorting/msort.rst", "functional/experimental/sparse_array.rst", "functional/experimental/sparse_array/is_ivy_sparse_array.rst", "functional/experimental/sparse_array/is_native_sparse_array.rst", "functional/experimental/sparse_array/native_sparse_array.rst", "functional/experimental/sparse_array/native_sparse_array_to_indices_values_and_shape.rst", "functional/experimental/statistical.rst", "functional/experimental/statistical/median.rst", "functional/experimental/utility.rst", "functional/experimental/utility/is_storage.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/deserialize.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/gelu/gelu_array.rst", "functional/ivy/activations/gelu/gelu_container.rst", "functional/ivy/activations/gelu/gelu_functional.rst", "functional/ivy/activations/gelu/static_gelu_container.rst", "functional/ivy/activations/get.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/leaky_relu/leaky_relu_array.rst", "functional/ivy/activations/leaky_relu/leaky_relu_container.rst", "functional/ivy/activations/leaky_relu/leaky_relu_functional.rst", "functional/ivy/activations/leaky_relu/static_leaky_relu_container.rst", "functional/ivy/activations/log_softmax.rst", "functional/ivy/activations/log_softmax/log_softmax_array.rst", "functional/ivy/activations/log_softmax/log_softmax_container.rst", "functional/ivy/activations/log_softmax/log_softmax_functional.rst", "functional/ivy/activations/log_softmax/static_log_softmax_container.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/relu/relu_array.rst", "functional/ivy/activations/relu/relu_container.rst", "functional/ivy/activations/relu/relu_functional.rst", "functional/ivy/activations/relu/static_relu_container.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/sigmoid/sigmoid_array.rst", "functional/ivy/activations/sigmoid/sigmoid_container.rst", "functional/ivy/activations/sigmoid/sigmoid_functional.rst", "functional/ivy/activations/sigmoid/static_sigmoid_container.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softmax/softmax_array.rst", "functional/ivy/activations/softmax/softmax_container.rst", "functional/ivy/activations/softmax/softmax_functional.rst", "functional/ivy/activations/softmax/static_softmax_container.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/NestedSequence.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/asarray_handle_nestable.rst", "functional/ivy/creation/asarray_infer_device.rst", "functional/ivy/creation/asarray_to_native_arrays_and_back.rst", "functional/ivy/creation/copy_array.rst", "functional/ivy/creation/copy_array/copy_array_array.rst", "functional/ivy/creation/copy_array/copy_array_functional.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/one_hot.rst", "functional/ivy/creation/one_hot/one_hot_array.rst", "functional/ivy/creation/one_hot/one_hot_container.rst", "functional/ivy/creation/one_hot/one_hot_functional.rst", "functional/ivy/creation/one_hot/static_one_hot_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/astype/astype_array.rst", "functional/ivy/data_type/astype/astype_container.rst", "functional/ivy/data_type/astype/astype_functional.rst", "functional/ivy/data_type/astype/static_astype_container.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional.rst", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_array.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_container.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_functional.rst", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/check_float.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_float_dtype/default_float_dtype_functional.rst", "functional/ivy/data_type/default_float_dtype/static_default_float_dtype_container.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/default_uint_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype/dtype_container.rst", "functional/ivy/data_type/dtype/dtype_functional.rst", "functional/ivy/data_type/dtype/static_dtype_container.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/finfo/finfo_array.rst", "functional/ivy/data_type/finfo/finfo_container.rst", "functional/ivy/data_type/finfo/finfo_functional.rst", "functional/ivy/data_type/finfo/static_finfo_container.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_supported_dtypes/function_supported_dtypes_functional.rst", "functional/ivy/data_type/function_supported_dtypes/static_function_supported_dtypes_container.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes/function_unsupported_dtypes_functional.rst", "functional/ivy/data_type/function_unsupported_dtypes/static_function_unsupported_dtypes_container.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/iinfo/iinfo_array.rst", "functional/ivy/data_type/iinfo/iinfo_container.rst", "functional/ivy/data_type/iinfo/iinfo_functional.rst", "functional/ivy/data_type/iinfo/static_iinfo_container.rst", "functional/ivy/data_type/infer_default_dtype.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_bool_dtype.rst", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_array.rst", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_container.rst", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_functional.rst", "functional/ivy/data_type/is_bool_dtype/static_is_bool_dtype_container.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional.rst", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional.rst", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container.rst", "functional/ivy/data_type/is_uint_dtype.rst", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_array.rst", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_container.rst", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_functional.rst", "functional/ivy/data_type/is_uint_dtype/static_is_uint_dtype_container.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/promote_types_of_inputs.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/result_type/result_type_array.rst", "functional/ivy/data_type/result_type/result_type_container.rst", "functional/ivy/data_type/result_type/result_type_functional.rst", "functional/ivy/data_type/result_type/static_result_type_container.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/set_default_uint_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/unset_default_uint_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev/dev_array.rst", "functional/ivy/device/dev/dev_container.rst", "functional/ivy/device/dev/dev_functional.rst", "functional/ivy/device/dev/static_dev_container.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/function_supported_devices.rst", "functional/ivy/device/function_unsupported_devices.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/to_device/static_to_device_container.rst", "functional/ivy/device/to_device/to_device_array.rst", "functional/ivy/device/to_device/to_device_container.rst", "functional/ivy/device/to_device/to_device_functional.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acos/static_acos_container.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/acosh/static_acosh_container.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asin/static_asin_container.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/asinh/static_asinh_container.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan/static_atan_container.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atan2/static_atan2_container.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/atanh/static_atanh_container.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_and/static_bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_invert/static_bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_left_shift/static_bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_or/static_bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_right_shift/static_bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/bitwise_xor/static_bitwise_xor_container.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/ceil/static_ceil_container.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cos/static_cos_container.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/cosh/static_cosh_container.rst", "functional/ivy/elementwise/deg2rad.rst", "functional/ivy/elementwise/deg2rad/deg2rad_array.rst", "functional/ivy/elementwise/deg2rad/deg2rad_container.rst", "functional/ivy/elementwise/deg2rad/deg2rad_functional.rst", "functional/ivy/elementwise/deg2rad/static_deg2rad_container.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/equal/static_equal_container.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/erf/static_erf_container.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/exp/static_exp_container.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/expm1/static_expm1_container.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor/static_floor_container.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/floor_divide/static_floor_divide_container.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater/static_greater_container.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/greater_equal/static_greater_equal_container.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isfinite/static_isfinite_container.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isinf/static_isinf_container.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/isnan/static_isnan_container.rst", "functional/ivy/elementwise/isreal.rst", "functional/ivy/elementwise/isreal/isreal_array.rst", "functional/ivy/elementwise/isreal/isreal_container.rst", "functional/ivy/elementwise/isreal/isreal_functional.rst", "functional/ivy/elementwise/isreal/static_isreal_container.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less/static_less_container.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/less_equal/static_less_equal_container.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log/static_log_container.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log10/static_log10_container.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log1p/static_log1p_container.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/log2/static_log2_container.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logaddexp/static_logaddexp_container.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_and/static_logical_and_container.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_not/static_logical_not_container.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_or/static_logical_or_container.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/logical_xor/static_logical_xor_container.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/maximum/maximum_array.rst", "functional/ivy/elementwise/maximum/maximum_container.rst", "functional/ivy/elementwise/maximum/maximum_functional.rst", "functional/ivy/elementwise/maximum/static_maximum_container.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/minimum/minimum_array.rst", "functional/ivy/elementwise/minimum/minimum_container.rst", "functional/ivy/elementwise/minimum/minimum_functional.rst", "functional/ivy/elementwise/minimum/static_minimum_container.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/negative/static_negative_container.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/not_equal/static_not_equal_container.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/positive/static_positive_container.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/pow/static_pow_container.rst", "functional/ivy/elementwise/rad2deg.rst", "functional/ivy/elementwise/rad2deg/rad2deg_array.rst", "functional/ivy/elementwise/rad2deg/rad2deg_container.rst", "functional/ivy/elementwise/rad2deg/rad2deg_functional.rst", "functional/ivy/elementwise/rad2deg/static_rad2deg_container.rst", "functional/ivy/elementwise/reciprocal.rst", "functional/ivy/elementwise/reciprocal/reciprocal_array.rst", "functional/ivy/elementwise/reciprocal/reciprocal_container.rst", "functional/ivy/elementwise/reciprocal/reciprocal_functional.rst", "functional/ivy/elementwise/reciprocal/static_reciprocal_container.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/remainder/static_remainder_container.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/round/static_round_container.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sign/static_sign_container.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sin/static_sin_container.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sinh/static_sinh_container.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/sqrt/static_sqrt_container.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/square/static_square_container.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/static_trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/elementwise/trunc_divide.rst", "functional/ivy/elementwise/trunc_divide/static_trunc_divide_container.rst", "functional/ivy/elementwise/trunc_divide/trunc_divide_array.rst", "functional/ivy/elementwise/trunc_divide/trunc_divide_container.rst", "functional/ivy/elementwise/trunc_divide/trunc_divide_functional.rst", "functional/ivy/extensions.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/array_equal/array_equal_array.rst", "functional/ivy/general/array_equal/array_equal_functional.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_array.rst", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_container.rst", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_functional.rst", "functional/ivy/general/assert_supports_inplace/static_assert_supports_inplace_container.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_array.rst", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_container.rst", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_functional.rst", "functional/ivy/general/clip_matrix_norm/static_clip_matrix_norm_container.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_array.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/clip_vector_norm/static_clip_vector_norm_container.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/default/default_array.rst", "functional/ivy/general/default/default_functional.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_rearrange/einops_rearrange_array.rst", "functional/ivy/general/einops_rearrange/einops_rearrange_container.rst", "functional/ivy/general/einops_rearrange/einops_rearrange_functional.rst", "functional/ivy/general/einops_rearrange/static_einops_rearrange_container.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_reduce/einops_reduce_array.rst", "functional/ivy/general/einops_reduce/einops_reduce_container.rst", "functional/ivy/general/einops_reduce/einops_reduce_functional.rst", "functional/ivy/general/einops_reduce/static_einops_reduce_container.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/einops_repeat/einops_repeat_array.rst", "functional/ivy/general/einops_repeat/einops_repeat_container.rst", "functional/ivy/general/einops_repeat/einops_repeat_functional.rst", "functional/ivy/general/einops_repeat/static_einops_repeat_container.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/exists/exists_array.rst", "functional/ivy/general/exists/exists_functional.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/fourier_encode/fourier_encode_array.rst", "functional/ivy/general/fourier_encode/fourier_encode_container.rst", "functional/ivy/general/fourier_encode/fourier_encode_functional.rst", "functional/ivy/general/fourier_encode/static_fourier_encode_container.rst", "functional/ivy/general/function_supported_devices_and_dtypes.rst", "functional/ivy/general/function_unsupported_devices_and_dtypes.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather/gather_array.rst", "functional/ivy/general/gather/gather_container.rst", "functional/ivy/general/gather/gather_functional.rst", "functional/ivy/general/gather/static_gather_container.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_array_mode.rst", "functional/ivy/general/get_exception_trace_mode.rst", "functional/ivy/general/get_item.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_nestable_mode.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_num_dims/get_num_dims_array.rst", "functional/ivy/general/get_num_dims/get_num_dims_container.rst", "functional/ivy/general/get_num_dims/get_num_dims_functional.rst", "functional/ivy/general/get_num_dims/static_get_num_dims_container.rst", "functional/ivy/general/get_queue_timeout.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/get_tmp_dir.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/has_nans/has_nans_array.rst", "functional/ivy/general/has_nans/has_nans_container.rst", "functional/ivy/general/has_nans/has_nans_functional.rst", "functional/ivy/general/has_nans/static_has_nans_container.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_decrement/inplace_decrement_array.rst", "functional/ivy/general/inplace_decrement/inplace_decrement_container.rst", "functional/ivy/general/inplace_decrement/inplace_decrement_functional.rst", "functional/ivy/general/inplace_decrement/static_inplace_decrement_container.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_increment/inplace_increment_array.rst", "functional/ivy/general/inplace_increment/inplace_increment_container.rst", "functional/ivy/general/inplace_increment/inplace_increment_functional.rst", "functional/ivy/general/inplace_increment/static_inplace_increment_container.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_update/inplace_update_array.rst", "functional/ivy/general/inplace_update/inplace_update_container.rst", "functional/ivy/general/inplace_update/inplace_update_functional.rst", "functional/ivy/general/inplace_update/static_inplace_update_container.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_array/is_array_array.rst", "functional/ivy/general/is_array/is_array_container.rst", "functional/ivy/general/is_array/is_array_functional.rst", "functional/ivy/general/is_array/static_is_array_container.rst", "functional/ivy/general/is_frontend_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_array/is_ivy_array_array.rst", "functional/ivy/general/is_ivy_array/is_ivy_array_container.rst", "functional/ivy/general/is_ivy_array/is_ivy_array_functional.rst", "functional/ivy/general/is_ivy_array/static_is_ivy_array_container.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_ivy_container/is_ivy_container_array.rst", "functional/ivy/general/is_ivy_container/is_ivy_container_container.rst", "functional/ivy/general/is_ivy_container/is_ivy_container_functional.rst", "functional/ivy/general/is_ivy_container/static_is_ivy_container_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/is_native_array/is_native_array_array.rst", "functional/ivy/general/is_native_array/is_native_array_container.rst", "functional/ivy/general/is_native_array/is_native_array_functional.rst", "functional/ivy/general/is_native_array/static_is_native_array_container.rst", "functional/ivy/general/isscalar.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_flat/scatter_flat_array.rst", "functional/ivy/general/scatter_flat/scatter_flat_container.rst", "functional/ivy/general/scatter_flat/scatter_flat_functional.rst", "functional/ivy/general/scatter_flat/static_scatter_flat_container.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/scatter_nd/scatter_nd_array.rst", "functional/ivy/general/scatter_nd/scatter_nd_container.rst", "functional/ivy/general/scatter_nd/scatter_nd_functional.rst", "functional/ivy/general/scatter_nd/static_scatter_nd_container.rst", "functional/ivy/general/set_array_mode.rst", "functional/ivy/general/set_exception_trace_mode.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_nestable_mode.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_shape_array_mode.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_array_mode.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_divide/stable_divide_array.rst", "functional/ivy/general/stable_divide/stable_divide_container.rst", "functional/ivy/general/stable_divide/stable_divide_functional.rst", "functional/ivy/general/stable_divide/static_stable_divide_container.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/stable_pow/stable_pow_array.rst", "functional/ivy/general/stable_pow/stable_pow_container.rst", "functional/ivy/general/stable_pow/stable_pow_functional.rst", "functional/ivy/general/stable_pow/static_stable_pow_container.rst", "functional/ivy/general/supports_inplace_updates.rst", "functional/ivy/general/supports_inplace_updates/static_supports_inplace_updates_container.rst", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_array.rst", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_container.rst", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_functional.rst", "functional/ivy/general/to_ivy_shape.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_list/static_to_list_container.rst", "functional/ivy/general/to_list/to_list_array.rst", "functional/ivy/general/to_list/to_list_container.rst", "functional/ivy/general/to_list/to_list_functional.rst", "functional/ivy/general/to_native_shape.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_numpy/static_to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_array.rst", "functional/ivy/general/to_numpy/to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_functional.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/to_scalar/static_to_scalar_container.rst", "functional/ivy/general/to_scalar/to_scalar_array.rst", "functional/ivy/general/to_scalar/to_scalar_container.rst", "functional/ivy/general/to_scalar/to_scalar_functional.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unset_array_mode.rst", "functional/ivy/general/unset_exception_trace_mode.rst", "functional/ivy/general/unset_nestable_mode.rst", "functional/ivy/general/unset_queue_timeout.rst", "functional/ivy/general/unset_shape_array_mode.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/general/value_is_nan/static_value_is_nan_container.rst", "functional/ivy/general/value_is_nan/value_is_nan_array.rst", "functional/ivy/general/value_is_nan/value_is_nan_container.rst", "functional/ivy/general/value_is_nan/value_is_nan_functional.rst", "functional/ivy/general/vmap.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_array.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/grad.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_array.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_array.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/jac.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_array.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_array.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_array.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/stop_gradient/static_stop_gradient_container.rst", "functional/ivy/gradients/stop_gradient/stop_gradient_array.rst", "functional/ivy/gradients/stop_gradient/stop_gradient_container.rst", "functional/ivy/gradients/stop_gradient/stop_gradient_functional.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/value_and_grad.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable/static_variable_container.rst", "functional/ivy/gradients/variable/variable_array.rst", "functional/ivy/gradients/variable/variable_container.rst", "functional/ivy/gradients/variable/variable_functional.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/variable_data/static_variable_data_container.rst", "functional/ivy/gradients/variable_data/variable_data_array.rst", "functional/ivy/gradients/variable_data/variable_data_container.rst", "functional/ivy/gradients/variable_data/variable_data_functional.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d/conv1d_array.rst", "functional/ivy/layers/conv1d/conv1d_container.rst", "functional/ivy/layers/conv1d/conv1d_functional.rst", "functional/ivy/layers/conv1d/static_conv1d_container.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_array.rst", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_container.rst", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_functional.rst", "functional/ivy/layers/conv1d_transpose/static_conv1d_transpose_container.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d/conv2d_array.rst", "functional/ivy/layers/conv2d/conv2d_container.rst", "functional/ivy/layers/conv2d/conv2d_functional.rst", "functional/ivy/layers/conv2d/static_conv2d_container.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv2d_transpose/conv2d_transpose_container.rst", "functional/ivy/layers/conv2d_transpose/conv2d_transpose_functional.rst", "functional/ivy/layers/conv2d_transpose/static_conv2d_transpose_container.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d/conv3d_array.rst", "functional/ivy/layers/conv3d/conv3d_container.rst", "functional/ivy/layers/conv3d/conv3d_functional.rst", "functional/ivy/layers/conv3d/static_conv3d_container.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_array.rst", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_container.rst", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_functional.rst", "functional/ivy/layers/conv3d_transpose/static_conv3d_transpose_container.rst", "functional/ivy/layers/conv_general_dilated.rst", "functional/ivy/layers/conv_general_transpose.rst", "functional/ivy/layers/deconv_length.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_array.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_container.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_functional.rst", "functional/ivy/layers/depthwise_conv2d/static_depthwise_conv2d_container.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/dropout/dropout_array.rst", "functional/ivy/layers/dropout/dropout_container.rst", "functional/ivy/layers/dropout/dropout_functional.rst", "functional/ivy/layers/dropout/static_dropout_container.rst", "functional/ivy/layers/get_x_data_format.rst", "functional/ivy/layers/handle_padding.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/linear/linear_array.rst", "functional/ivy/layers/linear/linear_container.rst", "functional/ivy/layers/linear/linear_functional.rst", "functional/ivy/layers/linear/static_linear_container.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/lstm_update/lstm_update_array.rst", "functional/ivy/layers/lstm_update/lstm_update_container.rst", "functional/ivy/layers/lstm_update/lstm_update_functional.rst", "functional/ivy/layers/lstm_update/static_lstm_update_container.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/multi_head_attention/multi_head_attention_array.rst", "functional/ivy/layers/multi_head_attention/multi_head_attention_container.rst", "functional/ivy/layers/multi_head_attention/multi_head_attention_functional.rst", "functional/ivy/layers/multi_head_attention/static_multi_head_attention_container.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_array.rst", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_container.rst", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_functional.rst", "functional/ivy/layers/scaled_dot_product_attention/static_scaled_dot_product_attention_container.rst", "functional/ivy/linalg.rst", "functional/ivy/linalg/cholesky.rst", "functional/ivy/linalg/cholesky/cholesky_array.rst", "functional/ivy/linalg/cholesky/cholesky_container.rst", "functional/ivy/linalg/cholesky/cholesky_functional.rst", "functional/ivy/linalg/cholesky/static_cholesky_container.rst", "functional/ivy/linalg/cross.rst", "functional/ivy/linalg/cross/cross_array.rst", "functional/ivy/linalg/cross/cross_container.rst", "functional/ivy/linalg/cross/cross_functional.rst", "functional/ivy/linalg/cross/static_cross_container.rst", "functional/ivy/linalg/det.rst", "functional/ivy/linalg/det/det_array.rst", "functional/ivy/linalg/det/det_container.rst", "functional/ivy/linalg/det/det_functional.rst", "functional/ivy/linalg/det/static_det_container.rst", "functional/ivy/linalg/diag.rst", "functional/ivy/linalg/diag/diag_array.rst", "functional/ivy/linalg/diag/diag_container.rst", "functional/ivy/linalg/diag/diag_functional.rst", "functional/ivy/linalg/diag/static_diag_container.rst", "functional/ivy/linalg/diagonal.rst", "functional/ivy/linalg/diagonal/diagonal_array.rst", "functional/ivy/linalg/diagonal/diagonal_container.rst", "functional/ivy/linalg/diagonal/diagonal_functional.rst", "functional/ivy/linalg/diagonal/static_diagonal_container.rst", "functional/ivy/linalg/eigh.rst", "functional/ivy/linalg/eigh/eigh_array.rst", "functional/ivy/linalg/eigh/eigh_container.rst", "functional/ivy/linalg/eigh/eigh_functional.rst", "functional/ivy/linalg/eigvalsh.rst", "functional/ivy/linalg/eigvalsh/eigvalsh_array.rst", "functional/ivy/linalg/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linalg/inner.rst", "functional/ivy/linalg/inner/inner_array.rst", "functional/ivy/linalg/inner/inner_container.rst", "functional/ivy/linalg/inner/inner_functional.rst", "functional/ivy/linalg/inner/static_inner_container.rst", "functional/ivy/linalg/inv.rst", "functional/ivy/linalg/inv/inv_array.rst", "functional/ivy/linalg/inv/inv_container.rst", "functional/ivy/linalg/inv/inv_functional.rst", "functional/ivy/linalg/inv/static_inv_container.rst", "functional/ivy/linalg/matmul.rst", "functional/ivy/linalg/matmul/matmul_array.rst", "functional/ivy/linalg/matmul/matmul_container.rst", "functional/ivy/linalg/matmul/matmul_functional.rst", "functional/ivy/linalg/matmul/static_matmul_container.rst", "functional/ivy/linalg/matrix_norm.rst", "functional/ivy/linalg/matrix_norm/matrix_norm_array.rst", "functional/ivy/linalg/matrix_norm/matrix_norm_container.rst", "functional/ivy/linalg/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linalg/matrix_norm/static_matrix_norm_container.rst", "functional/ivy/linalg/matrix_power.rst", "functional/ivy/linalg/matrix_power/matrix_power_container.rst", "functional/ivy/linalg/matrix_power/matrix_power_functional.rst", "functional/ivy/linalg/matrix_power/static_matrix_power_container.rst", "functional/ivy/linalg/matrix_rank.rst", "functional/ivy/linalg/matrix_rank/matrix_rank_array.rst", "functional/ivy/linalg/matrix_rank/matrix_rank_container.rst", "functional/ivy/linalg/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linalg/matrix_rank/static_matrix_rank_container.rst", "functional/ivy/linalg/matrix_transpose.rst", "functional/ivy/linalg/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linalg/matrix_transpose/matrix_transpose_container.rst", "functional/ivy/linalg/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linalg/matrix_transpose/static_matrix_transpose_container.rst", "functional/ivy/linalg/outer.rst", "functional/ivy/linalg/outer/outer_array.rst", "functional/ivy/linalg/outer/outer_container.rst", "functional/ivy/linalg/outer/outer_functional.rst", "functional/ivy/linalg/outer/static_outer_container.rst", "functional/ivy/linalg/pinv.rst", "functional/ivy/linalg/pinv/pinv_array.rst", "functional/ivy/linalg/pinv/pinv_container.rst", "functional/ivy/linalg/pinv/pinv_functional.rst", "functional/ivy/linalg/pinv/static_pinv_container.rst", "functional/ivy/linalg/qr.rst", "functional/ivy/linalg/qr/qr_array.rst", "functional/ivy/linalg/qr/qr_container.rst", "functional/ivy/linalg/qr/qr_functional.rst", "functional/ivy/linalg/qr/static_qr_container.rst", "functional/ivy/linalg/slogdet.rst", "functional/ivy/linalg/slogdet/slogdet_array.rst", "functional/ivy/linalg/slogdet/slogdet_container.rst", "functional/ivy/linalg/slogdet/slogdet_functional.rst", "functional/ivy/linalg/slogdet/static_slogdet_container.rst", "functional/ivy/linalg/solve.rst", "functional/ivy/linalg/solve/solve_array.rst", "functional/ivy/linalg/solve/solve_container.rst", "functional/ivy/linalg/solve/solve_functional.rst", "functional/ivy/linalg/solve/static_solve_container.rst", "functional/ivy/linalg/svd.rst", "functional/ivy/linalg/svd/static_svd_container.rst", "functional/ivy/linalg/svd/svd_array.rst", "functional/ivy/linalg/svd/svd_container.rst", "functional/ivy/linalg/svd/svd_functional.rst", "functional/ivy/linalg/svdvals.rst", "functional/ivy/linalg/svdvals/static_svdvals_container.rst", "functional/ivy/linalg/svdvals/svdvals_array.rst", "functional/ivy/linalg/svdvals/svdvals_container.rst", "functional/ivy/linalg/svdvals/svdvals_functional.rst", "functional/ivy/linalg/tensordot.rst", "functional/ivy/linalg/tensordot/static_tensordot_container.rst", "functional/ivy/linalg/tensordot/tensordot_array.rst", "functional/ivy/linalg/tensordot/tensordot_container.rst", "functional/ivy/linalg/tensordot/tensordot_functional.rst", "functional/ivy/linalg/trace.rst", "functional/ivy/linalg/trace/static_trace_container.rst", "functional/ivy/linalg/trace/trace_array.rst", "functional/ivy/linalg/trace/trace_container.rst", "functional/ivy/linalg/trace/trace_functional.rst", "functional/ivy/linalg/vander.rst", "functional/ivy/linalg/vander/static_vander_container.rst", "functional/ivy/linalg/vander/vander_array.rst", "functional/ivy/linalg/vander/vander_container.rst", "functional/ivy/linalg/vander/vander_functional.rst", "functional/ivy/linalg/vecdot.rst", "functional/ivy/linalg/vecdot/static_vecdot_container.rst", "functional/ivy/linalg/vecdot/vecdot_array.rst", "functional/ivy/linalg/vecdot/vecdot_container.rst", "functional/ivy/linalg/vecdot/vecdot_functional.rst", "functional/ivy/linalg/vector_norm.rst", "functional/ivy/linalg/vector_norm/static_vector_norm_container.rst", "functional/ivy/linalg/vector_norm/vector_norm_array.rst", "functional/ivy/linalg/vector_norm/vector_norm_container.rst", "functional/ivy/linalg/vector_norm/vector_norm_functional.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/static_vector_to_skew_symmetric_matrix_container.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_container.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/concat/static_concat_container.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/constant_pad/static_constant_pad_container.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/expand_dims/static_expand_dims_container.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/flip/static_flip_container.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/permute_dims/static_permute_dims_container.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/repeat/static_repeat_container.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/reshape/static_reshape_container.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/split/split_array.rst", "functional/ivy/manipulation/split/split_container.rst", "functional/ivy/manipulation/split/split_functional.rst", "functional/ivy/manipulation/split/static_split_container.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/squeeze/static_squeeze_container.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/stack/static_stack_container.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/static_swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/static_tile_container.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/unstack.rst", "functional/ivy/manipulation/unstack/static_unstack_container.rst", "functional/ivy/manipulation/unstack/unstack_array.rst", "functional/ivy/manipulation/unstack/unstack_container.rst", "functional/ivy/manipulation/unstack/unstack_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/static_zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_argwhere.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/multinomial/multinomial_array.rst", "functional/ivy/random/multinomial/multinomial_container.rst", "functional/ivy/random/multinomial/multinomial_functional.rst", "functional/ivy/random/multinomial/static_multinomial_container.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_array.rst", "functional/ivy/random/randint/randint_container.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_normal/random_normal_array.rst", "functional/ivy/random/random_normal/random_normal_container.rst", "functional/ivy/random/random_normal/random_normal_functional.rst", "functional/ivy/random/random_normal/static_random_normal_container.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_array.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/random/shuffle/shuffle_array.rst", "functional/ivy/random/shuffle/shuffle_container.rst", "functional/ivy/random/shuffle/shuffle_functional.rst", "functional/ivy/random/shuffle/static_shuffle_container.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmax/argmax_array.rst", "functional/ivy/searching/argmax/argmax_container.rst", "functional/ivy/searching/argmax/argmax_functional.rst", "functional/ivy/searching/argmax/static_argmax_container.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/argmin/argmin_array.rst", "functional/ivy/searching/argmin/argmin_container.rst", "functional/ivy/searching/argmin/argmin_functional.rst", "functional/ivy/searching/argmin/static_argmin_container.rst", "functional/ivy/searching/argwhere.rst", "functional/ivy/searching/argwhere/argwhere_array.rst", "functional/ivy/searching/argwhere/argwhere_container.rst", "functional/ivy/searching/argwhere/argwhere_functional.rst", "functional/ivy/searching/argwhere/static_argwhere_container.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/nonzero/nonzero_array.rst", "functional/ivy/searching/nonzero/nonzero_container.rst", "functional/ivy/searching/nonzero/nonzero_functional.rst", "functional/ivy/searching/nonzero/static_nonzero_container.rst", "functional/ivy/searching/where.rst", "functional/ivy/searching/where/static_where_container.rst", "functional/ivy/searching/where/where_array.rst", "functional/ivy/searching/where/where_container.rst", "functional/ivy/searching/where/where_functional.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_all/static_unique_all_container.rst", "functional/ivy/set/unique_all/unique_all_array.rst", "functional/ivy/set/unique_all/unique_all_container.rst", "functional/ivy/set/unique_all/unique_all_functional.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_inverse/static_unique_inverse_container.rst", "functional/ivy/set/unique_inverse/unique_inverse_array.rst", "functional/ivy/set/unique_inverse/unique_inverse_container.rst", "functional/ivy/set/unique_inverse/unique_inverse_functional.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/set/unique_values/static_unique_values_container.rst", "functional/ivy/set/unique_values/unique_values_array.rst", "functional/ivy/set/unique_values/unique_values_container.rst", "functional/ivy/set/unique_values/unique_values_functional.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/searchsorted.rst", "functional/ivy/sorting/searchsorted/searchsorted_array.rst", "functional/ivy/sorting/searchsorted/searchsorted_container.rst", "functional/ivy/sorting/searchsorted/searchsorted_functional.rst", "functional/ivy/sorting/searchsorted/static_searchsorted_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/cumprod.rst", "functional/ivy/statistical/cumprod/cumprod_array.rst", "functional/ivy/statistical/cumprod/cumprod_container.rst", "functional/ivy/statistical/cumprod/cumprod_functional.rst", "functional/ivy/statistical/cumprod/static_cumprod_container.rst", "functional/ivy/statistical/cumsum.rst", "functional/ivy/statistical/cumsum/cumsum_array.rst", "functional/ivy/statistical/cumsum/cumsum_container.rst", "functional/ivy/statistical/cumsum/cumsum_functional.rst", "functional/ivy/statistical/cumsum/static_cumsum_container.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/static_sum_container.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/static_var_container.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "glossary.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "related_work.rst", "related_work/api_standards.rst", "related_work/compiler_infrastructure.rst", "related_work/exchange_formats.rst", "related_work/frameworks.rst", "related_work/graph_tracers.rst", "related_work/ml_unifying_companies.rst", "related_work/multi_vendor_compiler_frameworks.rst", "related_work/vendor_specific_apis.rst", "related_work/vendor_specific_compilers.rst", "related_work/what_does_ivy_add.rst", "related_work/wrapper_frameworks.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/Initializer.rst", "stateful/initializers/KaimingNormal.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/module/NewTorchModule.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["&lt;no title&gt;", "Assertions", "check_all", "check_all_or_any_fn", "check_any", "check_elem_in_list", "check_equal", "check_exists", "check_false", "check_fill_value_and_dtype_are_compatible", "check_gather_input_valid", "check_gather_nd_input_valid", "check_greater", "check_inplace_sizes_valid", "check_isinstance", "check_less", "check_one_way_broadcastable", "check_shape", "check_true", "Backend handler", "choose_random_backend", "clear_backend_stack", "current_backend", "fn_name_from_version_specific_fn_name", "get_backend", "set_backend", "set_backend_to_specific_version", "set_jax_backend", "set_numpy_backend", "set_tensorflow_backend", "set_torch_backend", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Data classes", "Array", "Activations", "ArrayWithActivations", "Array", "&lt;no title&gt;", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_ivy_array", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "Experimental", "Activations", "ArrayWithActivationsExperimental", "Array methods", "avg_pool3d array", "diagflat array", "dirichlet array", "exp2 array", "flatten array", "fliplr array", "flipud array", "float_power array", "fmax array", "fmod array", "gcd array", "heaviside array", "hstack array", "i0 array", "isclose array", "isneginf array", "isposinf array", "kron array", "lcm array", "logaddexp2 array", "max_pool1d array", "max_pool2d array", "max_pool3d array", "median array", "moveaxis array", "msort array", "nan_to_num array", "nansum array", "pad array", "rot90 array", "signbit array", "sinc array", "top_k array", "trapz array", "vstack array", "Conversions", "ArrayWithConversionsExperimental", "Creation", "ArrayWithCreationExperimental", "Data type", "ArrayWithData_typeExperimental", "Device", "ArrayWithDeviceExperimental", "Elementwise", "ArrayWithElementWiseExperimental", "General", "ArrayWithGeneralExperimental", "Gradients", "ArrayWithGradientsExperimental", "Image", "ArrayWithImageExperimental", "Layers", "ArrayWithLayersExperimental", "Linalg", "ArrayWithLinalgExperimental", "Losses", "ArrayWithLossesExperimental", "Manipulation", "ArrayWithManipulationExperimental", "Norms", "ArrayWithNormsExperimental", "Random", "ArrayWithRandomExperimental", "Searching", "ArrayWithSearchingExperimental", "Set", "ArrayWithSetExperimental", "Sorting", "ArrayWithSortingExperimental", "Statistical", "ArrayWithStatisticalExperimental", "Utility", "ArrayWithUtilityExperimental", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linalg", "ArrayWithLinalg", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Container", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "&lt;no title&gt;", "Conversions", "ContainerWithConversions", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "Experimental", "Activations", "ContainerWithActivationExperimental", "Container methods", "avg_pool2d container", "avg_pool3d container", "diagflat container", "dirichlet container", "exp2 container", "flatten container", "fliplr container", "flipud container", "float_power container", "fmax container", "fmod container", "gcd container", "hamming_window container", "hann_window container", "heaviside container", "hstack container", "i0 container", "isclose container", "isneginf container", "isposinf container", "kaiser_bessel_derived_window container", "kaiser_window container", "kron container", "lcm container", "logaddexp2 container", "max_pool1d container", "max_pool2d container", "max_pool3d container", "median container", "moveaxis container", "msort container", "nan_to_num container", "nansum container", "pad container", "rot90 container", "signbit container", "sinc container", "static_avg_pool2d container", "static_avg_pool3d container", "static_diagflat container", "static_dirichlet container", "static_exp2 container", "static_flatten container", "static_fliplr container", "static_flipud container", "static_float_power container", "static_fmax container", "static_fmod container", "static_gcd container", "static_hamming_window container", "static_hann_window container", "static_heaviside container", "static_hstack container", "static_i0 container", "static_isclose container", "static_isneginf container", "static_isposinf container", "static_kaiser_bessel_derived_window container", "static_kaiser_window container", "static_kron container", "static_lcm container", "static_logaddexp2 container", "static_max_pool1d container", "static_max_pool2d container", "static_max_pool3d container", "static_median container", "static_moveaxis container", "static_msort container", "static_nan_to_num container", "static_nansum container", "static_pad container", "static_rot90 container", "static_signbit container", "static_sinc container", "static_top_k container", "static_triu_indices container", "static_vstack container", "top_k container", "triu_indices container", "vstack container", "Conversions", "ContainerWithConversionExperimental", "Creation", "ContainerWithCreationExperimental", "Data type", "ContainerWithData_typeExperimental", "Device", "ContainerWithDeviceExperimental", "Elementwise", "ContainerWithElementWiseExperimental", "General", "ContainerWithGeneralExperimental", "Gradients", "ContainerWithGradientsExperimental", "Image", "ContainerWithImageExperimental", "Layers", "ContainerWithLayersExperimental", "Linalg", "ContainerWithLinalgExperimental", "Losses", "ContainerWithLossesExperimental", "Manipulation", "ContainerWithManipulationExperimental", "Norms", "ContainerWithNormsExperimental", "Random", "ContainerWithRandomExperimental", "Searching", "ContainerWithSearchingExperimental", "Set", "ContainerWithSetExperimental", "Sorting", "ContainerWithSortingExperimental", "Statistical", "ContainerWithStatisticalExperimental", "Utility", "ContainerWithUtilityExperimental", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linalg", "ContainerWithLinalg", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "from_zero_dim_arrays_to_float", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "integer_arrays_to_float", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "Experimental", "Activations", "Compilation", "Constants", "Creation", "hamming_window", "hann_window", "kaiser_bessel_derived_window", "kaiser_window", "triu_indices", "vorbis_window", "Data type", "Device", "Elementwise", "exp2", "float_power", "fmax", "fmod", "gcd", "isclose", "isneginf", "isposinf", "lcm", "logaddexp2", "nan_to_num", "nansum", "signbit", "sinc", "trapz", "General", "Gradients", "Layers", "avg_pool2d", "avg_pool3d", "max_pool1d", "max_pool2d", "max_pool3d", "Linalg", "diagflat", "kron", "Losses", "Manipulation", "flatten", "fliplr", "flipud", "heaviside", "hstack", "i0", "moveaxis", "ndenumerate", "ndindex", "pad", "rot90", "top_k", "vstack", "Meta", "Nest", "Norms", "Random", "beta", "dirichlet", "gamma", "Searching", "Set", "Sorting", "msort", "Sparse array", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "Statistical", "median", "Utility", "is_storage", "&lt;no title&gt;", "Activations", "deserialize", "gelu", "ivy.Array.gelu", "ivy.Container.gelu", "ivy.gelu", "ivy.Container.static_gelu", "get", "leaky_relu", "ivy.Array.leaky_relu", "ivy.Container.leaky_relu", "ivy.leaky_relu", "ivy.Container.static_leaky_relu", "log_softmax", "ivy.Array.log_softmax", "ivy.Container.log_softmax", "ivy.log_softmax", "ivy.Container.static_log_softmax", "relu", "ivy.Array.relu", "ivy.Container.relu", "ivy.relu", "ivy.Container.static_relu", "sigmoid", "ivy.Array.sigmoid", "ivy.Container.sigmoid", "ivy.sigmoid", "ivy.Container.static_sigmoid", "softmax", "ivy.Array.softmax", "ivy.Container.softmax", "ivy.softmax", "ivy.Container.static_softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "Compilation", "compile", "Constants", "Creation", "NestedSequence", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.asarray", "ivy.Container.static_asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_to_native_arrays_and_back", "copy_array", "ivy.Array.copy_array", "ivy.copy_array", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "one_hot", "ivy.Array.one_hot", "ivy.Container.one_hot", "ivy.one_hot", "ivy.Container.static_one_hot", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "as_ivy_dtype", "as_native_dtype", "astype", "ivy.Array.astype", "ivy.Container.astype", "ivy.astype", "ivy.Container.static_astype", "broadcast_arrays", "ivy.Array.broadcast_arrays", "ivy.Container.broadcast_arrays", "ivy.broadcast_arrays", "ivy.Container.static_broadcast_arrays", "broadcast_to", "ivy.Array.broadcast_to", "ivy.Container.broadcast_to", "ivy.broadcast_to", "ivy.Container.static_broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "check_float", "closest_valid_dtype", "default_dtype", "default_float_dtype", "ivy.default_float_dtype", "ivy.Container.static_default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "ivy.Container.dtype", "ivy.dtype", "ivy.Container.static_dtype", "dtype_bits", "finfo", "ivy.Array.finfo", "ivy.Container.finfo", "ivy.finfo", "ivy.Container.static_finfo", "function_supported_dtypes", "ivy.function_supported_dtypes", "ivy.Container.static_function_supported_dtypes", "function_unsupported_dtypes", "ivy.function_unsupported_dtypes", "ivy.Container.static_function_unsupported_dtypes", "iinfo", "ivy.Array.iinfo", "ivy.Container.iinfo", "ivy.iinfo", "ivy.Container.static_iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "ivy.Array.is_bool_dtype", "ivy.Container.is_bool_dtype", "ivy.is_bool_dtype", "ivy.Container.static_is_bool_dtype", "is_float_dtype", "ivy.Array.is_float_dtype", "ivy.Container.is_float_dtype", "ivy.is_float_dtype", "ivy.Container.static_is_float_dtype", "is_int_dtype", "ivy.Array.is_int_dtype", "ivy.Container.is_int_dtype", "ivy.is_int_dtype", "ivy.Container.static_is_int_dtype", "is_uint_dtype", "ivy.Array.is_uint_dtype", "ivy.Container.is_uint_dtype", "ivy.is_uint_dtype", "ivy.Container.static_is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "ivy.Array.result_type", "ivy.Container.result_type", "ivy.result_type", "ivy.Container.static_result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "Device", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "ivy.Array.dev", "ivy.Container.dev", "ivy.dev", "ivy.Container.static_dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "ivy.Container.static_to_device", "ivy.Array.to_device", "ivy.Container.to_device", "ivy.to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "ivy.Container.static_acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "ivy.Container.static_acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "ivy.Container.static_asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "ivy.Container.static_asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "ivy.Container.static_atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "ivy.Container.static_atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "ivy.Container.static_atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "ivy.Container.static_bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "ivy.Container.static_bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "ivy.Container.static_bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "ivy.Container.static_bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "ivy.Container.static_bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ivy.Container.static_bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "ivy.Container.static_ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "ivy.Container.static_cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "ivy.Container.static_cosh", "deg2rad", "ivy.Array.deg2rad", "ivy.Container.deg2rad", "ivy.deg2rad", "ivy.Container.static_deg2rad", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "ivy.Container.static_equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "ivy.Container.static_erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "ivy.Container.static_exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "ivy.Container.static_expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "ivy.Container.static_floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "ivy.Container.static_floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "ivy.Container.static_greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "ivy.Container.static_greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "ivy.Container.static_isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "ivy.Container.static_isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "ivy.Container.static_isnan", "isreal", "ivy.Array.isreal", "ivy.Container.isreal", "ivy.isreal", "ivy.Container.static_isreal", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "ivy.Container.static_less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "ivy.Container.static_less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "ivy.Container.static_log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "ivy.Container.static_log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "ivy.Container.static_log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "ivy.Container.static_log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "ivy.Container.static_logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "ivy.Container.static_logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "ivy.Container.static_logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "ivy.Container.static_logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "ivy.Container.static_logical_xor", "maximum", "ivy.Array.maximum", "ivy.Container.maximum", "ivy.maximum", "ivy.Container.static_maximum", "minimum", "ivy.Array.minimum", "ivy.Container.minimum", "ivy.minimum", "ivy.Container.static_minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "ivy.Container.static_negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "ivy.Container.static_not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "ivy.Container.static_positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "ivy.Container.static_pow", "rad2deg", "ivy.Array.rad2deg", "ivy.Container.rad2deg", "ivy.rad2deg", "ivy.Container.static_rad2deg", "reciprocal", "ivy.Array.reciprocal", "ivy.Container.reciprocal", "ivy.reciprocal", "ivy.Container.static_reciprocal", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "ivy.Container.static_remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "ivy.Container.static_round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "ivy.Container.static_sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "ivy.Container.static_sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "ivy.Container.static_sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "ivy.Container.static_sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "ivy.Container.static_square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Container.static_trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "trunc_divide", "ivy.Container.static_trunc_divide", "ivy.Array.trunc_divide", "ivy.Container.trunc_divide", "ivy.trunc_divide", "&lt;no title&gt;", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "ivy.Array.array_equal", "ivy.array_equal", "assert_supports_inplace", "ivy.Array.assert_supports_inplace", "ivy.Container.assert_supports_inplace", "ivy.assert_supports_inplace", "ivy.Container.static_assert_supports_inplace", "cache_fn", "clip_matrix_norm", "ivy.Array.clip_matrix_norm", "ivy.Container.clip_matrix_norm", "ivy.clip_matrix_norm", "ivy.Container.static_clip_matrix_norm", "clip_vector_norm", "ivy.Array.clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "ivy.Container.static_clip_vector_norm", "container_types", "current_backend_str", "default", "ivy.Array.default", "ivy.default", "einops_rearrange", "ivy.Array.einops_rearrange", "ivy.Container.einops_rearrange", "ivy.einops_rearrange", "ivy.Container.static_einops_rearrange", "einops_reduce", "ivy.Array.einops_reduce", "ivy.Container.einops_reduce", "ivy.einops_reduce", "ivy.Container.static_einops_reduce", "einops_repeat", "ivy.Array.einops_repeat", "ivy.Container.einops_repeat", "ivy.einops_repeat", "ivy.Container.static_einops_repeat", "exists", "ivy.Array.exists", "ivy.exists", "fourier_encode", "ivy.Array.fourier_encode", "ivy.Container.fourier_encode", "ivy.fourier_encode", "ivy.Container.static_fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "ivy.Array.gather", "ivy.Container.gather", "ivy.gather", "ivy.Container.static_gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_array_mode", "get_exception_trace_mode", "get_item", "get_min_base", "get_min_denominator", "get_nestable_mode", "get_num_dims", "ivy.Array.get_num_dims", "ivy.Container.get_num_dims", "ivy.get_num_dims", "ivy.Container.static_get_num_dims", "get_queue_timeout", "get_referrers_recursive", "get_tmp_dir", "has_nans", "ivy.Array.has_nans", "ivy.Container.has_nans", "ivy.has_nans", "ivy.Container.static_has_nans", "inplace_arrays_supported", "inplace_decrement", "ivy.Array.inplace_decrement", "ivy.Container.inplace_decrement", "ivy.inplace_decrement", "ivy.Container.static_inplace_decrement", "inplace_increment", "ivy.Array.inplace_increment", "ivy.Container.inplace_increment", "ivy.inplace_increment", "ivy.Container.static_inplace_increment", "inplace_update", "ivy.Array.inplace_update", "ivy.Container.inplace_update", "ivy.inplace_update", "ivy.Container.static_inplace_update", "inplace_variables_supported", "is_array", "ivy.Array.is_array", "ivy.Container.is_array", "ivy.is_array", "ivy.Container.static_is_array", "is_frontend_array", "is_ivy_array", "ivy.Array.is_ivy_array", "ivy.Container.is_ivy_array", "ivy.is_ivy_array", "ivy.Container.static_is_ivy_array", "is_ivy_container", "ivy.Array.is_ivy_container", "ivy.Container.is_ivy_container", "ivy.is_ivy_container", "ivy.Container.static_is_ivy_container", "is_native_array", "ivy.Array.is_native_array", "ivy.Container.is_native_array", "ivy.is_native_array", "ivy.Container.static_is_native_array", "isscalar", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "ivy.Array.scatter_flat", "ivy.Container.scatter_flat", "ivy.scatter_flat", "ivy.Container.static_scatter_flat", "scatter_nd", "ivy.Array.scatter_nd", "ivy.Container.scatter_nd", "ivy.scatter_nd", "ivy.Container.static_scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_queue_timeout", "set_shape_array_mode", "set_tmp_dir", "shape", "shape_array_mode", "stable_divide", "ivy.Array.stable_divide", "ivy.Container.stable_divide", "ivy.stable_divide", "ivy.Container.static_stable_divide", "stable_pow", "ivy.Array.stable_pow", "ivy.Container.stable_pow", "ivy.stable_pow", "ivy.Container.static_stable_pow", "supports_inplace_updates", "ivy.Container.static_supports_inplace_updates", "ivy.Array.supports_inplace_updates", "ivy.Container.supports_inplace_updates", "ivy.supports_inplace_updates", "to_ivy_shape", "to_list", "ivy.Container.static_to_list", "ivy.Array.to_list", "ivy.Container.to_list", "ivy.to_list", "to_native_shape", "to_numpy", "ivy.Container.static_to_numpy", "ivy.Array.to_numpy", "ivy.Container.to_numpy", "ivy.to_numpy", "to_scalar", "ivy.Container.static_to_scalar", "ivy.Array.to_scalar", "ivy.Container.to_scalar", "ivy.to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_nestable_mode", "unset_queue_timeout", "unset_shape_array_mode", "value_is_nan", "ivy.Container.static_value_is_nan", "ivy.Array.value_is_nan", "ivy.Container.value_is_nan", "ivy.value_is_nan", "vmap", "Gradients", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "adam_update", "ivy.Array.adam_update", "ivy.Container.adam_update", "ivy.adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "ivy.Array.gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "is_variable", "ivy.Array.is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "jac", "lamb_update", "ivy.Array.lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "lars_update", "ivy.Array.lars_update", "ivy.Container.lars_update", "ivy.lars_update", "optimizer_update", "ivy.Array.optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "set_with_grads", "stop_gradient", "ivy.Container.static_stop_gradient", "ivy.Array.stop_gradient", "ivy.Container.stop_gradient", "ivy.stop_gradient", "unset_with_grads", "value_and_grad", "variable", "ivy.Container.static_variable", "ivy.Array.variable", "ivy.Container.variable", "ivy.variable", "variable_data", "ivy.Container.static_variable_data", "ivy.Array.variable_data", "ivy.Container.variable_data", "ivy.variable_data", "with_grads", "Layers", "conv", "conv1d", "ivy.Array.conv1d", "ivy.Container.conv1d", "ivy.conv1d", "ivy.Container.static_conv1d", "conv1d_transpose", "ivy.Array.conv1d_transpose", "ivy.Container.conv1d_transpose", "ivy.conv1d_transpose", "ivy.Container.static_conv1d_transpose", "conv2d", "ivy.Array.conv2d", "ivy.Container.conv2d", "ivy.conv2d", "ivy.Container.static_conv2d", "conv2d_transpose", "ivy.Container.conv2d_transpose", "ivy.conv2d_transpose", "ivy.Container.static_conv2d_transpose", "conv3d", "ivy.Array.conv3d", "ivy.Container.conv3d", "ivy.conv3d", "ivy.Container.static_conv3d", "conv3d_transpose", "ivy.Array.conv3d_transpose", "ivy.Container.conv3d_transpose", "ivy.conv3d_transpose", "ivy.Container.static_conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "deconv_length", "depthwise_conv2d", "ivy.Array.depthwise_conv2d", "ivy.Container.depthwise_conv2d", "ivy.depthwise_conv2d", "ivy.Container.static_depthwise_conv2d", "dropout", "ivy.Array.dropout", "ivy.Container.dropout", "ivy.dropout", "ivy.Container.static_dropout", "get_x_data_format", "handle_padding", "linear", "ivy.Array.linear", "ivy.Container.linear", "ivy.linear", "ivy.Container.static_linear", "lstm_update", "ivy.Array.lstm_update", "ivy.Container.lstm_update", "ivy.lstm_update", "ivy.Container.static_lstm_update", "multi_head_attention", "ivy.Array.multi_head_attention", "ivy.Container.multi_head_attention", "ivy.multi_head_attention", "ivy.Container.static_multi_head_attention", "scaled_dot_product_attention", "ivy.Array.scaled_dot_product_attention", "ivy.Container.scaled_dot_product_attention", "ivy.scaled_dot_product_attention", "ivy.Container.static_scaled_dot_product_attention", "Linalg", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.Container.cross", "ivy.cross", "ivy.Container.static_cross", "det", "ivy.Array.det", "ivy.Container.det", "ivy.det", "ivy.Container.static_det", "diag", "ivy.Array.diag", "ivy.Container.diag", "ivy.diag", "ivy.Container.static_diag", "diagonal", "ivy.Array.diagonal", "ivy.Container.diagonal", "ivy.diagonal", "ivy.Container.static_diagonal", "eigh", "ivy.Array.eigh", "ivy.Container.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inner", "ivy.Array.inner", "ivy.Container.inner", "ivy.inner", "ivy.Container.static_inner", "inv", "ivy.Array.inv", "ivy.Container.inv", "ivy.inv", "ivy.Container.static_inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "ivy.Container.static_matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.Container.matrix_norm", "ivy.matrix_norm", "ivy.Container.static_matrix_norm", "matrix_power", "ivy.Container.matrix_power", "ivy.matrix_power", "ivy.Container.static_matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.Container.matrix_rank", "ivy.matrix_rank", "ivy.Container.static_matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.Container.matrix_transpose", "ivy.matrix_transpose", "ivy.Container.static_matrix_transpose", "outer", "ivy.Array.outer", "ivy.Container.outer", "ivy.outer", "ivy.Container.static_outer", "pinv", "ivy.Array.pinv", "ivy.Container.pinv", "ivy.pinv", "ivy.Container.static_pinv", "qr", "ivy.Array.qr", "ivy.Container.qr", "ivy.qr", "ivy.Container.static_qr", "slogdet", "ivy.Array.slogdet", "ivy.Container.slogdet", "ivy.slogdet", "ivy.Container.static_slogdet", "solve", "ivy.Array.solve", "ivy.Container.solve", "ivy.solve", "ivy.Container.static_solve", "svd", "ivy.Container.static_svd", "ivy.Array.svd", "ivy.Container.svd", "ivy.svd", "svdvals", "ivy.Container.static_svdvals", "ivy.Array.svdvals", "ivy.Container.svdvals", "ivy.svdvals", "tensordot", "ivy.Container.static_tensordot", "ivy.Array.tensordot", "ivy.Container.tensordot", "ivy.tensordot", "trace", "ivy.Container.static_trace", "ivy.Array.trace", "ivy.Container.trace", "ivy.trace", "vander", "ivy.Container.static_vander", "ivy.Array.vander", "ivy.Container.vander", "ivy.vander", "vecdot", "ivy.Container.static_vecdot", "ivy.Array.vecdot", "ivy.Container.vecdot", "ivy.vecdot", "vector_norm", "ivy.Container.static_vector_norm", "ivy.Array.vector_norm", "ivy.Container.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Container.static_vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.Container.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "&lt;no title&gt;", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "ivy.Container.static_concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "ivy.Container.static_constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "ivy.Container.static_expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "ivy.Container.static_flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "ivy.Container.static_permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "ivy.Container.static_repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "ivy.Container.static_reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "ivy.Array.split", "ivy.Container.split", "ivy.split", "ivy.Container.static_split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "ivy.Container.static_squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "ivy.Container.static_stack", "swapaxes", "ivy.Container.static_swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Container.static_tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "unstack", "ivy.Container.static_unstack", "ivy.Array.unstack", "ivy.Container.unstack", "ivy.unstack", "zero_pad", "ivy.Container.static_zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "ivy.Array.multinomial", "ivy.Container.multinomial", "ivy.multinomial", "ivy.Container.static_multinomial", "randint", "ivy.Array.randint", "ivy.Container.randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "ivy.Array.random_normal", "ivy.Container.random_normal", "ivy.random_normal", "ivy.Container.static_random_normal", "random_uniform", "ivy.Array.random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "ivy.Array.shuffle", "ivy.Container.shuffle", "ivy.shuffle", "ivy.Container.static_shuffle", "Searching", "argmax", "ivy.Array.argmax", "ivy.Container.argmax", "ivy.argmax", "ivy.Container.static_argmax", "argmin", "ivy.Array.argmin", "ivy.Container.argmin", "ivy.argmin", "ivy.Container.static_argmin", "argwhere", "ivy.Array.argwhere", "ivy.Container.argwhere", "ivy.argwhere", "ivy.Container.static_argwhere", "nonzero", "ivy.Array.nonzero", "ivy.Container.nonzero", "ivy.nonzero", "ivy.Container.static_nonzero", "where", "ivy.Container.static_where", "ivy.Array.where", "ivy.Container.where", "ivy.where", "Set", "unique_all", "ivy.Container.static_unique_all", "ivy.Array.unique_all", "ivy.Container.unique_all", "ivy.unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "ivy.Container.static_unique_inverse", "ivy.Array.unique_inverse", "ivy.Container.unique_inverse", "ivy.unique_inverse", "unique_values", "ivy.Container.static_unique_values", "ivy.Array.unique_values", "ivy.Container.unique_values", "ivy.unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "searchsorted", "ivy.Array.searchsorted", "ivy.Container.searchsorted", "ivy.searchsorted", "ivy.Container.static_searchsorted", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "cumprod", "ivy.Array.cumprod", "ivy.Container.cumprod", "ivy.cumprod", "ivy.Container.static_cumprod", "cumsum", "ivy.Array.cumsum", "ivy.Container.cumsum", "ivy.cumsum", "ivy.Container.static_cumsum", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Container.static_sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Container.static_var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Glossary", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "Constant", "FirstLayerSiren", "GlorotUniform", "Initializer", "KaimingNormal", "Ones", "Siren", "Uniform", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "NewTorchModule", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"version": [0, 19, 23, 26, 33, 34, 35, 41, 42, 136, 137, 305, 306, 345, 348, 356, 361, 379, 461, 462, 1752, 1768, 1769], "ivi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 348, 350, 351, 352, 353, 354, 359, 360, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 1751, 1752, 1758, 1769, 1812, 1813], "check_al": 1, "result": [1, 2, 4, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 340, 341, 343, 344, 345, 347, 348, 351, 353, 354, 355, 356, 357, 358, 361, 364, 378, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 437, 438, 441, 442, 443, 448, 449, 450, 451, 454, 455, 461, 462, 1752, 1763, 1765], "messag": [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 15, 17, 18, 34, 42, 344, 347, 349, 350, 355, 361, 363, 1812, 1813], "one": [1, 2, 19, 24, 26, 34, 35, 40, 41, 42, 55, 56, 110, 111, 136, 137, 140, 141, 148, 149, 152, 153, 158, 159, 160, 161, 173, 174, 179, 180, 185, 186, 273, 274, 279, 280, 293, 294, 305, 306, 309, 310, 311, 312, 317, 318, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 340, 341, 342, 343, 345, 347, 350, 351, 352, 353, 354, 355, 357, 359, 360, 363, 364, 366, 378, 403, 406, 409, 415, 431, 432, 461, 462, 1752, 1762, 1763, 1765, 1768], "arg": [1, 2, 3, 4, 19, 22, 38, 49, 50, 51, 173, 174, 349, 355, 361, 365], "i": [1, 2, 19, 22, 23, 24, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 124, 125, 128, 129, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 287, 288, 293, 294, 297, 298, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 377, 378, 394, 396, 399, 403, 404, 405, 406, 409, 410, 411, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 435, 438, 441, 442, 443, 448, 449, 450, 451, 461, 462, 1751, 1752, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769], "fals": [1, 2, 4, 6, 7, 8, 12, 15, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 124, 125, 136, 137, 140, 141, 142, 143, 148, 149, 152, 153, 158, 159, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 342, 345, 347, 349, 354, 355, 356, 357, 361, 364, 365, 366, 394, 395, 396, 397, 398, 403, 409, 410, 411, 414, 415, 416, 431, 443, 456, 461, 462], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 355, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 1752, 1761, 1762, 1763, 1764, 1765, 1812, 1813], "check_all_or_any_fn": 1, "fn": [1, 3, 181, 182, 349, 355, 361, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389], "type": [1, 3, 19, 25, 31, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 350, 351, 353, 354, 356, 357, 358, 359, 361, 363, 364, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 454, 455, 461, 462, 1752, 1762, 1763, 1766], "all": [1, 3, 4, 33, 34, 35, 36, 37, 38, 40, 41, 42, 49, 50, 51, 52, 53, 54, 55, 56, 140, 141, 148, 149, 152, 153, 156, 157, 166, 167, 168, 169, 173, 174, 177, 178, 185, 186, 309, 310, 317, 318, 321, 322, 325, 326, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 377, 378, 379, 389, 394, 399, 403, 404, 431, 441, 1751, 1752, 1758, 1759, 1760, 1761, 1762, 1763, 1765, 1768, 1769], "limit": [1, 3, 42, 170, 173, 174, 175, 176, 347, 349, 350, 355, 357, 359, 364, 378, 1761, 1762, 1763], "0": [1, 3, 19, 22, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 342, 343, 345, 347, 348, 349, 355, 356, 357, 358, 361, 363, 364, 365, 366, 378, 394, 395, 396, 397, 398, 399, 400, 403, 406, 407, 409, 414, 415, 417, 418, 421, 424, 427, 428, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 448, 449, 450, 451, 461, 462, 1752], "must": [1, 3, 8, 18, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 345, 346, 347, 348, 349, 351, 352, 355, 358, 359, 361, 365, 366, 394, 396, 403, 405, 417, 421, 423, 426, 427, 428, 429, 431, 433, 438, 441, 442, 443, 448, 449, 451, 1763, 1769], "exist": [1, 3, 33, 34, 38, 40, 41, 140, 141, 152, 153, 173, 174, 321, 322, 340, 342, 347, 348, 352, 353, 354, 355, 357, 359, 361, 378, 1751, 1760, 1762, 1765, 1768], "accord": [1, 3, 38, 40, 41, 57, 58, 140, 141, 164, 165, 181, 182, 333, 334, 340, 345, 352, 355, 357, 431, 441], "given": [1, 3, 34, 35, 38, 40, 41, 42, 44, 118, 119, 128, 129, 140, 141, 150, 151, 152, 153, 156, 157, 170, 173, 174, 309, 310, 311, 312, 319, 320, 321, 322, 325, 326, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 365, 377, 403, 409, 415, 418, 421, 422, 423, 424, 425, 426, 431, 436, 443, 444, 448, 449, 450, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1759, 1764, 1765, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "check_ani": 1, "ar": [1, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 61, 62, 110, 111, 124, 125, 128, 129, 136, 137, 140, 141, 148, 149, 152, 153, 156, 157, 158, 159, 170, 173, 174, 175, 176, 179, 180, 185, 186, 279, 280, 305, 306, 309, 310, 317, 318, 321, 322, 325, 326, 327, 328, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 377, 378, 379, 389, 394, 399, 403, 405, 409, 415, 418, 431, 432, 433, 434, 435, 441, 448, 449, 450, 461, 462, 1751, 1752, 1758, 1759, 1760, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769], "check_elem_in_list": [1, 355], "elem": [1, 5], "list": [1, 5, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 110, 111, 118, 119, 140, 141, 146, 147, 152, 153, 154, 155, 168, 169, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 287, 288, 293, 294, 303, 304, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 343, 345, 346, 347, 350, 351, 355, 356, 357, 358, 361, 364, 365, 366, 378, 403, 404, 405, 408, 410, 411, 413, 416, 421, 422, 423, 424, 425, 426, 454, 455, 1752, 1762, 1763, 1768], "check_equ": [1, 355], "x1": [1, 6, 12, 15, 16, 17, 44, 47, 48, 57, 58, 61, 62, 110, 111, 124, 125, 148, 149, 158, 159, 181, 182, 185, 186, 279, 280, 293, 294, 309, 310, 317, 318, 327, 328, 331, 332, 340, 345, 347, 349, 351, 355, 403, 405, 406, 407, 408, 412, 413, 431, 435], "x2": [1, 6, 12, 15, 16, 17, 57, 58, 61, 62, 110, 111, 124, 125, 140, 141, 148, 149, 158, 159, 181, 182, 185, 186, 279, 280, 293, 294, 309, 310, 317, 318, 327, 328, 340, 345, 347, 349, 351, 355, 403, 405, 406, 407, 408, 412, 413, 431, 435], "invers": [1, 6, 7, 61, 62, 185, 186, 317, 318, 345, 377], "check_exist": 1, "x": [1, 7, 14, 19, 22, 31, 38, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 342, 343, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 394, 399, 403, 404, 410, 411, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 436, 437, 438, 439, 441, 443, 444, 456, 457, 458, 460, 1752], "check_fals": 1, "express": [1, 8, 18, 61, 62, 110, 111, 185, 186, 279, 280, 348, 350, 355, 361, 366, 403, 417, 1762, 1763], "check_fill_value_and_dtype_are_compat": 1, "fill_valu": [1, 9, 55, 56, 158, 159, 179, 180, 327, 328, 345, 356, 358], "dtype": [1, 9, 44, 47, 48, 55, 56, 57, 58, 110, 111, 128, 129, 146, 147, 148, 149, 156, 157, 158, 159, 164, 165, 179, 180, 181, 182, 273, 274, 279, 280, 297, 298, 309, 310, 315, 316, 317, 318, 325, 326, 327, 328, 333, 334, 340, 342, 345, 346, 347, 350, 352, 353, 355, 356, 357, 358, 361, 363, 394, 395, 396, 397, 398, 400, 403, 415, 448, 449, 450, 451, 1752], "check_gather_input_valid": 1, "param": [1, 10, 11, 170, 173, 174, 175, 176, 309, 310, 366], "indic": [1, 10, 11, 38, 55, 56, 118, 119, 124, 125, 140, 141, 146, 147, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 173, 174, 179, 180, 181, 182, 287, 288, 293, 294, 309, 310, 315, 316, 317, 318, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 344, 350, 351, 366, 394, 399, 421, 422, 423, 424, 425, 426, 431, 443, 1752], "axi": [1, 10, 45, 46, 55, 56, 110, 111, 124, 125, 136, 137, 140, 141, 148, 149, 150, 151, 152, 153, 158, 159, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 179, 180, 185, 186, 279, 280, 293, 294, 305, 306, 309, 310, 317, 318, 319, 320, 321, 322, 327, 328, 331, 332, 333, 334, 335, 336, 343, 345, 347, 349, 351, 352, 354, 355, 357, 359, 361, 363, 366, 377, 403, 415, 418, 431, 433, 434, 441, 442, 443, 454, 455, 461, 462], "batch_dim": [1, 10, 11, 140, 141, 309, 310], "check_gather_nd_input_valid": 1, "check_great": 1, "allow_equ": [1, 12, 15, 349], "check_inplace_sizes_valid": 1, "var": [1, 13, 164, 165, 333, 334, 337, 338, 347, 361], "data": [1, 13, 32, 34, 41, 44, 47, 48, 55, 56, 58, 61, 62, 110, 111, 128, 129, 140, 141, 142, 143, 148, 149, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 175, 176, 179, 180, 182, 185, 186, 273, 274, 279, 280, 297, 298, 309, 310, 311, 312, 317, 318, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 343, 346, 348, 351, 352, 353, 354, 356, 358, 359, 361, 363, 394, 395, 396, 397, 398, 400, 403, 417, 427, 428, 431, 432, 448, 449, 450, 451, 456, 459, 1751, 1752, 1762, 1763, 1764, 1766, 1767, 1768], "check_isinst": 1, "allowed_typ": [1, 14], "check_less": [1, 349], "check_one_way_broadcast": 1, "check_shap": [1, 173, 174], "check_tru": 1, "true": [1, 18, 44, 45, 46, 47, 48, 57, 58, 59, 60, 61, 62, 110, 111, 124, 125, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 343, 345, 347, 349, 350, 351, 352, 354, 355, 356, 357, 359, 361, 364, 365, 366, 394, 395, 396, 397, 398, 403, 409, 410, 411, 414, 415, 416, 431, 443, 461, 462], "assert": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 173, 174, 339, 340, 350, 355, 357, 358, 363, 364], "support": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 41, 46, 48, 50, 51, 52, 53, 54, 56, 58, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 140, 141, 142, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 172, 174, 176, 178, 180, 182, 183, 184, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 309, 310, 311, 312, 314, 316, 317, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 341, 343, 346, 347, 348, 351, 352, 353, 354, 356, 357, 359, 360, 361, 363, 364, 366, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 395, 396, 397, 398, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 449, 450, 451, 455, 457, 458, 459, 460, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1579, 1580, 1581, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1601, 1602, 1603, 1604, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1756, 1757, 1759, 1761, 1762, 1765, 1767, 1768, 1769, 1772, 1773, 1775, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1799, 1800, 1802, 1804, 1805, 1806, 1807, 1808, 1810, 1811, 1813], "framework": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 140, 141, 142, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 172, 174, 176, 178, 180, 182, 184, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 311, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 339, 340, 341, 342, 345, 346, 347, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 366, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 395, 396, 397, 398, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 449, 450, 451, 455, 457, 458, 459, 460, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1579, 1580, 1581, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1601, 1602, 1603, 1604, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1756, 1757, 1758, 1759, 1760, 1761, 1763, 1766, 1772, 1773, 1775, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1799, 1800, 1802, 1804, 1805, 1806, 1807, 1808, 1810, 1811, 1813], "class": [19, 25, 31, 38, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 345, 346, 347, 348, 351, 356, 357, 359, 361, 362, 364, 365, 366, 376, 377, 378, 456, 1751, 1752, 1760, 1762, 1763, 1769], "backend_handl": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 342, 361, 1752], "contextmanag": 19, "modul": [19, 22, 24, 26, 35, 38, 41, 168, 169, 170, 173, 174, 175, 176, 337, 338, 341, 342, 350, 352, 354, 355, 357, 361, 362, 364, 366, 377, 378, 1752, 1762, 1763, 1765], "base": [19, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 344, 345, 349, 351, 353, 356, 357, 358, 361, 377, 394, 399, 403, 405, 456, 1762, 1767, 1769], "object": [19, 156, 157, 170, 173, 174, 175, 176, 177, 178, 183, 184, 185, 186, 309, 310, 325, 326, 343, 353, 355, 357, 363, 366, 456, 1762, 1768], "__init__": [19, 22, 24, 40, 44, 47, 48, 170, 173, 174, 175, 176, 342, 345, 349, 355, 358, 361, 363, 364, 365, 366, 456, 1752], "choose_random_backend": 19, "exclud": [19, 20, 164, 165, 333, 334, 347, 361, 394, 399], "none": [19, 20, 24, 31, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 342, 343, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 363, 365, 366, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 441, 442, 443, 448, 449, 450, 451, 454, 455, 456, 459, 461, 462], "clear_backend_stack": 19, "current_backend": [19, 349, 352, 355, 358, 361], "kwarg": [19, 22, 49, 50, 51, 124, 125, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 349, 355, 361, 365, 431, 441], "return": [19, 22, 23, 24, 26, 31, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 454, 455, 461, 462, 1752, 1763], "current": [19, 22, 23, 24, 31, 35, 38, 40, 41, 42, 140, 141, 170, 173, 174, 175, 176, 340, 342, 343, 345, 346, 349, 352, 353, 355, 356, 359, 361, 366, 377, 378, 431, 441, 1752, 1762, 1768, 1769], "prioriti": [19, 22, 42, 173, 174, 354], "global_backend": [19, 22], "argument": [19, 22, 24, 33, 40, 49, 50, 51, 52, 53, 54, 61, 62, 140, 141, 170, 173, 174, 175, 176, 177, 178, 185, 186, 309, 310, 339, 340, 341, 342, 343, 347, 348, 350, 352, 353, 356, 357, 358, 359, 361, 363, 364, 394, 399, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441, 1751, 1762], "": [19, 22, 24, 25, 31, 34, 35, 36, 37, 38, 40, 41, 42, 55, 56, 110, 111, 140, 141, 142, 143, 148, 149, 164, 165, 279, 280, 293, 294, 309, 310, 311, 312, 317, 318, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 377, 378, 403, 409, 431, 441, 1751, 1752, 1758, 1761, 1762, 1763, 1765, 1766, 1767, 1768], "paramet": [19, 22, 23, 24, 26, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 348, 349, 351, 353, 357, 358, 361, 363, 364, 377, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 454, 455, 461, 462, 1763], "from": [19, 22, 24, 25, 33, 34, 35, 36, 38, 39, 40, 41, 42, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 156, 157, 158, 159, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 309, 310, 311, 312, 315, 316, 317, 318, 321, 322, 325, 326, 327, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 378, 394, 399, 403, 405, 406, 431, 441, 442, 448, 449, 450, 451, 1751, 1752, 1758, 1760, 1761, 1762, 1763, 1764, 1766, 1767, 1768, 1769], "which": [19, 22, 23, 24, 26, 33, 34, 35, 38, 39, 40, 41, 42, 45, 46, 55, 56, 57, 58, 110, 111, 124, 125, 128, 129, 136, 137, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 377, 378, 394, 399, 403, 405, 409, 415, 418, 427, 428, 431, 443, 448, 449, 450, 451, 461, 462, 1751, 1752, 1758, 1759, 1760, 1761, 1762, 1763, 1765, 1767, 1768, 1769], "try": [19, 22, 32, 34, 35, 38, 40, 41, 42, 173, 174, 341, 343, 345, 349, 350, 361, 363, 378, 1752], "infer": [19, 22, 23, 55, 56, 140, 141, 152, 153, 179, 180, 309, 310, 321, 322, 339, 342, 345, 346, 353, 361, 366, 448, 450, 1760, 1761, 1764, 1766], "when": [19, 22, 33, 34, 36, 37, 39, 40, 41, 42, 55, 56, 57, 58, 110, 111, 148, 149, 150, 151, 156, 157, 158, 159, 164, 165, 170, 173, 174, 175, 176, 179, 180, 181, 182, 185, 186, 317, 318, 319, 320, 325, 326, 327, 328, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 363, 364, 366, 378, 403, 418, 448, 449, 1760, 1762, 1765, 1766, 1767, 1768], "global": [19, 22, 24, 25, 27, 28, 29, 30, 31, 140, 141, 154, 155, 170, 173, 174, 175, 176, 309, 310, 323, 324, 342, 345, 346, 349, 352, 355, 361, 1762], "set": [19, 22, 24, 25, 27, 28, 29, 30, 31, 33, 36, 38, 42, 49, 52, 53, 54, 110, 111, 124, 125, 133, 136, 137, 140, 141, 142, 143, 148, 149, 158, 159, 161, 162, 163, 164, 165, 173, 174, 279, 280, 293, 294, 302, 305, 306, 309, 310, 311, 312, 317, 318, 327, 328, 330, 331, 332, 333, 334, 339, 340, 341, 343, 345, 346, 347, 352, 353, 354, 355, 356, 357, 358, 361, 363, 364, 394, 399, 403, 415, 416, 427, 428, 431, 432, 441, 443, 461, 462, 1760, 1761, 1762, 1763, 1764, 1766, 1769], "ret": [19, 22, 24, 31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 354, 355, 356, 358, 361, 366, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 454, 455, 461, 462], "exampl": [19, 22, 24, 25, 31, 35, 40, 41, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 357, 358, 361, 363, 364, 365, 366, 377, 378, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 450, 454, 455, 461, 462, 1752, 1759, 1760, 1763, 1765, 1768, 1769], "If": [19, 22, 24, 25, 33, 36, 37, 38, 40, 41, 42, 44, 49, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 124, 125, 128, 129, 136, 137, 142, 143, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 293, 294, 297, 298, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 366, 378, 394, 395, 396, 397, 398, 399, 403, 405, 409, 414, 415, 417, 418, 431, 432, 443, 448, 449, 450, 451, 461, 462, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1752, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "import": [19, 22, 23, 34, 37, 39, 40, 41, 42, 168, 169, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 354, 355, 356, 358, 361, 363, 364, 366, 378, 1752, 1758, 1760, 1762, 1765, 1766, 1768], "numpi": [19, 22, 24, 25, 28, 33, 34, 39, 40, 41, 42, 140, 141, 309, 310, 340, 342, 344, 345, 346, 349, 351, 354, 356, 357, 358, 359, 361, 363, 366, 394, 399, 1751, 1752, 1764, 1769], "np": [19, 22, 40, 185, 186, 309, 310, 341, 345, 346, 351, 354, 355, 356, 357, 358, 359, 361, 363, 364, 366, 431, 432, 1751, 1752], "arrai": [19, 22, 40, 41, 42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 378, 379, 389, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 454, 455, 461, 462, 1751, 1752, 1760, 1761, 1762, 1764, 1768, 1769], "2": [19, 22, 38, 41, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 340, 342, 343, 345, 347, 349, 351, 354, 355, 356, 357, 360, 361, 363, 364, 365, 366, 378, 394, 395, 399, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 448, 450, 454, 455, 461, 462, 1752, 1768, 1769], "print": [19, 22, 24, 25, 31, 41, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 287, 288, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 343, 347, 357, 361, 363, 364, 365, 394, 399, 403, 417, 421, 422, 423, 424, 425, 426, 431, 436, 439, 440, 441, 443, 444, 1752], "function": [19, 22, 23, 24, 25, 26, 33, 38, 41, 42, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 350, 354, 359, 360, 362, 363, 364, 365, 376, 377, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 1751, 1752, 1759, 1760, 1761, 1762, 1763, 1768, 1769], "py": [19, 22, 24, 40, 41, 42, 340, 342, 344, 345, 346, 348, 349, 350, 351, 352, 355, 356, 357, 358, 361, 363, 365, 366], "noqa": [19, 22, 24, 61, 62, 185, 186, 427, 428, 431, 432], "The": [19, 22, 24, 26, 32, 33, 35, 36, 37, 38, 40, 41, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 293, 294, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 364, 365, 366, 377, 394, 395, 396, 397, 398, 399, 403, 405, 409, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 436, 438, 440, 441, 442, 443, 444, 448, 450, 461, 462, 1751, 1752, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769], "set_backend": [19, 22, 24, 27, 28, 29, 30, 31, 340, 342, 345, 352, 353, 361, 363, 366, 1752], "ha": [19, 22, 24, 33, 34, 35, 40, 42, 148, 149, 152, 153, 160, 161, 164, 165, 173, 174, 181, 182, 309, 310, 317, 318, 321, 322, 329, 330, 333, 334, 340, 342, 343, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 377, 378, 1758, 1761, 1762, 1764, 1765, 1768], "over": [19, 22, 33, 35, 41, 42, 124, 125, 148, 149, 164, 165, 166, 167, 168, 169, 181, 182, 287, 288, 317, 318, 333, 334, 335, 336, 337, 338, 342, 347, 348, 354, 357, 361, 363, 378, 403, 415, 431, 432, 439, 440, 1760, 1762], "ani": [19, 22, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 49, 50, 51, 55, 56, 61, 62, 140, 141, 166, 167, 168, 169, 170, 183, 184, 185, 186, 309, 310, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 378, 394, 399, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1751, 1752, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "pass": [19, 22, 40, 42, 110, 111, 168, 169, 170, 173, 174, 175, 176, 279, 280, 337, 338, 340, 341, 342, 343, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 378, 403, 414, 431, 432, 1760], "jax": [19, 22, 24, 25, 27, 34, 35, 39, 40, 41, 42, 142, 143, 311, 312, 340, 342, 344, 345, 346, 351, 354, 355, 356, 357, 358, 359, 361, 363, 366, 378, 1752, 1763, 1765, 1768, 1769], "fn_name_from_version_specific_fn_nam": 19, "name": [19, 23, 26, 38, 40, 41, 42, 124, 125, 160, 161, 329, 330, 342, 343, 347, 348, 350, 351, 355, 356, 357, 358, 359, 361, 364, 366, 431, 443, 1762], "specif": [19, 23, 26, 33, 40, 41, 42, 140, 141, 183, 184, 309, 310, 340, 341, 342, 343, 344, 345, 346, 349, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 377, 378, 1751, 1758, 1760, 1761, 1763, 1764, 1765, 1769], "provid": [19, 23, 26, 33, 41, 42, 55, 56, 140, 141, 142, 143, 152, 153, 158, 159, 164, 165, 166, 167, 173, 174, 179, 180, 309, 310, 321, 322, 327, 328, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 357, 359, 363, 365, 377, 378, 403, 418, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1769], "origin": [19, 23, 26, 35, 40, 42, 44, 47, 48, 124, 125, 148, 149, 152, 153, 164, 165, 170, 173, 174, 175, 176, 293, 294, 317, 318, 321, 322, 333, 334, 342, 345, 353, 354, 355, 356, 361, 431, 438, 1762, 1763], "point": [19, 23, 26, 35, 40, 41, 42, 57, 58, 61, 62, 110, 111, 128, 129, 148, 149, 156, 157, 164, 165, 181, 182, 185, 186, 273, 274, 279, 280, 297, 298, 317, 318, 325, 326, 333, 334, 340, 341, 344, 347, 348, 351, 354, 355, 357, 358, 359, 361, 363, 364, 377, 394, 396, 403, 417, 418, 448, 449, 450, 451, 1768], "get_backend": [19, 342, 352], "specifi": [19, 24, 42, 55, 56, 57, 58, 110, 111, 124, 125, 140, 141, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 164, 165, 166, 167, 171, 172, 173, 174, 181, 182, 279, 280, 309, 310, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 333, 334, 335, 336, 339, 345, 346, 351, 352, 354, 355, 356, 357, 359, 361, 364, 365, 403, 415, 431, 432, 442, 448, 449, 461, 462, 1768], "isn": [19, 24, 42, 309, 310, 353, 364, 378, 1764], "t": [19, 24, 26, 34, 35, 37, 38, 40, 41, 42, 44, 47, 48, 168, 169, 309, 310, 337, 338, 339, 342, 343, 344, 345, 347, 353, 354, 357, 359, 361, 363, 364, 365, 366, 378, 1760, 1762, 1764], "associ": [19, 24, 42, 148, 149, 317, 318, 345, 352, 353, 355, 356, 357, 378], "option": [19, 24, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 366, 378, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 441, 442, 443, 448, 449, 450, 451, 454, 455, 461, 462, 1762, 1768], "str": [19, 24, 49, 50, 51, 118, 119, 140, 141, 146, 147, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 287, 288, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 345, 346, 349, 350, 355, 358, 361, 366, 421, 422, 423, 424, 425, 426], "we": [19, 24, 25, 26, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 124, 125, 168, 169, 293, 294, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 377, 378, 431, 443, 1751, 1752, 1758, 1762, 1763, 1767, 1768], "want": [19, 24, 34, 36, 40, 41, 42, 168, 169, 337, 338, 344, 353, 354, 357, 359, 364, 365, 366, 378], "retriev": [19, 24, 42, 355], "e": [19, 24, 34, 35, 36, 37, 38, 40, 41, 42, 44, 47, 48, 128, 129, 142, 143, 148, 149, 156, 157, 162, 163, 164, 165, 287, 288, 317, 318, 325, 326, 331, 332, 333, 334, 339, 340, 343, 349, 357, 361, 364, 378, 394, 399, 421, 422, 424, 425, 448, 449, 450, 1751, 1758], "default": [19, 24, 40, 41, 42, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 342, 345, 346, 347, 348, 349, 351, 352, 353, 355, 357, 359, 361, 365, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 441, 442, 443, 448, 449, 450, 451, 454, 455, 461, 462, 1751, 1762], "torch": [19, 24, 30, 31, 41, 42, 340, 341, 342, 344, 345, 346, 349, 351, 352, 354, 355, 356, 357, 358, 359, 361, 363, 364, 366, 378, 1751, 1752, 1768], "tensorflow": [19, 24, 29, 31, 34, 35, 39, 40, 41, 42, 140, 141, 309, 310, 340, 344, 345, 346, 351, 354, 355, 356, 357, 358, 359, 361, 366, 378, 394, 399, 1751, 1752, 1760, 1763, 1765, 1766, 1768, 1769], "either": [19, 24, 31, 38, 40, 41, 42, 61, 62, 140, 141, 173, 174, 185, 186, 309, 310, 342, 343, 345, 346, 347, 348, 352, 354, 355, 356, 357, 359, 361, 364, 378, 403, 417, 1762], "doesn": [19, 24, 26, 38, 41, 342, 343, 344, 345, 347, 357, 359, 361, 378, 1760], "matter": [19, 24, 33, 347], "been": [19, 24, 40, 42, 140, 141, 156, 157, 309, 310, 325, 326, 340, 342, 343, 344, 345, 346, 348, 350, 351, 352, 357, 361, 363, 377, 378, 1751, 1762, 1769], "ivy_np": [19, 24, 357], "us": [19, 24, 31, 35, 36, 37, 39, 40, 42, 55, 56, 57, 58, 61, 62, 110, 111, 124, 125, 128, 129, 140, 141, 142, 143, 152, 153, 154, 155, 156, 157, 168, 169, 170, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 293, 294, 297, 298, 309, 310, 311, 312, 321, 322, 323, 324, 325, 326, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 377, 378, 394, 395, 396, 397, 398, 403, 414, 415, 418, 431, 435, 441, 448, 449, 450, 451, 1751, 1752, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769], "ivy_jax": [19, 24], "subsequ": [19, 25, 41, 341, 345, 347, 351, 352, 354, 357, 359, 365, 1763], "call": [19, 25, 31, 34, 38, 42, 170, 175, 176, 181, 182, 341, 342, 343, 345, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 361, 363, 364, 365, 366, 378, 1762, 1763, 1766], "nativ": [19, 25, 44, 47, 48, 49, 51, 52, 54, 55, 56, 140, 141, 177, 178, 309, 310, 345, 349, 353, 354, 355, 356, 357, 361, 363, 364, 456, 1751, 1760, 1769], "native_arrai": [19, 25, 31, 55, 56, 57, 58, 61, 62, 152, 153, 179, 180, 183, 184, 185, 186, 309, 310, 331, 332, 353, 356, 357, 431, 441, 442, 443], "1": [19, 25, 31, 34, 35, 38, 41, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 340, 342, 343, 345, 347, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 378, 394, 395, 396, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 421, 422, 424, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 461, 462, 1752], "ndarrai": [19, 25, 40, 49, 53, 55, 56, 140, 141, 341, 345, 346, 351, 354, 355, 356, 358, 359, 361, 363, 366, 1751], "Or": [19, 25, 364], "jaxlib": [19, 25, 41, 341, 345, 346, 351, 358, 361, 363], "xla_extens": [19, 25, 341, 345, 346, 351, 358, 361, 363], "devicearrai": [19, 25, 341, 356, 361, 363], "set_backend_to_specific_vers": 19, "anyth": [19, 26, 357, 358, 1762, 1763], "updat": [19, 26, 38, 40, 41, 42, 49, 51, 54, 140, 141, 142, 143, 173, 174, 309, 310, 311, 312, 339, 340, 341, 343, 344, 345, 347, 351, 353, 356, 359, 361, 363, 364, 366, 378], "__dict__": [19, 26, 342, 361], "make": [19, 26, 34, 35, 40, 41, 42, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 366, 1760, 1762, 1763, 1764, 1765, 1768, 1769], "set_jax_backend": 19, "equival": [19, 27, 28, 29, 30, 148, 149, 317, 318, 354, 355, 359, 364, 366], "set_numpy_backend": 19, "set_tensorflow_backend": 19, "set_torch_backend": 19, "unset_backend": [19, 342], "unset": [19, 31, 342, 361], "adjust": [19, 31, 164, 165, 333, 334], "dict": [19, 31, 49, 50, 51, 52, 53, 54, 140, 141, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 350, 364, 365, 431, 441, 1751], "previous": [19, 31, 38, 41, 352, 357, 361], "otherwis": [19, 31, 49, 50, 51, 52, 53, 54, 57, 58, 61, 62, 140, 141, 142, 143, 148, 149, 152, 153, 158, 159, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 343, 344, 345, 346, 347, 357, 361], "implement": [19, 31, 40, 57, 58, 162, 163, 181, 182, 183, 184, 331, 332, 339, 340, 341, 342, 343, 344, 345, 346, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 377, 378, 403, 417, 1751, 1752, 1759, 1760, 1761, 1762, 1765, 1768, 1769], "wa": [19, 31, 34, 42, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 347, 355, 361, 363, 403, 416, 1761, 1762, 1764], "last": [19, 31, 35, 42, 44, 47, 48, 55, 56, 124, 125, 148, 149, 150, 151, 152, 153, 162, 163, 164, 165, 166, 167, 173, 174, 293, 294, 317, 318, 319, 320, 321, 322, 331, 332, 333, 334, 335, 336, 340, 342, 345, 347, 350, 354, 356, 357, 359, 361, 378, 431, 432, 441, 1762], "henc": [19, 31, 41, 343, 357], "here": [19, 31, 39, 40, 41, 42, 340, 343, 344, 347, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 377, 378, 1762, 1763], "tensor": [19, 31, 33, 49, 53, 55, 56, 61, 62, 118, 119, 140, 141, 152, 153, 156, 157, 173, 174, 179, 180, 185, 186, 309, 310, 321, 322, 325, 326, 341, 342, 345, 346, 351, 352, 354, 355, 356, 357, 358, 359, 361, 363, 364, 366, 378, 394, 399, 431, 432, 1751, 1752, 1759, 1760, 1763, 1765, 1766, 1769], "howev": [19, 31, 34, 40, 41, 42, 340, 341, 342, 343, 345, 346, 347, 348, 351, 352, 354, 355, 356, 357, 359, 361, 363, 364, 365, 366, 378, 1761, 1762, 1768], "befor": [19, 31, 40, 41, 42, 152, 153, 173, 174, 340, 341, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 361, 364, 378, 431, 433, 434, 441, 1762], "becom": [19, 31, 33, 35, 42, 110, 111, 343, 347, 355, 378, 403, 405], "swap": [19, 31], "python": [19, 31, 32, 33, 34, 38, 39, 41, 42, 128, 129, 156, 157, 297, 298, 325, 326, 340, 343, 349, 350, 355, 357, 359, 361, 363, 364, 378, 448, 449, 450, 451, 1751, 1752, 1759, 1762, 1763, 1764, 1768, 1769], "op": [19, 31, 358, 361, 378], "eagertensor": [19, 31], "backend": [22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, 42, 49, 51, 54, 140, 141, 142, 143, 173, 174, 309, 310, 339, 340, 341, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 363, 366, 1751, 1752, 1762, 1765, 1768, 1769], "ml": [32, 34, 35, 36, 39, 355, 360, 361, 362, 364, 365, 366, 377, 1752, 1758, 1759, 1760, 1761, 1762, 1765, 1767, 1769], "explos": [32, 34, 1752], "A": [32, 33, 34, 35, 38, 39, 40, 41, 55, 56, 57, 58, 110, 111, 124, 125, 128, 129, 140, 141, 152, 153, 156, 157, 166, 167, 170, 173, 174, 175, 176, 181, 182, 279, 280, 297, 298, 309, 310, 311, 312, 321, 322, 325, 326, 335, 336, 339, 343, 345, 346, 351, 352, 355, 357, 361, 364, 378, 394, 399, 403, 415, 431, 442, 443, 448, 449, 450, 451, 1751, 1752, 1762, 1763], "huge": [32, 34, 364, 1752, 1762, 1768], "number": [32, 33, 41, 42, 44, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 124, 125, 140, 141, 148, 149, 152, 153, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 170, 173, 174, 175, 176, 179, 180, 181, 182, 185, 186, 279, 280, 293, 294, 309, 310, 317, 318, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 343, 345, 346, 347, 354, 356, 357, 359, 361, 364, 394, 399, 403, 409, 414, 415, 431, 441, 442, 443, 1752], "tool": [32, 35, 42, 347, 362, 366, 377, 378, 1752, 1760, 1761, 1762, 1763, 1765, 1768, 1769], "have": [32, 33, 34, 35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 287, 288, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 378, 403, 417, 421, 423, 426, 427, 428, 429, 431, 441, 442, 443, 448, 449, 451, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1751, 1752, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "explod": [32, 33, 1752], "onto": [32, 33, 1752, 1762], "scene": [32, 33, 142, 143, 339, 360, 362, 1752, 1762], "b": [32, 35, 36, 44, 47, 48, 61, 62, 110, 111, 120, 121, 140, 141, 146, 147, 170, 171, 172, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 339, 342, 343, 344, 347, 352, 360, 361, 362, 364, 365, 366, 376, 403, 409, 417, 427, 429, 431, 441, 443, 448, 449, 1752, 1758], "why": [32, 34, 42, 354, 363, 1752], "unifi": [32, 34, 173, 174, 339, 340, 341, 345, 349, 355, 359, 361, 378, 1752, 1758, 1759, 1760, 1762, 1766, 1769], "should": [32, 34, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 55, 56, 61, 62, 110, 111, 124, 125, 140, 141, 142, 143, 148, 149, 152, 153, 156, 157, 158, 159, 164, 165, 170, 171, 172, 173, 174, 175, 176, 179, 180, 185, 186, 279, 280, 293, 294, 311, 312, 317, 318, 321, 322, 325, 326, 327, 328, 331, 332, 333, 334, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 403, 417, 418, 431, 438, 441, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1752, 1758, 1759, 1762, 1764, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "them": [32, 33, 34, 35, 38, 40, 42, 340, 341, 342, 343, 349, 353, 354, 355, 356, 357, 361, 363, 364, 365, 378, 1751, 1752, 1759, 1760, 1762, 1764, 1768], "c": [32, 34, 35, 36, 41, 140, 141, 142, 143, 146, 147, 164, 165, 181, 182, 185, 186, 293, 294, 309, 310, 311, 312, 321, 322, 333, 334, 339, 343, 347, 352, 359, 360, 361, 362, 364, 378, 1751, 1752, 1758, 1762, 1766, 1767, 1769], "standard": [32, 61, 62, 154, 155, 156, 157, 164, 165, 185, 186, 323, 324, 325, 326, 333, 334, 339, 340, 341, 343, 345, 348, 351, 354, 357, 358, 378, 427, 428, 431, 432, 1752, 1758, 1760, 1761, 1764, 1765, 1767], "re": [32, 33, 34, 36, 40, 41, 42, 140, 141, 339, 345, 358, 359, 363, 366, 378, 1752, 1762], "collabor": [32, 33, 34, 1752], "consortium": [32, 34, 1752], "api": [32, 33, 41, 61, 62, 185, 186, 339, 341, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 364, 378, 427, 428, 431, 432, 1751, 1752, 1758, 1760, 1762, 1764, 1767, 1769], "open": [33, 34, 35, 36, 38, 41, 42, 156, 157, 325, 326, 344, 345, 348, 355, 356, 359, 377, 1752, 1760, 1761, 1762, 1764, 1765], "project": [33, 34, 35, 38, 41, 42, 342, 357, 365, 377, 378, 1758, 1760, 1762, 1765, 1769], "grown": 33, "consider": [33, 347, 351, 359, 1759, 1760], "recent": [33, 34, 41, 42, 357], "year": [33, 35, 340, 378, 1752, 1762], "especi": [33, 41, 340, 359, 1762], "deep": [33, 36, 39, 40, 42, 173, 174, 343, 345, 356, 360, 363, 364, 1752, 1760, 1762, 1765, 1766, 1768, 1769], "learn": [33, 34, 36, 39, 40, 41, 142, 143, 311, 312, 339, 340, 352, 360, 377, 1751, 1752, 1760, 1764, 1765, 1766, 1767, 1768, 1769], "can": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 55, 56, 57, 58, 148, 149, 152, 153, 156, 157, 181, 182, 317, 318, 321, 322, 325, 326, 339, 340, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 377, 378, 448, 449, 450, 1751, 1752, 1759, 1760, 1761, 1762, 1763, 1765, 1766, 1768, 1769], "seen": [33, 34, 344, 347, 349, 355, 357, 361, 363, 364, 448, 450, 1768], "rapidli": 33, "increas": [33, 148, 149, 317, 318, 345, 349, 358, 359, 431, 441, 1762], "github": [33, 37, 39, 40, 42, 340, 345, 347, 348, 357], "repo": [33, 37, 38, 39, 41, 42, 340, 345, 355, 358], "contain": [33, 37, 38, 40, 41, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 140, 141, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 164, 165, 166, 167, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 345, 347, 348, 351, 352, 353, 354, 357, 360, 361, 362, 365, 378, 394, 395, 396, 397, 398, 399, 400, 403, 417, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441, 442, 443, 1751, 1752, 1762, 1763, 1768], "term": [33, 42, 343, 361, 1751, 1762], "time": [33, 34, 35, 40, 41, 42, 124, 125, 142, 143, 160, 161, 293, 294, 311, 312, 329, 330, 342, 343, 344, 345, 347, 351, 352, 353, 354, 355, 357, 358, 361, 364, 366, 378, 431, 441, 442, 1760, 1762, 1763, 1766, 1767, 1768], "These": [33, 34, 35, 37, 39, 40, 41, 42, 124, 125, 293, 294, 340, 343, 344, 345, 347, 348, 350, 351, 352, 354, 356, 357, 358, 361, 362, 364, 365, 366, 378, 431, 438, 1751, 1762, 1766, 1768, 1769], "written": [33, 41, 341, 348, 351, 354, 355, 357, 358, 361, 363, 366, 378, 1760, 1762, 1766, 1768, 1769], "mani": [33, 34, 35, 40, 41, 42, 152, 153, 173, 174, 321, 322, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 363, 364, 378, 394, 399, 1758, 1762, 1765, 1768, 1769], "differ": [33, 34, 35, 39, 41, 42, 44, 47, 48, 61, 62, 124, 125, 140, 141, 170, 173, 174, 175, 176, 293, 294, 309, 310, 333, 334, 339, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 378, 403, 405, 406, 409, 431, 433, 434, 442, 1752, 1759, 1760, 1761, 1762, 1765, 1768, 1769], "while": [33, 34, 40, 41, 42, 170, 173, 174, 175, 176, 342, 345, 347, 350, 351, 354, 355, 357, 359, 363, 365, 366, 378, 403, 406, 1762, 1768, 1769], "thi": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 377, 378, 394, 399, 403, 404, 405, 414, 415, 416, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 435, 438, 441, 461, 462, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1752, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "wonder": [33, 35, 363], "thing": [33, 34, 35, 39, 40, 41, 42, 342, 350, 355, 357, 359, 363, 364, 1762], "research": [33, 377, 1762, 1769], "develop": [33, 34, 35, 36, 37, 39, 40, 41, 42, 340, 344, 358, 377, 378, 1751, 1752, 1760, 1761, 1762, 1763, 1764, 1767, 1768, 1769], "also": [33, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 364, 365, 366, 377, 378, 394, 399, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 438, 441, 1758, 1759, 1760, 1761, 1762, 1763, 1765, 1767, 1768, 1769], "consid": [33, 34, 110, 111, 148, 149, 279, 280, 317, 318, 352, 358, 362, 363, 364, 394, 399, 403, 409, 1759, 1763, 1767, 1769], "speed": [33, 357, 1765], "evolv": [33, 1762], "shareabl": 33, "code": [33, 34, 35, 38, 39, 40, 41, 42, 61, 62, 170, 173, 174, 175, 176, 183, 184, 185, 186, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 376, 378, 1751, 1752, 1758, 1760, 1761, 1762, 1763, 1765, 1766, 1767, 1768, 1769], "significantli": [33, 1760], "hinder": [33, 351], "librari": [33, 34, 35, 36, 40, 183, 184, 340, 359, 366, 376, 378, 1751, 1752, 1758, 1759, 1760, 1762, 1766, 1769], "outdat": 33, "month": [33, 41], "rigor": [33, 357], "maintain": [33, 42, 162, 163, 331, 332, 340, 344, 1761], "against": [33, 57, 58, 148, 149, 158, 159, 181, 182, 185, 186, 317, 318, 327, 328, 357, 361, 378, 403, 409, 1762], "newest": 33, "For": [33, 34, 35, 37, 38, 40, 41, 42, 142, 143, 148, 149, 311, 312, 317, 318, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 377, 378, 403, 417, 431, 441, 1759, 1760, 1763, 1768, 1769], "softwar": [33, 34, 41, 42, 1760, 1765, 1766, 1767], "pipelin": [33, 341, 366, 1751, 1762, 1763, 1768], "where": [33, 34, 35, 36, 38, 41, 42, 55, 56, 61, 62, 110, 111, 124, 125, 140, 141, 148, 149, 152, 153, 156, 157, 158, 159, 164, 165, 166, 167, 173, 174, 179, 180, 185, 186, 279, 280, 293, 294, 317, 318, 321, 322, 325, 326, 327, 328, 333, 334, 335, 336, 341, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 361, 364, 365, 366, 378, 394, 399, 403, 406, 409, 410, 411, 416, 431, 435, 441, 448, 449, 1752, 1760, 1769], "rapid": [33, 34, 41, 1762], "prototyp": [33, 1762], "vital": [33, 366], "signific": [33, 34, 378, 1762], "bottleneck": 33, "As": [33, 42, 168, 169, 337, 338, 341, 343, 345, 346, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 378, 1762, 1767], "new": [33, 34, 35, 36, 38, 40, 41, 42, 110, 111, 140, 141, 142, 143, 152, 153, 154, 155, 173, 174, 179, 180, 279, 280, 309, 310, 311, 312, 321, 322, 323, 324, 339, 342, 343, 344, 345, 347, 348, 350, 353, 354, 355, 356, 357, 358, 359, 360, 363, 366, 377, 403, 415, 431, 438, 1751, 1752, 1760, 1764, 1768, 1769], "futur": [33, 35, 41, 42, 345, 355, 358, 359, 363, 378, 1768], "avail": [33, 41, 42, 140, 141, 309, 310, 343, 344, 346, 348, 355, 378, 1767, 1768], "quickli": [33, 35, 41, 42, 364, 365, 1762, 1769], "obsolet": [33, 35], "user": [33, 34, 37, 38, 41, 42, 339, 342, 343, 345, 353, 354, 355, 357, 359, 360, 361, 378, 403, 414, 431, 441, 1760, 1762, 1768, 1769], "constantli": [33, 358, 359], "invent": 33, "wheel": 33, "our": [33, 34, 36, 39, 40, 41, 42, 44, 168, 169, 170, 337, 338, 340, 343, 344, 345, 347, 349, 350, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 378, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1752, 1767, 1768, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "desir": [33, 42, 57, 58, 158, 159, 173, 174, 181, 182, 183, 184, 327, 328, 342, 345, 355, 361, 1762], "simultan": [33, 35], "modern": [33, 34, 1767], "simpl": [33, 40, 41, 42, 341, 343, 345, 346, 347, 348, 352, 354, 355, 357, 358, 359, 363, 365, 366, 378, 1751, 1761, 1762, 1763, 1764], "scalabl": [33, 361, 1767, 1768], "manner": [33, 41, 49, 52, 53, 54, 177, 178, 346, 348, 355, 358, 364, 377, 378, 1758, 1760, 1768, 1769], "determin": [33, 44, 47, 48, 61, 62, 110, 111, 148, 149, 152, 153, 166, 167, 170, 173, 174, 175, 176, 185, 186, 279, 280, 309, 310, 317, 318, 331, 332, 335, 336, 343, 345, 346, 348, 352, 355, 356, 359, 403, 417], "exactli": [33, 35, 343, 345, 346, 347, 359], "common": [33, 40, 61, 62, 110, 111, 173, 174, 279, 280, 343, 345, 346, 347, 350, 352, 353, 355, 358, 359, 378, 403, 405, 408, 412, 1759, 1762, 1769], "ground": [33, 355, 357], "li": 33, "between": [33, 110, 111, 150, 151, 152, 153, 170, 173, 174, 175, 176, 185, 186, 319, 320, 321, 322, 341, 342, 343, 347, 351, 352, 355, 356, 357, 359, 360, 362, 363, 364, 366, 377, 403, 409, 418, 431, 441, 1752, 1758, 1759, 1761, 1762, 1763, 1768], "find": [33, 36, 38, 39, 40, 41, 42, 173, 174, 340, 344, 357, 359, 361, 364, 1751, 1752], "essenti": [33, 34, 40, 343, 346, 347, 352, 358, 1768], "order": [33, 38, 40, 41, 42, 44, 47, 48, 124, 125, 142, 143, 148, 149, 162, 163, 170, 173, 174, 175, 176, 293, 294, 317, 318, 331, 332, 341, 342, 343, 344, 345, 346, 347, 348, 351, 354, 355, 356, 357, 358, 359, 364, 366, 378, 394, 399, 431, 432, 433, 434, 1758, 1761, 1762, 1763, 1765, 1768], "design": [33, 34, 273, 274, 339, 345, 354, 355, 356, 359, 361, 363, 378, 394, 397, 398, 1758, 1760, 1762, 1765, 1766, 1767], "univers": 33, "abstract": [33, 343, 345, 355, 357, 359, 365, 378, 1760, 1762, 1764, 1765, 1769], "In": [33, 35, 37, 40, 41, 42, 140, 141, 152, 153, 183, 184, 321, 322, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 366, 377, 378, 1752, 1758, 1760, 1762, 1763, 1765, 1768], "search": [33, 39, 41, 49, 52, 53, 54, 131, 159, 177, 178, 300, 328, 343, 347, 357, 358], "languag": [33, 35, 355, 359, 361, 1751, 1760, 1763, 1765, 1766, 1767, 1768], "first": [33, 34, 37, 38, 39, 40, 41, 42, 44, 47, 48, 61, 62, 110, 111, 124, 125, 148, 149, 156, 157, 158, 159, 160, 161, 164, 165, 170, 175, 176, 185, 186, 279, 280, 289, 290, 293, 294, 317, 318, 325, 326, 329, 330, 333, 334, 340, 341, 343, 347, 351, 352, 353, 354, 355, 357, 359, 361, 363, 364, 366, 394, 399, 403, 406, 407, 408, 409, 412, 413, 427, 429, 431, 432, 441, 442, 454, 455, 1760, 1762, 1763, 1767], "see": [33, 36, 38, 40, 41, 42, 44, 47, 48, 57, 58, 61, 62, 148, 149, 158, 159, 164, 165, 166, 167, 170, 175, 176, 185, 186, 317, 318, 327, 328, 333, 334, 335, 336, 340, 343, 344, 346, 347, 351, 352, 355, 356, 357, 358, 359, 361, 363, 364, 377, 378, 394, 399, 1752, 1758], "clear": [33, 34, 35, 40, 42, 345, 346, 347, 355, 359, 361, 363, 1762], "front": [33, 360, 361, 364, 1752, 1760, 1762], "runner": 33, "look": [33, 37, 38, 41, 42, 342, 343, 345, 346, 347, 349, 351, 352, 355, 356, 357, 358, 359, 361, 363, 365, 366, 1752, 1758, 1762], "littl": [33, 356, 363, 1764], "deeper": [33, 42, 339, 357, 360], "follow": [33, 34, 38, 40, 41, 42, 140, 141, 142, 143, 173, 174, 309, 310, 311, 312, 317, 318, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 378, 431, 441, 1752, 1759, 1762, 1765], "same": [33, 35, 37, 38, 41, 42, 44, 47, 48, 49, 50, 51, 55, 56, 57, 58, 61, 62, 118, 119, 134, 135, 142, 143, 146, 147, 148, 149, 152, 153, 156, 157, 160, 161, 162, 163, 164, 165, 173, 174, 179, 180, 181, 182, 185, 186, 287, 288, 309, 310, 311, 312, 315, 316, 317, 318, 321, 322, 325, 326, 329, 330, 333, 334, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 365, 366, 378, 394, 399, 403, 405, 421, 422, 423, 424, 425, 426, 431, 441, 454, 455, 1752, 1759, 1761, 1768, 1769], "core": [33, 40, 41, 346, 357, 366, 1752, 1760, 1761, 1762, 1763, 1767, 1769], "principl": [33, 1760, 1762, 1765], "oper": [33, 40, 41, 57, 58, 110, 111, 118, 119, 140, 141, 142, 143, 146, 147, 170, 173, 174, 175, 176, 181, 182, 279, 280, 287, 288, 309, 310, 315, 316, 340, 341, 343, 345, 346, 347, 348, 352, 354, 355, 357, 359, 361, 364, 365, 403, 414, 421, 422, 423, 424, 425, 426, 1751, 1758, 1759, 1760, 1761, 1762, 1763, 1765, 1766, 1767, 1768, 1769], "expos": [33, 361, 365], "almost": [33, 39, 343, 356, 362, 364], "ident": [33, 35, 173, 174, 343, 352, 353, 355, 356, 358, 359, 363, 364, 378, 1751, 1752], "uniqu": [33, 124, 125, 160, 161, 293, 294, 329, 330, 343, 352, 355, 356, 357, 359, 378, 431, 438, 441, 1765], "syntax": [33, 34, 345, 350, 1762], "There": [33, 40, 41, 42, 340, 341, 343, 345, 347, 349, 350, 352, 355, 356, 361, 364, 378, 1763, 1764, 1768, 1769], "onli": [33, 36, 40, 41, 42, 44, 47, 48, 110, 111, 152, 153, 156, 157, 173, 174, 279, 280, 321, 322, 325, 326, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 376, 378, 403, 414, 431, 432, 448, 449, 1752, 1761, 1762, 1763, 1768, 1769], "so": [33, 34, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 378, 379, 389, 403, 405, 1752, 1762, 1763, 1764, 1766], "wai": [33, 34, 39, 40, 41, 340, 342, 345, 354, 356, 357, 359, 363, 364, 365, 366, 378, 1764, 1768, 1769], "manipul": [33, 125, 153, 294, 322, 358, 361, 366, 377, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 1762], "unsurprisingli": [33, 347], "fundament": [33, 355, 359, 361, 1762], "consist": [33, 173, 174, 340, 341, 345, 349, 354, 361, 1763], "each": [33, 34, 35, 37, 40, 41, 42, 44, 47, 48, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 158, 159, 160, 161, 164, 165, 170, 173, 174, 175, 176, 181, 182, 185, 186, 279, 280, 287, 288, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 321, 322, 327, 328, 329, 330, 333, 334, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 366, 377, 378, 403, 405, 417, 421, 422, 423, 424, 425, 426, 431, 433, 434, 435, 437, 438, 441, 1752, 1758, 1759, 1763, 1765, 1768], "veri": [33, 34, 39, 40, 41, 42, 110, 111, 279, 280, 343, 345, 346, 347, 351, 352, 354, 355, 356, 357, 358, 359, 362, 364, 365, 366, 378, 403, 409, 414, 1752, 1758, 1759, 1760, 1762, 1763, 1764, 1767, 1768, 1769], "similar": [33, 40, 41, 343, 344, 345, 346, 349, 353, 355, 356, 357, 358, 364, 378, 1758, 1759, 1760, 1761, 1768], "convent": [33, 342, 351, 358, 377, 1768], "those": [33, 40, 41, 42, 152, 153, 173, 174, 321, 322, 343, 345, 353, 355, 357, 359, 1759], "introduc": [33, 343, 344, 345, 356, 364], "2006": 33, "layer": [33, 119, 147, 154, 155, 288, 316, 323, 324, 348, 355, 358, 359, 361, 362, 365, 422, 423, 424, 425, 426, 1752, 1760, 1762, 1766, 1769], "therefor": [33, 37, 40, 42, 61, 62, 185, 186, 340, 341, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 361, 363, 365, 378, 394, 399, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441, 1759, 1762, 1768], "present": [33, 40, 42, 173, 174, 343, 345, 346, 351, 354, 361, 1759, 1760, 1769], "itself": [33, 41, 42, 110, 111, 340, 343, 354, 355, 365, 377, 378, 403, 414, 1761, 1762, 1763, 1768], "cut": [33, 1768], "cloth": 33, "adher": [33, 34, 340, 345, 348, 351, 359, 361, 366, 1758, 1759, 1768], "semant": [33, 361, 366, 1763], "round": [33, 34, 35, 37, 38, 40, 41, 42, 61, 62, 185, 186, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 1752, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769], "up": [33, 34, 35, 36, 37, 38, 40, 42, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 378, 431, 434, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769], "hopefulli": [33, 34, 35, 37, 38, 40, 41, 42, 44, 170, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "paint": [33, 361], "pictur": [33, 40, 361], "how": [33, 35, 36, 38, 39, 40, 41, 42, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 377, 378, 1752, 1758, 1762], "pleas": [33, 34, 35, 37, 38, 40, 41, 42, 44, 170, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1752, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "reach": [33, 34, 35, 37, 38, 40, 41, 42, 44, 170, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "out": [33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 377, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 441, 442, 443, 448, 449, 450, 451, 454, 455, 461, 462, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1752, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "discord": [33, 34, 35, 37, 38, 40, 41, 42, 44, 170, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "you": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 140, 141, 170, 309, 310, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 377, 378, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1751, 1752, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "question": [33, 34, 35, 37, 38, 40, 41, 42, 44, 170, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 378, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "With": [34, 35, 41, 44, 47, 48, 55, 56, 57, 58, 61, 62, 124, 125, 140, 141, 142, 143, 148, 149, 158, 159, 164, 165, 170, 175, 176, 179, 180, 181, 182, 185, 186, 273, 274, 279, 280, 293, 294, 303, 304, 305, 306, 309, 310, 311, 312, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 347, 353, 355, 357, 359, 361, 403, 412, 417, 427, 428, 431, 432, 435, 438, 441, 442, 443, 1762, 1765], "central": [34, 40, 359, 1768], "goal": [34, 40, 1762, 1768], "being": [34, 35, 41, 42, 44, 47, 48, 173, 174, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 353, 354, 355, 356, 357, 359, 361, 364, 377, 378, 431, 441, 1752, 1758, 1760, 1761, 1762, 1763, 1768, 1769], "would": [34, 36, 38, 40, 41, 42, 152, 153, 183, 184, 321, 322, 339, 340, 341, 342, 343, 345, 347, 348, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 363, 365, 366, 378, 1752, 1762, 1768], "entir": [34, 35, 40, 41, 42, 164, 165, 166, 167, 173, 174, 309, 310, 333, 334, 335, 336, 340, 341, 343, 345, 347, 354, 355, 357, 359, 361, 364, 365, 366, 378, 431, 441, 1762, 1768, 1769], "forgiven": 34, "rais": [34, 42, 110, 111, 140, 141, 152, 153, 156, 157, 166, 167, 173, 174, 279, 280, 309, 310, 321, 322, 325, 326, 335, 336, 340, 342, 349, 350, 354, 355, 361, 363, 403, 405, 448, 449], "an": [34, 35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 140, 141, 142, 143, 148, 149, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 309, 310, 311, 312, 317, 318, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 377, 378, 394, 395, 397, 398, 399, 400, 403, 412, 414, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 438, 439, 440, 441, 442, 448, 449, 451, 454, 455, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1751, 1752, 1758, 1760, 1761, 1762, 1763, 1765, 1766, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "eyebrow": 34, "somehow": 34, "pytorch": [34, 35, 39, 40, 142, 143, 344, 345, 346, 349, 351, 352, 354, 355, 356, 358, 359, 361, 366, 378, 1751, 1752, 1763, 1765, 1766, 1768, 1769], "other": [34, 37, 40, 41, 42, 44, 47, 48, 57, 58, 140, 141, 164, 165, 170, 173, 174, 175, 176, 181, 182, 185, 186, 309, 310, 333, 334, 340, 341, 343, 344, 347, 348, 350, 352, 354, 355, 356, 357, 358, 359, 361, 363, 365, 366, 376, 377, 378, 1751, 1752, 1758, 1760, 1761, 1762, 1768, 1769], "strong": [34, 378, 1762], "industri": [34, 1762, 1764], "back": [34, 41, 42, 341, 345, 353, 360, 378, 1760, 1764], "momentum": 34, "won": [34, 35, 41, 42, 343, 357, 366], "ad": [34, 39, 40, 41, 42, 152, 153, 321, 322, 337, 338, 341, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 365, 378, 403, 409, 1761, 1762], "just": [34, 35, 41, 42, 340, 342, 345, 347, 348, 352, 353, 354, 355, 356, 357, 361, 363, 364, 378, 394, 399, 1762, 1763, 1768], "problem": [34, 42, 341, 355, 363, 1758, 1764, 1768], "even": [34, 35, 41, 42, 124, 125, 293, 294, 340, 345, 346, 348, 351, 352, 355, 359, 363, 364, 365, 366, 378, 431, 441, 1768], "wors": 34, "rather": [34, 42, 140, 141, 142, 143, 173, 174, 309, 310, 311, 312, 340, 343, 345, 348, 354, 355, 356, 357, 358, 366, 378, 1758, 1761, 1762], "funni": 34, "comic": 34, "strip": 34, "easi": [34, 41, 42, 343, 352, 356, 359, 1760, 1762, 1768, 1769], "feasibl": [34, 40], "space": [34, 110, 111, 140, 141, 185, 186, 309, 310, 357, 359, 403, 418], "case": [34, 40, 41, 42, 49, 52, 54, 128, 129, 140, 141, 152, 153, 164, 165, 170, 173, 174, 175, 176, 309, 310, 321, 322, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 365, 366, 378, 403, 406, 417, 448, 450, 1761, 1765], "unlik": [34, 343, 347, 354, 1767, 1769], "charger": 34, "charact": [34, 350], "encod": [34, 140, 141, 309, 310, 364], "instant": [34, 1752], "much": [34, 40, 41, 42, 341, 343, 345, 354, 355, 356, 358, 361, 363, 364, 403, 409, 1760, 1762, 1768, 1769], "doe": [34, 38, 40, 42, 110, 111, 152, 153, 173, 174, 279, 280, 321, 322, 339, 342, 345, 347, 348, 351, 352, 354, 355, 356, 357, 358, 359, 361, 363, 364, 378, 394, 399, 403, 414, 1751, 1758, 1762, 1763, 1769], "mandat": [34, 345, 354, 357, 358], "adopt": [34, 42, 341, 351, 359, 1761, 1762, 1767], "continu": [34, 35, 39, 40, 41, 339, 340, 350, 357, 378, 1762], "own": [34, 35, 41, 340, 345, 348, 349, 355, 357, 358, 361, 378, 1751, 1758, 1761, 1762, 1767, 1768], "signatur": [34, 61, 62, 185, 186, 345, 346, 347, 348, 351, 354, 357, 358, 359, 431, 432, 441, 1759, 1768], "replac": [34, 38, 42, 61, 62, 110, 111, 140, 141, 152, 153, 156, 157, 173, 174, 279, 280, 309, 310, 321, 322, 325, 326, 343, 345, 346, 347, 353, 355, 357, 363, 366, 378, 403, 414, 1769], "your": [34, 35, 36, 37, 38, 39, 40, 41, 340, 348, 358, 359, 364, 365, 378, 1752, 1762], "10": [34, 38, 41, 61, 62, 110, 111, 118, 119, 124, 125, 134, 135, 136, 137, 140, 141, 142, 143, 148, 149, 156, 157, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 343, 345, 347, 356, 357, 361, 363, 364, 403, 408, 409, 412, 415, 421, 422, 424, 425, 431, 432, 454, 455, 461, 462, 1767], "100": [34, 35, 110, 111, 279, 280, 309, 310, 357, 364, 365, 366, 378, 394, 399, 403, 409, 414, 1752], "despit": [34, 343, 345, 346, 359, 361, 1759, 1762], "distinct": [34, 41, 343, 348, 354, 355, 360, 1752, 1762], "still": [34, 40, 42, 173, 174, 345, 348, 354, 355, 357, 359, 365, 378, 1752, 1759, 1762, 1768], "believ": [34, 42], "share": [34, 173, 174, 342, 343, 347, 352, 356, 357, 359, 361, 1760, 1761, 1768], "bring": [34, 340, 357, 361, 362, 1751], "benefit": [34, 35, 41, 341, 343, 354, 359, 363, 364, 378, 1760, 1764, 1767], "unrel": [34, 42], "what": [34, 35, 37, 42, 339, 343, 347, 348, 351, 353, 355, 357, 360, 361, 363, 364, 365, 366, 377, 378, 1752, 1758, 1763, 1764, 1767], "again": [34, 35, 42, 342, 343, 347, 354, 355, 357, 358, 359, 364, 366, 378, 1767, 1768], "contrari": 34, "bumpi": 34, "road": 34, "allud": [34, 364], "most": [34, 39, 40, 41, 173, 174, 179, 180, 341, 343, 345, 346, 350, 351, 352, 354, 355, 357, 358, 359, 361, 363, 364, 365, 378, 1762, 1763, 1765, 1766, 1768, 1769], "technologi": [34, 1760, 1764], "sector": [34, 61, 62, 185, 186], "full": [34, 35, 42, 148, 149, 345, 348, 351, 355, 357, 359, 361, 378, 1760, 1762, 1768], "success": 34, "reason": [34, 40, 42, 340, 341, 343, 345, 347, 352, 354, 355, 358, 359, 361, 363, 1768], "build": [34, 36, 37, 41, 344, 345, 352, 360, 362, 365, 366, 378, 1751, 1752, 1760, 1762, 1764, 1767, 1768, 1769], "custom": [34, 344, 349, 356, 357, 365, 1762, 1766, 1767, 1768], "comput": [34, 35, 41, 45, 46, 61, 62, 110, 111, 118, 119, 124, 125, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 164, 165, 171, 172, 173, 174, 185, 186, 279, 280, 289, 290, 293, 294, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 333, 334, 343, 345, 352, 355, 357, 359, 361, 364, 378, 394, 395, 397, 398, 403, 406, 407, 412, 415, 421, 422, 423, 424, 425, 426, 427, 429, 431, 435, 437, 443, 461, 462, 1751, 1758, 1760, 1762, 1763, 1765, 1766, 1768], "thank": [34, 364], "interoper": [34, 1759, 1760, 1762, 1765], "compon": [34, 361, 1758, 1763, 1765], "bio": [34, 41], "hardwar": [34, 41, 44, 47, 48, 359, 1758, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768], "initi": [34, 42, 170, 173, 174, 175, 176, 342, 345, 346, 357, 361, 1762, 1768, 1769], "pcie": 34, "interfac": [34, 363, 366, 378, 1751, 1758, 1759, 1760, 1761, 1762, 1766, 1769], "motherboard": 34, "raid": 34, "storag": [34, 364], "virtual": [34, 37, 38, 42, 1765, 1766], "bluetooth": 34, "wireless": 34, "exchang": [34, 39, 1758, 1760], "btx": 34, "form": [34, 36, 49, 50, 51, 52, 53, 54, 55, 56, 142, 143, 148, 149, 173, 174, 317, 318, 352, 357, 359, 365, 366, 394, 396, 431, 436, 441, 444, 1762, 1763, 1768], "factor": [34, 142, 143, 146, 147, 148, 149, 287, 288, 311, 312, 315, 316, 317, 318, 349], "sata": 34, "connect": [34, 41, 365, 366, 1760], "host": [34, 378, 1767], "bu": 34, "adapt": [34, 311, 312], "devic": [34, 42, 44, 47, 48, 55, 56, 60, 109, 156, 157, 173, 174, 179, 180, 184, 273, 274, 278, 309, 310, 325, 326, 339, 342, 345, 349, 352, 353, 356, 358, 359, 361, 366, 378, 394, 399, 448, 449, 451, 1751, 1761, 1762, 1764, 1765, 1766, 1767], "html": [34, 38, 61, 62, 185, 186, 348, 394, 399, 431, 432], "enabl": [34, 41, 42, 170, 173, 174, 175, 176, 341, 343, 352, 353, 354, 355, 357, 359, 360, 362, 364, 366, 378, 1751, 1760, 1761, 1762, 1763, 1764, 1765, 1768, 1769], "anyon": [34, 36, 42, 378, 1768], "websit": [34, 340], "tcp": 34, "ip": 34, "node": [34, 173, 174, 309, 310, 343, 355, 1763], "commun": [34, 36, 40, 41, 42, 378, 1752, 1761, 1762, 1764], "network": [34, 343, 352, 361, 365, 377, 1752, 1758, 1760, 1761, 1762, 1766, 1768, 1769], "smtp": 34, "possibl": [34, 36, 40, 41, 42, 152, 153, 321, 322, 343, 344, 345, 347, 348, 354, 355, 356, 357, 359, 361, 364, 377, 378, 1760, 1762, 1768], "send": [34, 1767], "gmail": 34, "outlook": 34, "pop": [34, 41], "u": [34, 36, 41, 42, 148, 149, 317, 318, 343, 353, 354, 355, 356, 357, 358, 359, 365, 378], "email": 34, "ieee": 34, "754": 34, "allow": [34, 37, 40, 42, 344, 349, 350, 353, 355, 356, 357, 361, 363, 378, 1751, 1760, 1762, 1766, 1767], "calcul": [34, 40, 61, 62, 150, 151, 164, 165, 170, 173, 174, 175, 176, 185, 186, 319, 320, 333, 334, 348, 356, 361, 403, 404, 413, 417, 431, 441], "live": [34, 35, 345, 1758, 1760], "depend": [34, 37, 40, 41, 42, 57, 58, 140, 141, 162, 163, 181, 182, 331, 332, 333, 334, 345, 348, 353, 354, 355, 357, 359, 361, 378, 403, 417, 1760, 1762, 1763], "did": [34, 40, 366, 1768], "aris": [34, 345, 378], "until": [34, 42, 350, 358, 361, 378, 1752, 1769], "substanti": [34, 42, 341, 345, 357, 1762], "innov": 34, "growth": [34, 1765], "usag": [34, 345, 361, 378, 1765], "relev": [34, 40, 41, 42, 343, 344, 345, 347, 356, 364, 1760, 1767, 1768], "area": [34, 61, 62, 185, 186, 354, 376, 1752, 1758], "necess": 34, "parti": [34, 378, 1761, 1762, 1768], "could": [34, 35, 40, 41, 42, 340, 345, 347, 353, 354, 355, 356, 357, 361, 363, 364, 365, 1762, 1767, 1768], "easili": [34, 41, 344, 355, 359, 364, 365, 366, 378, 1752, 1762, 1768, 1769], "engag": [34, 36, 42], "regard": [34, 39, 343, 355, 356, 359], "effect": [34, 40, 142, 143, 164, 165, 311, 312, 333, 334, 341, 343, 348, 351, 354, 378], "2015": [34, 1762], "sinc": [34, 41, 42, 110, 111, 279, 280, 340, 343, 354, 355, 357, 378, 403, 1762, 1768], "alongsid": 34, "machin": [34, 41, 148, 149, 317, 318, 340, 352, 377, 1751, 1760, 1762, 1764, 1765, 1766, 1767, 1768], "frame": [34, 377, 1762], "less": [34, 42, 44, 47, 48, 61, 62, 148, 149, 156, 157, 164, 165, 185, 186, 317, 318, 325, 326, 343, 345, 347, 349, 351, 354, 355, 359, 360, 361, 403, 416, 1762, 1764], "matur": [34, 378, 1762], "state": [34, 41, 345, 348, 349, 351, 355, 357, 360, 361, 362, 364, 377, 1752, 1768, 1769], "than": [34, 37, 42, 44, 47, 48, 61, 62, 110, 111, 140, 141, 142, 143, 148, 149, 152, 153, 156, 157, 158, 159, 160, 161, 164, 165, 170, 173, 174, 175, 176, 185, 186, 309, 310, 311, 312, 317, 318, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 340, 343, 344, 345, 347, 349, 354, 355, 356, 357, 358, 359, 361, 364, 365, 366, 378, 403, 409, 416, 418, 431, 433, 434, 1759, 1760, 1761, 1762, 1768, 1769], "preced": [34, 365], "mention": [34, 40, 41, 42, 347, 351, 352, 354, 359, 1762], "aros": 34, "70": [34, 309, 310], "80": 34, "90": [34, 61, 62, 124, 125, 185, 186, 293, 294, 431, 442], "effort": [34, 36, 378, 1758, 1762, 1768], "stage": [34, 36, 38, 42, 339, 350, 357, 1752, 1762], "complet": [34, 40, 42, 173, 174, 340, 341, 343, 344, 347, 355, 356, 357, 363, 364, 1760], "natur": [34, 148, 149, 317, 318, 341, 347, 356, 377], "like": [34, 38, 40, 41, 42, 110, 111, 142, 143, 279, 280, 303, 304, 311, 312, 339, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 377, 378, 403, 404, 405, 408, 410, 411, 413, 416, 431, 441, 454, 455, 1752, 1762, 1767], "certainli": [34, 1768], "mission": [34, 1752, 1764], "creat": [34, 36, 37, 38, 40, 41, 42, 55, 56, 110, 111, 128, 129, 156, 157, 173, 174, 179, 180, 279, 280, 297, 298, 309, 310, 325, 326, 345, 346, 349, 353, 354, 355, 356, 357, 359, 361, 362, 365, 376, 377, 394, 399, 403, 414, 431, 441, 448, 449, 450, 451, 1751, 1752, 1762, 1763, 1768], "At": [34, 40, 41, 340, 355, 357, 358, 1762], "process": [34, 35, 36, 38, 41, 42, 343, 352, 355, 356, 357, 359, 361, 366, 1760, 1761, 1762, 1765, 1766, 1768, 1769], "ourselv": [34, 1768], "lead": [34, 35, 170, 173, 174, 175, 176, 347, 378], "quansight": [34, 1768], "compani": [34, 1758], "made": [34, 37, 40, 42, 340, 344, 354, 358, 361, 363, 427, 429, 1762], "organ": [34, 341, 343, 352, 355, 358, 1751], "panda": 34, "scipi": [34, 1764, 1769], "conda": [34, 38, 41, 1764], "dask": 34, "apach": [34, 1764, 1768], "mxnet": [34, 1769], "onnx": [34, 1760, 1768], "scikit": 34, "jupyt": [34, 1764], "aw": 34, "cupi": [34, 1762, 1769], "net": [34, 35, 361, 366], "sympi": 34, "rai": 34, "modin": 34, "spyder": 34, "includ": [34, 40, 42, 55, 56, 110, 111, 140, 141, 158, 159, 164, 165, 166, 167, 173, 174, 185, 186, 273, 274, 279, 280, 289, 290, 293, 294, 297, 298, 305, 306, 309, 310, 317, 318, 327, 328, 333, 334, 335, 336, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 377, 378, 394, 399, 403, 412, 1759, 1760, 1762, 1764, 1767, 1768, 1769], "member": [34, 40, 42, 355], "googl": [34, 1752], "octoml": [34, 1768], "einop": [34, 140, 141, 309, 310], "further": [34, 35, 38, 42, 340, 341, 347, 349, 355, 357, 360, 361, 364, 365, 1752, 1767, 1768], "sponsor": 34, "lg": 34, "electron": 34, "microsoft": [34, 1762, 1767, 1769], "d": [34, 35, 36, 41, 118, 119, 124, 125, 146, 147, 148, 149, 287, 288, 293, 294, 315, 316, 317, 318, 339, 343, 357, 364, 394, 399, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 1752, 1758], "shaw": 34, "co": [34, 39, 61, 62, 140, 141, 185, 186, 345, 361, 377, 1752], "intel": [34, 1760, 1767], "togeth": [34, 173, 174, 341, 343, 350, 355, 358, 359, 365, 366, 378, 403, 409, 1760, 1762, 1763, 1768], "major": [34, 345, 346, 357, 378, 1759, 1762], "involv": [34, 36, 38, 57, 58, 181, 182, 339, 345, 347, 359, 366, 1762, 1768], "anoth": [34, 40, 41, 42, 343, 345, 352, 353, 355, 356, 357, 359, 361, 363, 366, 1751, 1762, 1768], "promis": 34, "sign": [34, 41, 61, 62, 148, 149, 185, 186, 317, 318, 361, 366], "pursuit": 34, "unif": [34, 36, 363, 1758, 1768], "clearli": [34, 40, 42, 347, 356, 357, 1766], "lot": [34, 35, 345, 353, 357, 378, 1761], "thought": [34, 41, 42, 351, 1760], "care": [34, 42, 357, 359, 366], "attent": [34, 42, 341], "gone": [34, 360], "simplifi": [34, 349, 355, 361, 362, 365, 1758, 1760, 1761, 1762, 1765, 1768, 1769], "compat": [34, 44, 47, 48, 61, 62, 148, 149, 152, 153, 158, 159, 164, 165, 166, 167, 170, 175, 176, 185, 186, 317, 318, 321, 322, 327, 328, 333, 334, 335, 336, 342, 351, 355, 356, 358, 361, 378, 1752], "excit": [34, 36, 339, 1752], "complianc": 34, "hope": [34, 378, 1768], "due": [34, 37, 41, 340, 354, 355, 1762], "suit": [34, 41, 339, 340, 344, 357, 364, 377, 1751, 1762, 1768], "some": [34, 35, 40, 41, 42, 173, 174, 311, 312, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 377, 378, 1751, 1752, 1758, 1759, 1761, 1762, 1763, 1768, 1769], "motiv": [34, 363], "great": [34, 35, 42, 357, 361, 363, 1768], "convinc": 34, "celebr": 34, "encourag": [34, 377, 378], "foundat": [34, 1765], "mai": [35, 39, 40, 41, 42, 61, 62, 110, 111, 162, 163, 183, 184, 185, 186, 331, 332, 340, 343, 345, 354, 355, 357, 362, 363, 365, 403, 414, 1769], "ask": [35, 40, 41, 347, 361, 363, 378], "perfectli": 35, "happi": [35, 41, 378], "abund": 35, "better": [35, 37, 339, 355, 356, 358, 359, 360, 363, 364, 365, 1765], "ll": [35, 36, 41, 42, 347, 354, 364], "give": [35, 37, 41, 42, 339, 342, 347, 348, 351, 1762, 1766], "two": [35, 40, 41, 44, 47, 48, 55, 56, 124, 125, 148, 149, 170, 175, 176, 293, 294, 317, 318, 340, 341, 345, 347, 348, 355, 357, 359, 360, 364, 366, 394, 399, 403, 406, 407, 409, 427, 428, 431, 441, 442, 443, 1752, 1759, 1767], "streamlin": [35, 1765], "workflow": [35, 40, 42, 342, 344, 345, 355, 364, 376, 1751, 1752, 1761, 1768, 1769], "save": [35, 37, 173, 174, 350, 357, 378, 1761], "week": [35, 42, 1752], "let": [35, 37, 140, 141, 164, 165, 309, 310, 343, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 1752, 1769], "sai": [35, 41, 353, 363], "deepmind": 35, "releas": [35, 40, 41, 42, 345, 355, 358, 359, 378, 1752, 1762, 1768], "awesom": 35, "paper": 35, "love": 35, "choic": [35, 41, 164, 165, 333, 334, 354, 355, 364, 1762], "perceiverio": 35, "happen": [35, 41, 42, 357, 364, 403, 418], "slew": 35, "rush": 35, "f": [35, 36, 38, 42, 339, 343, 350, 361, 364, 1758], "g": [35, 36, 40, 41, 128, 129, 156, 157, 325, 326, 339, 340, 343, 357, 361, 378, 448, 449, 450, 1751, 1758], "inevit": [35, 1763], "deviat": [35, 154, 155, 156, 157, 323, 324, 325, 326, 340], "often": [35, 39, 340, 349, 350, 351, 352, 355, 357, 378, 1763, 1766, 1769], "erron": 35, "train": [35, 142, 143, 311, 312, 343, 346, 352, 364, 365, 366, 376, 377, 378, 1751, 1752, 1760, 1761, 1766, 1768, 1769], "poor": 35, "converg": 35, "perform": [35, 142, 143, 164, 165, 166, 167, 309, 310, 333, 334, 335, 336, 341, 342, 343, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 364, 378, 1759, 1762, 1763, 1764, 1765, 1766, 1767, 1769], "issu": [35, 36, 39, 40, 340, 342, 345, 347, 349, 355, 357, 361, 365, 378], "etc": [35, 40, 41, 42, 55, 56, 156, 157, 168, 169, 309, 310, 325, 326, 337, 338, 340, 341, 343, 344, 345, 347, 349, 351, 355, 356, 357, 358, 361, 363, 364, 378, 448, 449, 451, 1751, 1760, 1762, 1768], "publish": [35, 378], "manag": [35, 36, 354, 378, 1764, 1766], "get": [35, 36, 39, 40, 41, 61, 62, 173, 174, 339, 344, 345, 346, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 1751, 1762, 1768], "work": [35, 39, 40, 41, 42, 339, 340, 343, 345, 346, 347, 349, 355, 356, 357, 358, 360, 361, 363, 365, 366, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769], "repositori": [35, 37, 38, 41, 42, 339, 340, 344, 350], "pull": [35, 36, 37, 38, 40, 41, 340, 347, 358, 359, 378], "request": [35, 36, 40, 347, 358, 359], "confus": [35, 345, 349, 354, 359, 1751], "do": [35, 40, 41, 42, 140, 141, 142, 143, 173, 174, 311, 312, 340, 341, 342, 343, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 358, 359, 361, 363, 364, 365, 366, 378, 1751, 1763, 1768, 1769], "don": [35, 40, 41, 42, 168, 169, 337, 338, 345, 357, 365, 378], "expect": [35, 42, 345, 349, 357, 378, 1752], "codebas": [35, 36, 339, 345, 354, 357, 358, 360, 1752], "total": [35, 36, 42, 164, 165, 170, 173, 174, 175, 176, 333, 334, 345, 346, 347, 357, 359, 364, 365, 378], "hour": [35, 344], "spent": 35, "spin": 35, "off": [35, 41, 360, 1768], "test": [35, 39, 40, 61, 62, 166, 167, 185, 186, 335, 336, 339, 345, 347, 349, 350, 353, 355, 358, 378, 403, 410, 411, 1762], "discuss": [35, 41, 42, 345, 346, 354, 355, 357, 359, 362, 363, 364, 378, 1752, 1758, 1763], "error": [35, 39, 41, 42, 61, 62, 173, 174, 185, 186, 341, 342, 344, 345, 346, 347, 349, 350, 351, 355, 357, 358, 363, 378, 1762], "iter": [35, 49, 50, 51, 52, 54, 140, 141, 168, 169, 170, 173, 174, 175, 176, 309, 310, 337, 338, 343, 361, 364, 431, 439, 440, 441], "address": [35, 40, 42, 340, 341, 361, 1758, 1760, 1762, 1768], "sake": 35, "singl": [35, 40, 41, 42, 110, 111, 156, 157, 173, 174, 185, 186, 325, 326, 340, 343, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 364, 365, 366, 378, 403, 409, 418, 448, 449], "multipl": [35, 42, 110, 111, 154, 155, 164, 165, 166, 167, 173, 174, 185, 186, 273, 274, 279, 280, 309, 310, 311, 312, 317, 318, 321, 322, 323, 324, 333, 334, 335, 336, 342, 343, 347, 349, 352, 354, 359, 361, 378, 403, 412, 1760, 1761, 1762, 1769], "line": [35, 41, 340, 341, 347, 350, 353, 357, 359, 362, 363, 364, 365, 376, 1752, 1765], "convert": [35, 40, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 177, 178, 185, 186, 341, 353, 357, 361, 378, 379, 389, 1751, 1760, 1761, 1768], "directli": [35, 42, 340, 341, 343, 344, 345, 346, 348, 352, 353, 354, 355, 356, 358, 359, 361, 363, 365, 366, 377, 378, 1766, 1767, 1768], "graph": [35, 142, 143, 343, 352, 355, 359, 362, 378, 1751, 1758, 1762, 1765], "guarante": [35, 341, 378], "turn": [35, 41, 343, 347, 355, 357], "4": [35, 38, 40, 41, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 156, 157, 160, 161, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 342, 343, 347, 357, 361, 363, 364, 365, 366, 394, 396, 399, 403, 404, 405, 406, 407, 408, 412, 413, 415, 417, 418, 421, 422, 424, 425, 427, 428, 429, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 461, 462, 1752, 1762, 1768, 1769], "step": [35, 37, 38, 40, 41, 42, 124, 125, 142, 143, 179, 180, 293, 294, 311, 312, 341, 342, 343, 345, 346, 347, 355, 357, 361, 364, 365, 366, 377, 431, 435, 1752, 1762], "take": [35, 36, 40, 41, 42, 164, 165, 287, 288, 343, 344, 345, 346, 347, 348, 354, 355, 356, 357, 359, 361, 363, 365, 366, 378, 1752, 1759, 1760, 1768], "few": [35, 39, 40, 42, 343, 345, 346, 351, 352, 354, 357, 359, 361, 362, 363, 364, 365, 376, 1752, 1762, 1764], "second": [35, 41, 44, 47, 48, 61, 62, 110, 111, 142, 143, 148, 149, 156, 157, 160, 161, 170, 175, 176, 185, 186, 279, 280, 289, 290, 311, 312, 317, 318, 329, 330, 340, 345, 347, 354, 355, 357, 363, 394, 399, 403, 406, 407, 408, 409, 412, 413, 427, 429, 431, 442, 1767], "automat": [35, 40, 41, 42, 339, 343, 344, 345, 350, 352, 359, 360, 362, 365, 366, 1751, 1752, 1762, 1765, 1769], "convers": [35, 40, 50, 51, 52, 53, 54, 61, 62, 103, 178, 272, 353, 360, 362, 366, 377, 378, 1751, 1752, 1761, 1768], "everyon": [35, 36, 42, 378], "regardless": [35, 36, 173, 174, 345, 363, 366], "wouldn": 35, "nice": [35, 357, 1762], "write": [35, 38, 39, 40, 42, 45, 46, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 339, 340, 342, 345, 347, 348, 352, 354, 355, 356, 358, 361, 363, 366, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 437, 438, 441, 442, 443, 448, 449, 450, 451, 454, 455, 461, 462, 1762, 1769], "onc": [35, 40, 41, 42, 156, 157, 325, 326, 340, 343, 345, 346, 347, 355, 357, 359, 361, 364, 378], "know": [35, 42, 356, 357, 358, 1763], "among": [35, 173, 174, 357, 359, 1762], "frantic": 35, "port": 35, "lucid": 35, "honk": 35, "improv": [35, 42, 345, 351, 352, 359, 361, 1751, 1760, 1762, 1764, 1765], "understand": [35, 37, 38, 39, 40, 41, 42, 339, 340, 347, 348, 351, 356, 359, 360, 1758, 1768], "pattern": [35, 140, 141, 309, 310, 345, 348], "hasn": 35, "chang": [35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 342, 343, 344, 345, 347, 348, 355, 357, 358, 359, 361, 365, 378, 1752, 1765, 1768], "now": [35, 38, 41, 340, 342, 343, 345, 350, 351, 353, 355, 357, 358, 359, 363, 364, 366, 377, 378, 1762], "spend": [35, 1762], "torchvis": 35, "probabl": [35, 156, 157, 325, 326, 357], "sonnet": 35, "about": [35, 39, 40, 41, 42, 340, 344, 345, 351, 357, 358, 359, 360, 361, 363, 364, 365, 366, 378, 1763, 1764, 1767], "next": [35, 37, 40, 41, 42, 342, 347, 348, 353, 355, 358, 362, 363, 364, 1752, 1762, 1764], "everyth": [35, 40, 42, 347, 355, 356, 357, 358, 362, 378], "zero": [35, 55, 56, 57, 58, 61, 62, 124, 125, 142, 143, 148, 149, 158, 159, 164, 165, 166, 167, 179, 180, 181, 182, 185, 186, 293, 294, 305, 306, 311, 312, 317, 318, 325, 326, 327, 328, 333, 334, 335, 336, 341, 343, 345, 346, 347, 351, 353, 361, 364, 365, 403, 414, 415, 416, 417, 431, 435, 438, 441, 1752, 1761], "need": [35, 37, 38, 40, 41, 42, 140, 141, 152, 153, 309, 310, 321, 322, 340, 341, 343, 345, 347, 348, 349, 352, 354, 355, 356, 358, 359, 361, 363, 364, 377, 378, 1758, 1762, 1763, 1764, 1768], "said": 35, "high": [35, 40, 156, 157, 325, 326, 355, 359, 364, 1751, 1758, 1759, 1760, 1761, 1762, 1766, 1768, 1769], "level": [35, 36, 40, 42, 343, 352, 355, 359, 360, 361, 364, 365, 366, 378, 1751, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1766, 1767, 1768, 1769], "optim": [35, 142, 143, 311, 312, 354, 362, 364, 366, 377, 1752, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1769], "trainer": [35, 376, 378, 1752, 1769], "statu": [35, 40, 344], "quo": 35, "kera": [35, 1768], "dopamin": 35, "ignit": 35, "catalyst": 35, "lightn": 35, "fastai": 35, "haiku": [35, 366, 1762], "flax": [35, 366, 378, 1762], "trax": [35, 366], "objax": [35, 366], "idea": [35, 37, 355, 358, 362, 377, 1761], "fulli": [35, 341, 345, 351, 354, 359, 361, 362, 363, 364, 365, 366, 378, 1760, 1761, 1762, 1768, 1769], "offer": [35, 41, 355, 365, 1762, 1768, 1769], "strongli": [36, 41, 1768, 1769], "welcom": [36, 41, 42], "absolut": [36, 41, 61, 62, 110, 111, 148, 149, 173, 174, 185, 186, 279, 280, 317, 318, 359, 403, 409], "skill": [36, 1764], "whether": [36, 40, 41, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 140, 141, 142, 143, 152, 153, 156, 157, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 343, 345, 347, 351, 354, 355, 357, 358, 359, 403, 409, 414], "veteran": 36, "beginn": [36, 1762], "aspect": [36, 355, 364, 1752, 1762], "guid": [36, 40, 41, 42, 350, 1752, 1768], "through": [36, 39, 40, 42, 339, 342, 343, 347, 352, 353, 354, 355, 356, 357, 359, 360, 361, 364, 365, 366, 377, 1760, 1762, 1763, 1764], "journei": [36, 1752], "inclus": [36, 342, 354, 355, 359], "big": [36, 378, 1762], "team": [36, 40, 41, 42, 355, 1764], "board": 36, "contributor": [36, 41, 42, 355, 360, 1752, 1762], "split": [36, 42, 152, 153, 173, 174, 321, 322, 360, 361, 378, 1752, 1769], "section": [36, 37, 39, 40, 42, 339, 341, 342, 343, 344, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 1758, 1765, 1768], "below": [36, 38, 40, 41, 55, 56, 333, 334, 339, 343, 344, 345, 346, 347, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 377, 394, 399, 1752, 1758, 1760, 1765, 1767], "best": [36, 39, 40, 41, 42, 339, 345, 350, 357, 358, 1765, 1766], "go": [36, 37, 40, 41, 42, 339, 342, 345, 347, 355, 356, 358, 360, 364, 378, 1758, 1762, 1763, 1767, 1769], "start": [36, 37, 38, 40, 41, 42, 173, 174, 179, 180, 339, 344, 345, 347, 348, 351, 355, 357, 359, 360, 361, 363, 364, 365, 377, 378, 431, 432, 1762, 1768], "finish": [36, 40, 41, 339, 1752], "dive": [36, 39, 40, 42, 343, 345, 356, 360, 363, 364, 378, 1752, 1768], "right": [36, 41, 42, 148, 149, 170, 173, 174, 175, 176, 317, 318, 339, 347, 359, 364, 431, 433], "environ": [36, 37, 38, 42, 377, 1762, 1764], "basic": [36, 38, 40, 347], "fork": [36, 41, 340], "doc": [36, 39, 40, 347, 348, 351, 356, 357, 361, 364, 365, 394, 399, 1752], "document": [36, 39, 42, 345, 347, 355, 356, 357, 364, 366], "local": [36, 37, 38, 41, 340, 352], "task": [36, 42, 355, 356, 377, 1752, 1762, 1768, 1769], "help": [36, 37, 40, 41, 341, 342, 343, 345, 347, 353, 357, 358, 359, 363, 364, 365, 376, 1751, 1752, 1758, 1762, 1764, 1768], "appli": [36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 363, 364, 365, 366, 376, 378, 1751, 1752, 1763], "resourc": [36, 40], "video": [36, 41, 42, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 1760], "contribut": [37, 39, 40, 41, 42, 361, 1766], "toward": [37, 41, 152, 153, 321, 322, 358, 361, 431, 442, 1758, 1762], "requir": [37, 38, 40, 41, 110, 111, 279, 280, 341, 344, 345, 346, 347, 348, 349, 351, 353, 355, 356, 357, 358, 359, 361, 363, 378, 403, 414, 431, 441, 1762, 1768], "slightli": [37, 343, 355, 361, 365], "more": [37, 39, 40, 42, 124, 125, 152, 153, 160, 161, 293, 294, 321, 322, 329, 330, 339, 340, 341, 342, 343, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 377, 378, 431, 442, 1752, 1760, 1761, 1762, 1763, 1764, 1765, 1768, 1769], "complex": [37, 40, 345, 347, 355, 359, 364, 365, 366, 378, 1751, 1758, 1760, 1762, 1764, 1768, 1769], "setup": [37, 41, 42], "alon": [37, 357], "instanc": [37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 345, 347, 348, 351, 352, 353, 354, 357, 364, 365, 366, 379, 389, 394, 399, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441, 1751, 1763], "mech": 37, "vision": [37, 376, 1752, 1758, 1768], "demo": [37, 377, 1752], "util": [37, 139, 167, 308, 336, 346, 349, 358, 1760, 1768, 1769], "thu": [37, 40, 349, 355], "relat": [37, 39, 41, 42, 350, 355, 357, 358, 359, 377, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769], "folder": [37, 38, 41, 42, 340, 352, 355, 357, 358], "To": [37, 38, 41, 340, 343, 345, 347, 349, 350, 352, 355, 356, 357, 358, 364, 365, 366, 1752], "grasp": [37, 355], "directori": [37, 38, 40, 41, 42, 344, 355, 357], "tree": [37, 38, 345], "place": [37, 39, 42, 49, 51, 54, 55, 56, 61, 62, 110, 111, 140, 141, 152, 153, 173, 174, 179, 180, 183, 184, 185, 186, 279, 280, 309, 310, 321, 322, 325, 326, 339, 340, 343, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 366, 394, 399, 403, 409, 414, 415, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441, 1751, 1764], "dir": [37, 364], "clone": [37, 38, 42], "mutual": [37, 343, 352], "git": [37, 39, 41, 42, 340, 357], "http": [37, 41, 61, 62, 185, 186, 311, 312, 340, 345, 348, 394, 399, 431, 432], "com": [37, 41, 340, 345], "unifyai": [37, 38, 41, 42], "venv": 37, "python3": [37, 38, 41, 42], "m": [37, 38, 41, 42, 44, 47, 48, 55, 56, 124, 125, 128, 129, 148, 149, 156, 157, 185, 186, 293, 294, 317, 318, 325, 326, 339, 361, 394, 399, 431, 433, 434, 442, 448, 449, 450], "ivy_dev": [37, 38, 41, 42], "activ": [37, 38, 41, 42, 46, 65, 140, 141, 168, 169, 172, 189, 337, 338, 358, 365, 1752, 1762, 1765], "window": [37, 38, 42, 118, 119, 146, 147, 273, 274, 287, 288, 315, 316, 394, 395, 396, 397, 398, 400, 421, 422, 423, 424, 425, 426, 1767], "script": [37, 38, 41, 42, 347, 361, 378, 1762], "bat": [37, 38, 41, 42], "mac": [37, 38, 41, 42], "linux": [37, 38, 41, 42, 1765, 1767], "bin": [37, 38, 41, 42, 340, 343], "instal": [37, 38, 41, 42, 342, 350, 377, 1752], "packag": [37, 38, 41, 350, 355, 378, 1762, 1764], "edit": [37, 40, 41, 42], "mode": [37, 41, 42, 124, 125, 148, 149, 173, 174, 293, 294, 317, 318, 343, 347, 359, 378, 431, 441, 1762, 1765], "cd": [37, 38, 41, 42], "pip": [37, 41, 377, 1752], "repeat": [37, 42, 140, 141, 152, 153, 309, 310, 321, 322, 341, 342, 347, 348, 350, 357], "note": [37, 40, 41, 42, 61, 62, 345, 347, 348, 355, 356, 357, 358, 394, 399], "link": [37, 40, 41, 344, 345, 355, 1758, 1760], "reflect": [37, 42, 341, 357, 431, 441], "immedi": [37, 359, 1752], "ivy_robot": [37, 377], "docker": [37, 39], "desktop": [37, 41], "imag": [37, 38, 41, 117, 118, 119, 145, 146, 147, 286, 287, 288, 314, 315, 316, 358, 361, 362, 364, 366, 377, 421, 422, 424, 425, 1752, 1762], "my": [37, 358], "mount": [37, 42], "run": [37, 38, 40, 41, 142, 143, 311, 312, 339, 342, 344, 347, 350, 351, 355, 356, 361, 362, 363, 364, 365, 366, 377, 378, 1760, 1762, 1763, 1764, 1765, 1767, 1768, 1769], "rm": [37, 42], "v": [37, 41, 42, 146, 147, 162, 163, 315, 316, 331, 332, 356, 361, 364, 365, 366, 1752], "pwd": 37, "volum": [37, 118, 119, 287, 288, 421, 423, 426], "rebuild": [37, 170, 173, 174, 175, 176], "after": [37, 38, 40, 41, 42, 142, 143, 154, 155, 173, 174, 311, 312, 323, 324, 340, 345, 347, 349, 351, 355, 357, 360, 431, 441, 1762], "everi": [37, 38, 40, 42, 55, 56, 140, 141, 309, 310, 340, 342, 343, 344, 345, 347, 351, 352, 353, 354, 355, 356, 357, 358, 361, 363, 365, 1762], "id": [37, 39, 41, 341, 343, 350], "pycharm": 37, "configur": [37, 38, 41, 42, 173, 174, 344, 345, 353], "part": [37, 42, 55, 56, 142, 143, 340, 352, 355, 357, 358, 359, 361, 362, 366, 377, 378, 394, 399, 431, 441, 1760, 1762, 1767, 1768, 1769], "vscode": [37, 41], "found": [37, 40, 41, 42, 170, 173, 174, 175, 176, 341, 342, 343, 345, 348, 350, 353, 354, 355, 359, 1764], "devcontain": 37, "extens": [37, 39, 41, 42, 61, 62, 185, 186, 348, 357, 427, 428, 431, 432, 1035, 1759, 1762, 1769], "remot": [37, 41, 340], "codespac": 37, "config": [37, 173, 174, 340, 364, 1763], "json": [37, 173, 174, 364], "good": [37, 38, 39, 40, 41, 42, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 362, 365], "feel": [37, 38, 40, 41, 42, 44, 170, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "free": [37, 38, 39, 40, 42, 44, 170, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 377, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "channel": [37, 38, 40, 41, 42, 44, 140, 141, 170, 309, 310, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "pre": [37, 40, 357, 366, 378, 1762], "commit": [37, 40, 340, 344, 347, 357], "_": [37, 38, 41, 61, 62, 185, 186, 311, 312, 348, 350, 354, 357, 364, 431, 432], "builder": [38, 376, 378, 1751, 1752], "dockerfil": [38, 41], "command": [38, 41, 340, 353, 1752], "maco": [38, 1767], "latest": [38, 40, 41, 42, 61, 62, 185, 186, 342, 344, 345, 348, 358, 378, 431, 432, 1767], "ubuntu": [38, 344], "uid": 38, "bash": [38, 42, 340], "root": [38, 41, 42, 61, 62, 185, 186, 355, 364], "both": [38, 42, 61, 62, 110, 111, 124, 125, 148, 149, 179, 180, 185, 186, 317, 318, 342, 343, 345, 346, 347, 348, 351, 352, 354, 355, 357, 359, 361, 363, 364, 365, 366, 377, 378, 403, 405, 409, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 435, 441, 1762, 1765, 1767, 1768, 1769], "termin": [38, 41, 42, 170, 173, 174, 175, 176, 343, 361, 364], "3": [38, 41, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 156, 157, 160, 161, 164, 165, 170, 171, 172, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 340, 342, 343, 345, 347, 357, 361, 363, 364, 365, 366, 394, 399, 400, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 450, 454, 455, 461, 462, 1752, 1769], "8": [38, 41, 44, 47, 48, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 134, 135, 140, 141, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 160, 161, 162, 163, 164, 165, 170, 175, 176, 185, 186, 279, 280, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 334, 343, 347, 357, 360, 364, 403, 404, 405, 409, 412, 415, 418, 421, 422, 423, 424, 425, 427, 429, 431, 432, 436, 443, 444, 454, 455, 1752], "built": [38, 41, 42, 343, 357, 362, 1751, 1761, 1762, 1766], "explicit": [38, 41, 343, 345, 354, 355, 361, 378, 1762], "cmd": [38, 41], "file": [38, 40, 41, 42, 173, 174, 340, 341, 342, 343, 344, 348, 350, 352, 355, 356, 357, 358, 361, 364, 1758, 1761, 1762, 1763], "abov": [38, 41, 42, 55, 56, 61, 62, 156, 157, 171, 172, 185, 186, 325, 326, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 357, 359, 361, 363, 364, 365, 366, 394, 399, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441, 1762, 1767], "OR": [38, 41, 42, 166, 167, 335, 336], "move": [38, 42, 124, 125, 183, 184, 293, 294, 358, 394, 399, 431, 438], "execut": [38, 41, 42, 343, 347, 354, 357, 359, 361, 363, 366, 378, 1751, 1758, 1762, 1763, 1764, 1765, 1766, 1768], "insid": [38, 41, 42, 343, 345, 353, 357, 358, 431, 443, 1768], "make_docs_without_dock": 38, "path": [38, 41, 354, 355, 356, 1762], "rel": [38, 42, 44, 47, 48, 110, 111, 142, 143, 148, 149, 152, 153, 162, 163, 179, 180, 279, 280, 311, 312, 317, 318, 321, 322, 331, 332, 356, 359, 403, 409, 1752, 1762, 1764], "assum": [38, 61, 62, 110, 111, 185, 186, 342, 345, 348, 356, 359, 363, 364, 378, 403, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441], "gener": [38, 40, 41, 42, 61, 62, 113, 141, 142, 143, 156, 157, 168, 169, 185, 186, 282, 310, 311, 312, 325, 326, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 360, 361, 363, 365, 366, 377, 378, 394, 396, 399, 431, 432, 439, 440, 448, 450, 1751, 1752, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768], "prefer": [38, 41, 343, 353, 355, 359, 1762], "browser": [38, 41], "affect": [38, 355], "page": [38, 41, 42, 344, 362, 363, 366, 376, 1752], "It": [38, 40, 41, 42, 45, 46, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 166, 167, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 287, 288, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 347, 348, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 403, 417, 421, 423, 426, 427, 428, 429, 431, 441, 442, 448, 449, 451, 1760, 1762, 1763, 1765, 1766, 1767, 1768, 1769], "synchron": [38, 344], "respons": [38, 42, 345], "rest": [38, 41, 344, 366, 1764], "remove_doc": 38, "privat": [38, 357], "access": [38, 40, 41, 42, 173, 174, 345, 355, 1762, 1764, 1766], "fulfil": [38, 360, 1752], "purpos": [38, 42, 341, 343, 344, 347, 349, 351, 352, 353, 355, 357, 359, 360, 363, 394, 399, 1751, 1752, 1761, 1763, 1766, 1767, 1768], "delet": [38, 42], "autogenerated_sourc": 38, "Then": [38, 40, 42, 353, 358, 378], "format": [38, 171, 172, 173, 174, 177, 178, 339, 345, 346, 347, 348, 349, 361, 363, 364, 1752, 1758, 1760, 1762, 1763], "png": [38, 364], "_imag": 38, "lastli": 38, "docstr": [38, 39, 40, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 350, 351, 352, 355, 358, 427, 428, 431, 432], "structur": [38, 42, 170, 173, 174, 175, 176, 341, 343, 352, 356, 358, 364, 365, 1761, 1762], "rst": [38, 456], "main": [38, 41, 55, 56, 148, 149, 317, 318, 343, 350, 353, 357, 394, 399, 427, 428, 1760, 1762, 1763, 1768], "submodul": [38, 40, 41, 42, 44, 170, 340, 344, 346, 352, 353, 357, 360, 361, 365, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1751, 1752, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "skip": [38, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 344, 353, 357], "read": [38, 40, 173, 174, 1752, 1762], "partial_sourc": 38, "conf": 38, "copi": [38, 42, 55, 56, 57, 58, 110, 111, 140, 141, 152, 153, 173, 174, 179, 180, 181, 182, 183, 184, 279, 280, 309, 310, 321, 322, 342, 345, 348, 355, 356, 361, 364, 377, 378, 403, 414, 454, 455], "5": [38, 41, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 124, 125, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 170, 171, 172, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 340, 342, 343, 347, 351, 356, 357, 363, 364, 365, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 417, 421, 422, 423, 424, 425, 426, 431, 432, 435, 436, 438, 441, 442, 443, 444, 461, 462], "create_rst_fil": 38, "filter": [38, 118, 119, 146, 147, 273, 274, 287, 288, 315, 316, 357, 394, 397, 398, 421, 423, 426], "recurs": [38, 41, 49, 50, 51, 52, 53, 54, 173, 174, 177, 178, 340, 343, 352, 365, 378], "repres": [38, 61, 62, 148, 149, 185, 186, 317, 318, 359, 363, 427, 429, 431, 441, 1759, 1760, 1763], "its": [38, 40, 41, 42, 49, 52, 54, 57, 58, 152, 153, 173, 174, 181, 182, 309, 310, 321, 322, 345, 348, 353, 355, 356, 357, 358, 359, 366, 378, 403, 418, 1751, 1761, 1762, 1768], "overal": [38, 343, 345, 346, 348, 366, 1758, 1760, 1761, 1762], "markup": 38, "6": [38, 44, 47, 48, 55, 56, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 156, 157, 162, 163, 164, 165, 170, 175, 176, 179, 180, 185, 186, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 342, 343, 347, 357, 359, 361, 363, 364, 365, 403, 404, 408, 413, 418, 421, 424, 427, 429, 431, 432, 436, 441, 442, 444, 454, 455, 461, 462], "extract": [38, 355, 358, 1758, 1762, 1763, 1768], "get_functions_and_class": 38, "doctr": 38, "7": [38, 42, 44, 45, 46, 47, 48, 61, 62, 110, 111, 118, 119, 124, 125, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 160, 161, 162, 163, 164, 165, 170, 175, 176, 183, 184, 185, 186, 279, 280, 287, 288, 293, 294, 297, 298, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 343, 347, 352, 354, 357, 394, 396, 398, 403, 404, 409, 421, 422, 423, 424, 431, 432, 436, 441, 442, 444, 461, 462], "readm": [38, 378], "module_nam": 38, "copy_readme_to_rst": 38, "tabl": [38, 345, 355, 1762], "content": [38, 40, 173, 174, 354, 361, 364], "toc": 38, "append": [38, 173, 174, 349, 357, 361, 364], "append_toctree_to_rst": 38, "9": [38, 44, 47, 48, 61, 62, 118, 119, 124, 125, 134, 135, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 156, 157, 162, 163, 164, 165, 170, 175, 176, 181, 182, 185, 186, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 309, 310, 311, 312, 315, 316, 317, 318, 321, 322, 325, 326, 329, 330, 331, 332, 333, 334, 343, 347, 357, 364, 365, 421, 422, 424, 425, 431, 432, 443, 454, 455, 1758], "index": [38, 55, 56, 140, 141, 158, 159, 160, 161, 162, 163, 173, 174, 179, 180, 309, 310, 327, 328, 329, 330, 331, 332, 343, 352, 356, 357, 363, 431, 439, 440, 1762], "create_index_rst": 38, "14": [38, 57, 58, 61, 62, 118, 119, 124, 125, 156, 157, 164, 165, 181, 182, 185, 186, 293, 294, 309, 310, 317, 318, 321, 322, 325, 326, 343, 347, 357, 421, 422, 426, 431, 432], "\u03c0": 38, "namespac": [38, 40, 345, 353, 355, 356, 358, 361, 366], "remov": [38, 40, 148, 149, 173, 174, 317, 318, 342, 345, 348, 352, 357, 359, 366, 1762], "resours": 39, "climb": 39, "steep": 39, "curv": 39, "respect": [39, 40, 42, 61, 62, 142, 143, 185, 186, 311, 312, 341, 343, 345, 347, 351, 355, 357, 358, 1758, 1768], "behaviour": [39, 40, 42, 339, 340, 341, 343, 345, 348, 349, 351, 354, 355, 357, 358, 363, 403, 414], "frontend": [39, 49, 52, 339, 345, 357, 358, 360, 362, 1751, 1762], "refer": [39, 40, 41, 42, 164, 165, 166, 167, 311, 312, 333, 334, 335, 336, 340, 345, 351, 352, 355, 356, 357, 378, 394, 399, 403, 416, 427, 428, 1751, 1762], "realpython": 39, "pyn": 39, "kind": [39, 124, 125, 355, 357, 359, 361, 378], "stack": [39, 44, 47, 48, 148, 149, 152, 153, 173, 174, 293, 294, 317, 318, 321, 322, 361, 431, 436, 444, 1752, 1758, 1760, 1767, 1768], "overflow": [39, 345], "platform": [39, 41, 1760, 1764, 1766], "sort": [39, 135, 163, 170, 173, 174, 175, 176, 304, 332, 358, 403, 418, 455], "inform": [39, 40, 41, 42, 142, 143, 311, 312, 340, 343, 349, 356, 357, 1765], "pilot": 39, "bit": [39, 40, 41, 343, 345, 347, 352, 361, 363, 1768], "thei": [39, 40, 42, 110, 111, 148, 149, 156, 157, 173, 174, 317, 318, 325, 326, 339, 340, 342, 343, 344, 345, 346, 347, 352, 353, 354, 355, 357, 358, 359, 361, 363, 364, 365, 366, 378, 403, 405, 418, 1752, 1759, 1762, 1764, 1765, 1768, 1769], "done": [39, 40, 41, 42, 340, 347, 350, 355, 357, 364, 1762], "faster": [39, 1751, 1764, 1767], "head": [39, 41, 1752], "stuck": [39, 40], "spell": 39, "check": [39, 40, 41, 42, 49, 50, 51, 52, 53, 54, 57, 58, 140, 141, 142, 143, 173, 174, 181, 182, 309, 310, 311, 312, 340, 343, 347, 349, 353, 355, 358, 360, 361, 363, 364, 365, 1752], "though": [39, 40, 42, 345, 348, 352, 355, 359, 364, 378], "sound": [39, 360], "odd": [39, 340, 431, 441], "peopl": [39, 41, 42, 339, 1762, 1764], "action": [39, 347, 357], "integr": [39, 41, 57, 58, 110, 111, 181, 182, 185, 186, 339, 403, 418, 1760, 1762, 1764, 1765, 1766], "keep": [39, 40, 41, 42, 152, 153, 173, 174, 321, 322, 340, 343, 344, 357, 358, 359, 364, 366], "explain": [40, 41, 42, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 1752, 1758, 1765, 1768], "frequent": [40, 42, 1762], "wherebi": [40, 1759], "outlin": [40, 41, 42, 339, 343, 345, 348, 352, 354, 355, 357], "broad": [40, 1764], "individu": [40, 42, 340, 344, 352, 354, 355, 1762, 1765, 1768, 1769], "sub": [40, 42, 152, 153, 170, 173, 174, 175, 176, 177, 178, 185, 186, 309, 310, 321, 322, 339, 343, 349, 355, 356, 357, 363, 364, 365, 1752, 1758], "distribut": [40, 128, 129, 150, 151, 156, 157, 297, 298, 319, 320, 325, 326, 346, 378, 448, 449, 450, 451, 1762, 1765], "across": [40, 158, 159, 173, 174, 309, 310, 327, 328, 340, 343, 345, 347, 349, 351, 352, 355, 357, 359, 1760, 1762, 1767], "todo": [40, 345, 355], "detail": [40, 42, 340, 342, 343, 344, 351, 352, 353, 355, 356, 357, 358, 361, 363, 364, 365, 1764, 1768], "select": [40, 41, 42, 164, 165, 333, 334, 354, 357, 361, 363, 366, 378, 1762, 1765, 1766], "alloc": [40, 42, 55, 56, 57, 58, 181, 182, 378], "describ": [40, 42, 344, 357, 361, 366, 1762], "explan": [40, 42, 343, 348, 351, 355, 363], "instead": [40, 41, 42, 61, 62, 185, 186, 340, 343, 345, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 361, 363, 364, 378, 1760, 1762, 1768, 1769], "focu": [40, 1760, 1761, 1764, 1769], "alwai": [40, 42, 57, 58, 142, 143, 152, 153, 181, 182, 311, 312, 321, 322, 341, 342, 343, 345, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 378, 403, 405], "NOT": 40, "pypi": [40, 41, 378], "instruct": [40, 41, 340, 1760, 1763, 1766, 1768], "static": [40, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 347, 348, 352, 353, 355, 378, 1761, 1762, 1763], "method": [40, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 345, 347, 348, 350, 351, 352, 353, 357, 358, 361, 362, 365, 366, 378, 1752, 1763, 1769], "revers": [40, 44, 47, 48, 124, 125, 140, 141, 148, 149, 164, 165, 170, 175, 176, 293, 294, 317, 318, 333, 334, 343, 345, 347, 348, 355, 359, 366, 378, 431, 433, 434], "familiar": [40, 41], "yourself": [40, 42, 355, 357, 359, 377], "hypothesi": [40, 42, 340, 353], "fail": [40, 41, 42, 340, 344, 345, 347, 350, 355], "els": [40, 140, 141, 156, 157, 325, 326, 342, 345, 349, 352, 354, 355, 356, 357, 358, 359, 361, 363, 365, 366, 378, 448, 449, 1763], "cover": [40, 340, 347, 348, 352, 353, 357, 359, 360], "lambda": [40, 357, 361, 364], "direct": [40, 355, 356, 359, 365, 366, 377, 431, 433, 434, 442, 1758, 1762, 1763, 1766], "bind": [40, 343, 1761, 1762], "defin": [40, 41, 55, 56, 124, 125, 140, 141, 148, 149, 179, 180, 293, 294, 309, 310, 317, 318, 344, 345, 348, 351, 355, 356, 357, 358, 363, 365, 378, 394, 395, 397, 398, 399, 403, 414, 431, 441, 442, 1751, 1759, 1760, 1761, 1762, 1763, 1766, 1768, 1769], "def": [40, 41, 343, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 456, 1752], "special": [40, 44, 47, 48, 164, 165, 170, 175, 176, 317, 318, 340, 341, 347, 348, 349, 351, 354, 358, 403, 417, 1762, 1763, 1764], "sure": [40, 41, 42, 340, 344, 355, 356, 359], "aforement": 40, "correct": [40, 42, 164, 165, 333, 334, 339, 343, 345, 346, 350, 351, 352, 356, 357, 1752], "categori": [40, 340, 341, 343, 345, 355, 358, 360, 1752], "parent": [40, 363], "arraywithelementwis": [40, 44, 47, 48, 61, 341, 363], "containerwithmanipul": [40, 170, 175, 176, 321], "hint": [40, 61, 62, 185, 186, 341, 348, 351, 352, 354, 355, 358, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441], "add": [40, 41, 42, 44, 47, 48, 61, 62, 154, 155, 168, 169, 170, 173, 174, 175, 176, 185, 186, 323, 324, 337, 338, 339, 340, 341, 342, 343, 345, 348, 351, 352, 354, 355, 357, 358, 359, 361, 363, 378, 1752, 1758, 1760, 1762], "thorough": [40, 348, 351, 357], "ensur": [40, 41, 42, 140, 141, 341, 345, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 1762], "produc": [40, 273, 274, 345, 357, 358, 394, 396, 1763, 1765], "comment": [40, 41, 42, 340, 345, 350, 355], "add_reformatting_checklist_": 40, "category_nam": [40, 345, 346, 348, 351, 352], "pr": [40, 42, 340, 355], "belong": [40, 173, 174, 340, 365], "shown": [40, 42, 168, 169, 173, 174, 337, 338, 344, 345, 347, 350, 351, 355, 356, 357, 358, 361, 363, 378], "trigger": [40, 344], "autom": [40, 357, 1751, 1752, 1764], "bot": 40, "proper": 40, "markdown": 40, "text": [40, 42, 347, 348], "might": [40, 41, 42, 140, 141, 345, 347, 350, 353, 354, 355, 357, 358, 359, 361, 363, 364, 1751], "moment": [40, 142, 143, 311, 312, 342, 378], "patient": [40, 41], "modifi": [40, 41, 42, 124, 125, 173, 174, 293, 294, 340, 342, 345, 346, 348, 350, 352, 358, 361, 431, 437, 441], "item": [40, 49, 54, 140, 141, 168, 169, 173, 174, 279, 280, 309, 310, 343, 345, 361, 363, 364, 366, 1752], "symbol": [40, 41, 1762, 1763], "emoji": 40, "within": [40, 42, 49, 52, 53, 54, 355, 356, 357, 365, 378, 403, 409, 1758, 1759, 1763], "legend": 40, "mark": [40, 42, 357], "review": [40, 42, 347, 355, 358], "checkbox": [40, 41], "proce": [40, 41], "elabor": 40, "struggl": 40, "assigne": 40, "author": [40, 42, 1752, 1760, 1764], "later": [40, 173, 174, 357, 1762], "status": 40, "manual": [40, 41, 42, 344, 355, 357, 365], "refrain": 40, "transpil": [40, 355, 360, 361, 362, 1751, 1752, 1762, 1768, 1769], "locat": [40, 42, 342, 346, 355, 356, 357, 358, 1760], "subsect": [40, 42, 340, 344], "verifi": [40, 345, 346, 355, 357, 358], "miss": [40, 41, 341, 343, 347, 350, 357], "simpler": [40, 42, 355, 1763, 1769], "titl": [40, 42, 355, 1752], "label": [40, 42, 150, 151, 319, 320, 344, 355, 360, 361, 362, 366, 1762], "suggest": [40, 41, 42, 345, 355, 357, 358], "simpli": [40, 42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 345, 346, 347, 348, 351, 352, 354, 355, 356, 357, 359, 361, 365, 366, 378, 1751, 1763, 1768], "leav": [40, 49, 52, 53, 54, 170, 175, 176, 177, 178, 293, 294, 309, 310, 321, 322, 333, 334, 343, 345, 347, 348, 351, 352, 354, 357, 364, 365], "assess": [40, 359], "appropri": [40, 42, 158, 159, 168, 169, 327, 328, 337, 338, 353, 357, 403, 409], "wait": [40, 42, 170, 173, 174, 175, 176, 355], "composit": [40, 339, 341, 342, 343, 345, 354, 356, 357, 359, 361, 365, 366, 378, 403, 418, 427, 429, 1751, 1763], "temporari": [40, 345], "merg": [40, 42, 340, 355, 1762], "close": [40, 41, 42, 348, 355, 357, 359, 1762], "normal": [40, 154, 155, 156, 157, 323, 324, 325, 326, 364, 403, 417, 1760], "altern": [40, 41, 110, 111, 279, 280, 354, 355, 364, 403, 409, 415, 1765], "composition": [40, 354, 355], "choos": [40, 41, 42, 158, 159, 183, 184, 362, 366, 1769], "decid": [40, 41, 173, 174, 345, 359], "addit": [40, 41, 42, 140, 141, 154, 155, 183, 184, 309, 310, 323, 324, 343, 345, 347, 348, 355, 357, 358, 359, 363, 364, 366, 1762, 1763, 1764, 1768], "potenti": [40, 41, 42, 345, 355, 360, 1765], "pend": 40, "show": [40, 41, 42, 173, 174, 344, 347, 354, 355, 357, 377, 378, 1752, 1762], "helpfulli": [40, 359, 1760], "prevent": [40, 42, 142, 143, 311, 312, 345, 350, 354, 355, 358, 359], "problemat": [40, 41], "unimpl": 40, "final": [40, 42, 140, 141, 309, 310, 341, 345, 347, 348, 350, 352, 354, 355, 359, 360, 364, 1758, 1768], "issue_link": 40, "chosen": 40, "correctli": [40, 41, 42, 148, 149, 158, 159, 317, 318, 327, 328, 343, 345, 347, 349, 350, 351, 354, 356, 357, 359, 365, 378], "alias": [40, 355, 356], "detect": [40, 41, 173, 174, 342, 343, 350, 357, 364, 365], "alias_nam": 40, "function_nam": 40, "notic": [40, 359], "alia": 40, "alreadi": [40, 41, 42, 173, 174, 342, 343, 345, 351, 355, 359, 378, 431, 441, 1752, 1762, 1764, 1769], "push": [40, 42, 340, 350, 1768], "liner": 40, "meanwhil": 40, "reselect": 40, "too": [40, 41, 42, 340, 344, 345, 350, 378], "placement": 40, "categoris": [40, 340, 355], "faithfulli": 40, "descript": [40, 61, 62, 185, 186, 317, 318, 348, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441], "inner": [40, 148, 149, 179, 180, 317, 318, 354], "fall": [40, 42, 345, 360, 1752], "under": [40, 41, 42, 339, 340, 343, 347, 348, 352, 355, 357, 359, 360, 361, 364, 366, 378, 1762, 1765, 1769], "linalg": [40, 121, 149, 290, 318, 354, 428, 429, 1752], "match": [40, 57, 58, 173, 174, 181, 182, 343, 347, 1763, 1768], "creation_routin": [40, 356], "fft": [40, 1762], "indexing_routin": 40, "logic": [40, 166, 167, 335, 336, 341, 345, 346, 349, 353, 355, 357, 363, 1752], "ma": 40, "manipulation_routin": 40, "mathematical_funct": [40, 355], "matrix": [40, 44, 47, 48, 140, 141, 146, 147, 148, 149, 309, 310, 315, 316, 317, 318, 345, 355, 394, 399, 1760, 1762], "random": [40, 129, 157, 173, 174, 298, 326, 346, 357, 358, 366, 377, 449, 450, 451, 1752, 1762], "sorting_searching_count": 40, "statist": [40, 137, 165, 306, 334, 337, 338, 345, 355, 357, 358, 431, 441, 462, 1762], "ufunc": 40, "hierarchi": [40, 173, 174, 364, 1758, 1768], "decomposit": [40, 1769], "matrix_and_vector_product": 40, "matrix_eigenvalu": 40, "norms_and_other_numb": 40, "solving_equations_and_inverting_matric": 40, "product": [40, 61, 62, 148, 149, 164, 165, 185, 186, 289, 290, 317, 318, 333, 334, 361, 427, 429, 1762, 1764], "seem": [40, 41, 359, 365, 366, 378, 1762], "func": [40, 173, 174, 347], "gleam": 40, "yet": [40, 41, 378], "uncom": 40, "test_numpy_inn": 40, "mirror": [40, 431, 441, 1762], "correspond": [40, 42, 57, 58, 61, 62, 110, 111, 124, 125, 140, 141, 152, 153, 164, 165, 170, 173, 174, 175, 176, 181, 182, 185, 186, 279, 280, 289, 290, 293, 294, 321, 322, 333, 334, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 355, 357, 359, 361, 403, 405, 410, 411, 418, 431, 433, 434, 1762], "ivy_test": [40, 41, 42, 340, 344, 356], "test_ivi": [40, 41, 42, 344, 356, 357], "test_frontend": [40, 356], "unsur": [40, 357], "put": [40, 357, 378, 1768], "explor": [40, 41, 42, 345, 359, 362, 366, 377, 1762, 1765], "outer": [40, 148, 149, 317, 318], "confirm": 40, "ve": [40, 41, 42, 156, 157, 325, 326, 359, 360, 363, 1751, 1752], "empti": [40, 41, 140, 141, 173, 174, 309, 310, 341, 345, 346, 431, 441], "along": [40, 45, 46, 110, 111, 124, 125, 136, 137, 140, 141, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 185, 186, 279, 280, 293, 294, 305, 306, 309, 310, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 347, 354, 358, 359, 361, 403, 415, 418, 431, 433, 434, 441, 443, 454, 455, 461, 462, 1762], "backend_nam": [40, 342, 345, 346, 348, 351, 352, 353], "relevant_submodul": 40, "sometim": [40, 41, 42, 345, 355, 357, 358, 359], "behav": [40, 340, 349, 354, 356, 363, 1763], "helper": [40, 344, 345, 349, 364, 1751], "recreat": 40, "defer": [40, 341, 343, 345, 346, 352, 353, 354, 355, 357, 1768], "clearer": [40, 349, 364], "mind": [40, 341, 343, 357], "posit": [40, 42, 49, 50, 51, 61, 62, 110, 111, 124, 125, 140, 141, 148, 149, 152, 153, 185, 186, 279, 280, 293, 294, 309, 310, 317, 318, 321, 322, 340, 343, 353, 355, 356, 357, 358, 364, 377, 394, 399, 403, 409, 411, 414, 427, 428, 431, 438, 1764], "keyword": [40, 49, 50, 51, 170, 173, 174, 175, 176, 343, 345, 346, 353, 354, 355, 356, 357, 358, 364, 403, 414, 431, 441], "strategi": [40, 353, 356], "draw": [40, 156, 157, 325, 326, 356, 357, 448, 450], "realli": [41, 343, 378, 1767, 1768], "gh": 41, "your_fold": 41, "cours": [41, 42, 340, 347, 358, 359, 364, 378, 1767, 1768], "whatev": [41, 343, 378], "elig": 41, "student": 41, "licenc": 41, "remind": 41, "account": [41, 348, 355], "licens": [41, 1765], "expir": 41, "abl": [41, 42, 173, 174, 340, 345, 352, 354, 355, 359, 361, 366, 1765, 1768], "profession": 41, "trial": 41, "jetbrain": 41, "valid": [41, 118, 119, 146, 147, 166, 167, 287, 288, 315, 316, 335, 336, 342, 345, 347, 356, 357, 421, 422, 423, 424, 425, 426, 1763], "bui": [41, 1768], "paid": 41, "pace": 41, "align": [41, 42, 120, 121, 173, 174, 289, 290, 361, 363, 427, 428, 1751, 1768], "stabl": [41, 140, 141, 162, 163, 309, 310, 331, 332, 342, 345, 361, 378, 394, 399], "mayb": [41, 49, 52, 53, 54, 361, 363], "person": [41, 42], "experi": [41, 357, 362, 364, 378], "avoid": [41, 42, 342, 343, 345, 350, 353, 355, 357, 358, 1762], "abil": [41, 359, 362, 378, 1762], "certain": [41, 42, 173, 174, 340, 345, 357, 359, 378, 1766], "perhap": [41, 363, 364, 365, 378, 1768], "track": [41, 42, 1762], "click": [41, 42, 344, 348, 362, 1752], "icon": [41, 42], "side": [41, 42, 162, 163, 331, 332], "left": [41, 42, 110, 111, 136, 137, 148, 149, 158, 159, 162, 163, 279, 280, 305, 306, 317, 318, 327, 328, 331, 332, 345, 347, 403, 415, 431, 433, 461, 462], "panel": 41, "drop": [41, 378], "down": [41, 357, 431, 434, 1751, 1762, 1768], "builtin": [41, 363, 365], "virtualenv": 41, "o": [41, 339, 361], "tick": [41, 42, 344], "test_array_api": [41, 42, 340, 357], "r": [41, 42, 173, 174, 339], "txt": [41, 340, 358], "visual": [41, 355, 378, 1762, 1764, 1767], "mitig": [41, 1768], "conflict": [41, 42, 355, 364], "particular": [41, 42, 340, 342, 345, 347, 353, 354, 355, 356, 357, 358, 359, 1758, 1762, 1768], "system": [41, 42, 342, 345, 378, 1760, 1762, 1765, 1767, 1769], "wsl": 41, "powershel": 41, "admin": 41, "visit": [41, 42, 356], "deploy": [41, 1761, 1764, 1765, 1768, 1769], "top": [41, 42, 124, 125, 152, 153, 293, 294, 345, 355, 357, 364, 365, 431, 443, 1762, 1766], "press": [41, 42, 364, 1752], "ok": 41, "debug": [41, 42, 343, 344, 357, 359, 364, 1762], "dialog": 41, "invalid": [41, 166, 167, 335, 336, 345, 350], "caus": [41, 42, 340, 342, 343, 344, 345, 347, 354, 357, 378], "earlier": [41, 42], "necessari": [41, 42, 152, 153, 321, 322, 342, 343, 347, 353, 354, 355, 357, 359], "virtualis": 41, "sudo": 41, "apt": 41, "ca": 41, "certif": 41, "curl": 41, "gnupg": 41, "lsb": 41, "mkdir": 41, "p": [41, 42, 140, 141, 309, 310, 317, 318, 339, 403, 404], "keyr": 41, "fssl": 41, "download": [41, 357], "gpg": 41, "dearmor": 41, "echo": 41, "deb": 41, "arch": 41, "dpkg": 41, "architectur": [41, 366, 378, 1760, 1761, 1762, 1765, 1766, 1767], "lsb_releas": 41, "tee": 41, "dev": [41, 59, 60, 173, 174, 183, 184, 346, 352, 363, 365], "null": 41, "ce": 41, "cli": 41, "containerd": 41, "io": 41, "compos": [41, 343, 357, 378, 1762, 1769], "plugin": 41, "systemctl": 41, "permiss": 41, "post": [41, 154, 155, 323, 324, 366], "coupl": [41, 341, 363, 365, 1762], "unit": [41, 45, 46, 171, 172, 340, 345, 355, 356, 357, 378, 1763, 1766], "test_ab": [41, 357], "context": [41, 42, 146, 147, 315, 316, 347], "menu": 41, "editor": 41, "green": [41, 42, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 1812, 1813], "appear": [41, 42, 359, 431, 433, 434], "pytest": [41, 42, 340, 357], "keyboard": 41, "shortcut": [41, 431, 441], "displai": [41, 343, 357, 364], "screenshot": 41, "ctrl": [41, 42], "shift": [41, 42, 152, 153, 170, 175, 176, 179, 180, 321, 322, 347, 351, 394, 399], "bottom": [41, 1768], "screen": [41, 173, 174, 364], "elsewher": 41, "test_elementwis": 41, "tab": [41, 344, 364, 1752], "progress": [41, 42, 366], "bar": 41, "shell": [41, 42], "run_tests_cli": [41, 340], "run_ivy_core_test": 41, "run_ivy_nn_test": 41, "run_ivy_stateful_test": 41, "run_test": 41, "sh": [41, 42, 340], "test_depend": 41, "test_ivy_cor": 41, "test_ivy_nn": 41, "test_ivy_st": 41, "test_": [41, 340, 344, 356], "test_funct": [41, 42, 344, 356, 357], "test_cor": [41, 42, 344, 356], "wish": [41, 355], "ivy_cor": 41, "ivy_nn": 41, "ivy_st": 41, "dure": [41, 142, 143, 164, 165, 173, 174, 183, 184, 311, 312, 333, 334, 343, 345, 346, 349, 352, 353, 354, 355, 356, 357, 359, 378, 1762, 1763, 1768], "simplest": [41, 347, 357, 359], "valu": [41, 42, 55, 56, 57, 58, 61, 62, 110, 111, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 185, 186, 279, 280, 287, 288, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 363, 378, 394, 399, 403, 409, 410, 411, 414, 417, 418, 427, 428, 431, 435, 439, 441, 443, 448, 449, 451, 456, 459, 1762, 1763], "becaus": [41, 42, 341, 342, 343, 345, 346, 348, 351, 352, 353, 354, 355, 356, 357, 359, 361, 365, 366, 378, 1762, 1765, 1768], "header": [41, 42], "summari": [41, 42, 173, 174, 357], "recommend": [41, 42, 342], "advanc": [41, 1761], "q": [41, 42, 315, 316, 339, 378], "fix": [41, 42, 344, 345, 357, 358], "arrow": 41, "button": [41, 42], "funcion": 41, "target": [41, 339, 356, 358, 360, 364, 365, 366, 1752, 1758, 1760, 1761, 1762, 1765, 1767, 1768], "test_stat": [41, 344], "test_submodule_nam": 41, "test_function_nam": 41, "debugg": 41, "studio": 41, "easiest": 41, "effici": [41, 42, 343, 350, 352, 353, 354, 357, 361, 364, 378, 1762, 1764, 1765], "afterward": [41, 364], "background": [41, 1762, 1764], "restart": 41, "corner": [41, 42, 357], "overlap": [41, 358, 359, 1763], "test_file_path": 41, "test_fn_nam": 41, "enter": [41, 42, 341, 345, 346, 351, 353], "forward": [41, 342, 348, 357, 358, 359, 366, 377, 378, 1762, 1763], "slash": 41, "regular": [41, 42, 355, 356, 1762], "headach": 41, "arm": [41, 42], "m1": 41, "featur": [41, 42, 351, 355, 358, 359, 364, 378, 1752, 1762, 1763, 1764, 1768], "vm": 41, "azur": 41, "cloud": [41, 377, 1764], "mean": [41, 42, 140, 141, 146, 147, 156, 157, 164, 165, 173, 174, 309, 310, 315, 316, 325, 326, 333, 334, 337, 338, 339, 340, 342, 343, 345, 346, 347, 352, 354, 355, 357, 358, 359, 361, 363, 364, 365, 366, 377, 378, 427, 428, 431, 441, 448, 449, 1751, 1752, 1759, 1762], "longer": [41, 345, 353, 354, 357, 1762], "worri": 41, "agnost": [41, 341, 351, 361, 363, 366, 378, 1752, 1768, 1769], "usual": [41, 340, 355, 357, 359], "favourit": 41, "theme": 41, "unsupport": [41, 350, 355], "old": [41, 173, 174, 342, 354], "slow": 41, "ipad": 41, "long": [41, 42, 344, 345, 347, 361, 1762], "cool": [41, 358], "sever": [41, 42, 358, 378, 1760, 1766], "requisit": 41, "pane": [41, 42], "readi": 41, "begin": [41, 340, 356, 431, 441], "dropdown": 41, "master": [41, 42, 340, 358, 1762], "view": [41, 42, 124, 125, 293, 294, 344, 431, 438, 442, 1762], "box": 41, "upto": [41, 42], "15": [41, 61, 62, 110, 111, 118, 119, 124, 125, 156, 157, 164, 165, 170, 175, 176, 179, 180, 185, 186, 279, 280, 293, 294, 309, 310, 315, 316, 321, 322, 325, 326, 333, 334, 347, 403, 412, 421, 422, 426, 431, 432, 1765], "minut": 41, "launch": 41, "12": [41, 61, 62, 110, 111, 118, 119, 124, 125, 140, 141, 156, 157, 164, 165, 185, 186, 273, 274, 287, 288, 293, 294, 309, 310, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 333, 334, 342, 343, 345, 347, 358, 394, 397, 398, 421, 422, 425, 431, 432], "output": [41, 42, 45, 46, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 165, 166, 167, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 339, 340, 341, 343, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 361, 363, 365, 366, 378, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 437, 438, 441, 442, 443, 448, 449, 450, 451, 454, 455, 461, 462, 1751, 1752, 1763], "That": [41, 42, 357, 363, 364, 365, 1763], "approach": [41, 42, 343, 345, 352, 353, 357, 359, 363, 364, 378, 1759, 1766, 1768], "colour": 41, "applic": [41, 345, 346, 353, 365, 1759, 1760, 1762, 1764, 1766, 1768], "chanc": 41, "troubleshoot": 41, "ever": 41, "64": [41, 61, 62, 110, 111, 146, 147, 170, 175, 176, 185, 186, 279, 280, 309, 310, 315, 316, 317, 318, 325, 326, 364, 365, 403, 404, 405, 1752, 1767], "usr": 41, "flask": 41, "toolbar": [41, 42], "_array_modul": [41, 340], "array_api_test": [41, 42, 340], "refresh": 41, "conftest": 41, "nutshel": [41, 351], "hook": 41, "lint": 41, "accept": [41, 42, 49, 61, 62, 177, 185, 186, 341, 343, 346, 347, 348, 351, 352, 353, 354, 356, 357, 358, 363, 394, 399, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441, 1751, 1752, 1760], "attempt": [41, 350, 378], "succe": 41, "properli": [41, 339, 349, 357], "server": [42, 1762], "suitabl": [42, 273, 274, 343, 358, 394, 397, 398, 1762], "quick": [42, 339, 356, 365], "tendenc": 42, "land": 42, "end": [42, 342, 354, 358, 359, 360, 377, 378, 431, 432, 441, 1752, 1760, 1765], "world": [42, 1764], "come": [42, 355, 358, 359, 365, 376, 1751, 1752, 1762], "fly": [42, 1762], "hard": [42, 357, 363, 1762], "receiv": [42, 345, 346, 357], "internship": 42, "bug": [42, 355, 357, 358], "serv": [42, 341, 343, 351, 352, 357, 359, 360, 1751, 1752, 1760], "suspect": 42, "observ": [42, 349, 361, 1764], "act": [42, 347, 378, 1769], "placehold": [42, 341, 350, 351, 1751], "ii": 42, "iii": 42, "issue_numb": 42, "No": [42, 1762], "soon": [42, 345, 376, 378, 1752], "partial": [42, 173, 174], "solut": [42, 343, 345, 357, 359, 1760, 1764], "respond": 42, "shape": [42, 44, 45, 46, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 134, 135, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 293, 294, 297, 298, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 345, 346, 347, 348, 351, 354, 355, 356, 357, 358, 361, 363, 364, 365, 366, 394, 397, 398, 399, 403, 405, 417, 421, 423, 426, 427, 428, 429, 431, 438, 440, 441, 442, 443, 448, 449, 450, 451, 454, 455, 1752], "dai": [42, 344], "warn": 42, "without": [42, 173, 174, 341, 343, 345, 346, 347, 349, 350, 351, 352, 356, 357, 358, 359, 363, 364, 365, 377, 378, 1759, 1762, 1763, 1764, 1768], "likewis": [42, 343, 345, 348, 351, 352, 355, 359, 364, 1768], "freed": 42, "flag": [42, 142, 143, 173, 174, 311, 312, 345, 353, 354, 355, 357], "remain": [42, 152, 153, 158, 159, 321, 322, 327, 328, 344, 347, 358, 359, 378], "short": [42, 345, 355, 358, 361, 365], "basi": [42, 340, 364], "situat": [42, 366], "upon": [42, 347, 354, 357, 359, 378, 1761, 1762], "period": [42, 273, 274, 358, 394, 395, 396, 397, 398], "unabl": [42, 359], "obvious": 42, "never": [42, 152, 153, 321, 322, 345, 355, 357, 359], "qualiti": 42, "hypothet": 42, "frustrat": 42, "delai": 42, "busi": 42, "fine": [42, 345, 347, 355, 363, 366, 1768], "inact": 42, "me": 42, "unfairli": 42, "definit": [42, 110, 111, 148, 149, 185, 186, 317, 318, 345, 352, 363, 403, 418], "investig": 42, "maximum": [42, 61, 62, 110, 111, 140, 141, 142, 143, 152, 153, 158, 159, 170, 173, 174, 175, 176, 185, 186, 279, 280, 309, 310, 311, 312, 321, 322, 327, 328, 347, 364, 403, 406, 431, 441, 1752, 1769], "incomplet": 42, "three": [42, 343, 347, 355, 357, 359, 360, 361, 1752, 1763, 1768], "per": [42, 118, 119, 146, 147, 287, 288, 315, 316, 355, 357, 364, 421, 422, 423, 424, 425, 426], "self": [42, 44, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 273, 274, 279, 280, 287, 288, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 343, 349, 355, 356, 361, 363, 364, 365, 366, 1752], "assign": [42, 342, 345, 350, 354, 363], "sequenc": [42, 124, 125, 128, 129, 152, 153, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 297, 298, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 345, 346, 347, 349, 357, 358, 361, 366, 377, 403, 418, 431, 436, 438, 444, 448, 450, 1765], "regist": 42, "wherea": [42, 341, 343, 345, 346, 347, 351, 352, 357, 358, 366, 1759], "primarili": [42, 343, 1762], "invit": 42, "roadmap": [42, 344, 1752], "mainli": [42, 339, 362, 364, 1751, 1762], "extend": [42, 342, 348, 351, 355, 358, 378, 431, 441, 1759, 1762, 1768], "ideal": [42, 354, 364], "Such": [42, 357], "easier": [42, 341, 345, 355, 358, 1751, 1762, 1764], "interv": [42, 156, 157, 166, 167, 325, 326, 335, 336], "forth": 42, "rare": [42, 346, 378, 1767], "scenario": 42, "someon": [42, 378], "someth": [42, 358, 364, 365, 378, 1768], "unfortun": 42, "redund": [42, 345, 349, 355, 359], "behind": [42, 142, 143, 339, 351, 357, 360, 362], "well": [42, 309, 310, 344, 345, 354, 355, 356, 357, 365, 366, 377, 1761, 1762, 1763, 1767], "practic": [42, 344, 1765], "separ": [42, 341, 343, 357, 361, 363, 364, 1763, 1767], "branch": [42, 340, 378, 1762], "role": [42, 355, 362, 1763, 1765, 1769], "kept": [42, 170, 173, 174, 175, 176, 354, 358], "date": [42, 358], "upstream": [42, 340], "complic": [42, 356, 361], "merge_with_upstream": 42, "name_of_your_branch": 42, "resolv": [42, 340, 345, 361], "abort": 42, "tediou": [42, 347], "resolut": 42, "stash": 42, "reinstat": 42, "fetch": [42, 340], "uncommit": 42, "unstag": 42, "untrack": 42, "comprehens": [42, 340], "atlassian": 42, "tutori": [42, 355], "wrote": 42, "piec": [42, 341, 352, 353, 361, 1758, 1760], "tag": 42, "navig": [42, 339], "blame": 42, "revis": 42, "log": [42, 61, 62, 148, 149, 185, 186, 317, 318, 343, 344, 347, 352, 354, 355, 357, 359, 361, 364, 1752], "eg": 42, "16": [42, 44, 47, 48, 61, 62, 110, 111, 118, 119, 124, 125, 146, 147, 148, 149, 156, 157, 164, 165, 170, 175, 176, 181, 182, 185, 186, 287, 288, 293, 294, 309, 310, 315, 316, 321, 322, 325, 326, 347, 364, 403, 405, 421, 424, 425, 431, 432], "past": [42, 356, 1762], "l": [42, 148, 149, 185, 186, 317, 318, 339], "filepath": [42, 173, 174, 340], "grep": 42, "commit_id": 42, "handi": 42, "histori": 42, "toggl": 42, "vertic": [42, 431, 444], "highlight": [42, 347], "previou": [42, 142, 143, 311, 312, 340, 351, 355, 357, 359, 366, 378, 1765], "whenev": [42, 344, 345, 349, 353, 357, 364], "think": [42, 347, 1763], "gain": [42, 340, 360, 365, 1762], "quit": [42, 341, 347, 348, 352, 353, 357, 359, 1762, 1768], "newli": [42, 57, 58, 181, 182, 354, 357], "cannot": [42, 340, 342, 345, 355, 361, 366, 1768], "least": [42, 110, 111, 124, 125, 279, 280, 293, 294, 341, 345, 347, 352, 357, 403, 412, 431, 433], "approv": 42, "hash": [42, 364], "cancel": 42, "speedup": 42, "unavail": 42, "tickbox": 42, "lower": [42, 55, 56, 61, 62, 148, 149, 156, 157, 185, 186, 317, 318, 325, 326, 347, 355, 357, 359, 361, 378, 1751, 1758, 1759, 1760, 1762, 1763, 1768, 1769], "span": [42, 359, 1760, 1768], "intent": [42, 354], "larg": [42, 110, 111, 279, 280, 364, 403, 414, 1762], "discourag": 42, "philosophi": 42, "increment": [42, 140, 141, 309, 310, 358, 1762], "valuabl": 42, "infrequ": 42, "earli": [42, 1752, 1762], "wast": 42, "spot": [42, 347, 352], "mistak": [42, 350], "propos": [42, 355, 359, 1762], "mountain": 42, "around": [42, 170, 173, 174, 175, 176, 341, 351, 352, 355, 358, 363, 378, 431, 441, 1751, 1760, 1762, 1769], "advoc": [42, 378], "style": [42, 431, 441, 1762], "were": [42, 173, 174, 181, 182, 345, 350, 357, 358, 359, 361, 1762, 1763, 1768], "actual": [42, 339, 352, 354, 357, 359, 360, 365, 378, 1763, 1768], "aim": [42, 340, 357, 360, 1760, 1762, 1765], "session": [42, 1762], "block": [42, 343, 349, 350, 352, 357, 360, 362, 366, 378, 427, 429, 1751, 1752, 1767, 1769], "smaller": [42, 152, 153, 321, 322, 361, 403, 409], "exact": [42, 171, 172, 173, 174, 340, 347, 361], "beauti": 42, "particularli": [42, 364, 378, 1760], "concern": [42, 339, 343, 347, 354, 359, 360, 1768], "difficult": [42, 340, 345, 357, 378], "undo": 42, "stress": 42, "frequenc": [42, 140, 141, 309, 310, 344], "advantag": [42, 354, 355, 1762], "nifti": 42, "reassur": 42, "isol": [42, 1763, 1768], "fact": [42, 355, 357, 361, 364], "local_path_to_ivi": 42, "overwrit": [42, 173, 174, 354, 355, 361], "subfold": [42, 356, 357, 358], "wide": [42, 357, 1760, 1762], "via": [42, 340, 343, 345, 346, 354, 355, 358, 359, 361, 363, 364, 377, 1762], "dep": 42, "fresh": 42, "arsen": 42, "declar": 42, "exec": 42, "rf": 42, "cp": 42, "ivy_contain": 42, "test_imag": 42, "test_random_crop": 42, "test_creation_funct": 42, "test_arang": 42, "variou": [42, 340, 345, 348, 349, 351, 353, 356, 357, 377, 1751, 1758, 1760, 1761, 1762, 1765, 1768], "cpu": [42, 55, 56, 59, 60, 156, 157, 183, 184, 309, 310, 325, 326, 346, 355, 378, 448, 449, 451, 1760, 1762, 1765, 1767], "gpu": [42, 346, 363, 1760, 1762, 1765, 1766, 1767], "combin": [42, 170, 173, 174, 175, 176, 341, 343, 345, 347, 352, 357, 359, 366, 1762], "num": [42, 179, 180, 351, 361], "integ": [42, 44, 47, 48, 61, 62, 128, 129, 152, 153, 156, 157, 164, 165, 166, 167, 170, 173, 174, 175, 176, 185, 186, 297, 298, 317, 318, 321, 322, 325, 326, 333, 334, 335, 336, 343, 345, 353, 356, 357, 361, 363, 403, 405, 431, 441, 448, 449, 450, 451], "greater": [42, 44, 47, 48, 61, 62, 110, 111, 156, 157, 170, 175, 176, 185, 186, 325, 326, 356, 403, 418], "prompt": [42, 1752], "whole": 42, "multipli": [42, 61, 62, 164, 165, 185, 186, 341, 342, 343, 347], "cursor": 42, "alt": 42, "j": [42, 55, 56, 148, 149, 179, 180, 185, 186, 317, 318, 339, 1758], "blog": 42, "breakpoint": 42, "gutter": 42, "caret": 42, "f8": 42, "f9": 42, "Into": 42, "f7": 42, "smart": 42, "interest": 42, "consol": [42, 357, 363], "store": [42, 57, 58, 140, 141, 142, 143, 148, 149, 152, 153, 173, 174, 181, 182, 309, 310, 311, 312, 317, 318, 321, 322, 341, 342, 343, 348, 355, 361, 363, 364, 365, 1751], "variabl": [42, 140, 141, 142, 143, 154, 155, 173, 174, 309, 310, 311, 312, 323, 324, 342, 345, 348, 350, 351, 354, 357, 358, 361, 364, 365, 366, 378, 448, 450, 1752, 1763], "fragment": [42, 1758, 1760, 1764], "except": [42, 140, 141, 152, 153, 156, 157, 166, 167, 173, 174, 309, 310, 317, 318, 325, 326, 335, 336, 339, 340, 341, 345, 348, 350, 351, 354, 355, 359, 361, 363, 378, 448, 449], "pychram": 42, "depth": [42, 55, 56, 179, 180, 364, 365, 366, 377], "dummi": 42, "wherein": [42, 353, 357], "evalu": [42, 61, 62, 173, 174, 185, 186, 293, 294, 343, 345, 359, 431, 437, 1762], "failur": [42, 340, 344, 357], "arraywithactiv": [44, 45, 47, 48, 363], "arraywithcr": [44, 47, 48, 55, 363], "arraywithdatatyp": [44, 47, 48, 57, 363], "arraywithdevic": [44, 47, 48, 59, 363], "arraywithgener": [44, 47, 48, 140, 363], "arraywithgradi": [44, 47, 48, 142, 363], "arraywithimag": [44, 47, 48, 144, 363], "arraywithlay": [44, 47, 48, 146, 363], "arraywithlinalg": [44, 47, 48, 148, 363], "arraywithloss": [44, 47, 48, 150, 363], "arraywithmanipul": [44, 47, 48, 152, 363], "arraywithnorm": [44, 47, 48, 154, 363], "arraywithrandom": [44, 47, 48, 156, 363], "arraywithsearch": [44, 47, 48, 158, 363], "arraywithset": [44, 47, 48, 160, 363], "arraywithsort": [44, 47, 48, 162, 363], "arraywithstatist": [44, 47, 48, 164, 363], "arraywithutil": [44, 47, 48, 166, 363], "arraywithactivationsexperiment": [44, 47, 48, 64], "arraywithconversionsexperiment": [44, 47, 48, 102], "arraywithcreationexperiment": [44, 47, 48, 104], "arraywithdata_typeexperiment": [44, 47, 48, 106], "arraywithdeviceexperiment": [44, 47, 48, 108], "arraywithelementwiseexperiment": [44, 47, 48, 110], "arraywithgeneralexperiment": [44, 47, 48, 112], "arraywithgradientsexperiment": [44, 47, 48, 114], "arraywithimageexperiment": [44, 47, 48, 116], "arraywithlayersexperiment": [44, 47, 48, 118], "arraywithlinalgexperiment": [44, 47, 48, 120], "arraywithlossesexperiment": [44, 47, 48, 122], "arraywithmanipulationexperiment": [44, 47, 48, 124], "arraywithnormsexperiment": [44, 47, 48, 126], "arraywithrandomexperiment": [44, 47, 48, 128], "arraywithsearchingexperiment": [44, 47, 48, 130], "arraywithsetexperiment": [44, 47, 48, 132], "arraywithsortingexperiment": [44, 47, 48, 134], "arraywithstatisticalexperiment": [44, 47, 48, 136], "arraywithutilityexperiment": [44, 47, 48, 138], "properti": [44, 47, 48, 173, 174, 343, 347, 352, 356, 357, 363, 364, 365, 456, 1768], "transpos": [44, 47, 48, 148, 149, 173, 174, 317, 318, 354, 363, 366, 1752], "dimension": [44, 47, 48, 110, 111, 148, 149, 152, 153, 158, 159, 164, 165, 166, 167, 173, 174, 185, 186, 317, 318, 321, 322, 333, 334, 335, 336, 361, 394, 399, 403, 418, 427, 428, 431, 432, 1759, 1762, 1769], "whose": [44, 47, 48, 55, 56, 61, 62, 110, 111, 124, 125, 140, 141, 148, 149, 152, 153, 160, 161, 179, 180, 185, 186, 279, 280, 293, 294, 309, 310, 317, 318, 321, 322, 329, 330, 333, 334, 348, 357, 431, 438], "dimens": [44, 47, 48, 55, 56, 110, 111, 118, 119, 124, 125, 136, 137, 140, 141, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 170, 173, 174, 175, 176, 179, 180, 279, 280, 287, 288, 293, 294, 305, 306, 309, 310, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 347, 349, 356, 357, 359, 361, 364, 403, 415, 421, 422, 423, 424, 425, 426, 431, 432, 442, 448, 450, 461, 462], "ax": [44, 45, 46, 47, 48, 110, 111, 124, 125, 136, 137, 148, 149, 152, 153, 158, 159, 164, 165, 166, 167, 171, 172, 279, 280, 293, 294, 305, 306, 317, 318, 321, 322, 327, 328, 333, 334, 335, 336, 345, 347, 357, 358, 361, 363, 403, 415, 431, 438, 441, 442, 461, 462], "permut": [44, 47, 48], "__add__": [44, 47, 48, 170, 175, 176, 341, 343, 347, 348, 351, 355, 363], "variant": [44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 347, 348, 359], "wrap": [44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 357, 361, 363, 366, 378, 379, 389, 431, 441, 1751, 1758, 1762, 1763, 1768, 1769], "minim": [44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 354, 356, 359, 361, 1760, 1768], "input": [44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 343, 345, 346, 347, 348, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 378, 379, 389, 394, 400, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 441, 442, 443, 448, 449, 451, 454, 455, 461, 462, 1763, 1766], "numer": [44, 47, 48, 57, 58, 61, 62, 140, 141, 148, 149, 156, 157, 158, 159, 170, 175, 176, 181, 182, 185, 186, 309, 310, 317, 318, 325, 326, 327, 328, 331, 332, 345, 353, 355, 356, 357, 358, 359, 361, 365, 448, 449, 1759, 1762, 1768], "broadcast": [44, 45, 46, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 165, 166, 167, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 287, 288, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 343, 345, 347, 348, 357, 358, 361, 403, 405, 417, 421, 423, 426, 427, 428, 429, 431, 441, 442, 443, 448, 449, 451], "element": [44, 45, 46, 47, 48, 55, 56, 61, 62, 110, 111, 124, 125, 136, 137, 140, 141, 148, 149, 152, 153, 156, 157, 158, 159, 160, 161, 164, 165, 170, 171, 172, 173, 174, 175, 176, 179, 180, 185, 186, 279, 280, 289, 290, 293, 294, 305, 306, 309, 310, 317, 318, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 348, 356, 357, 359, 361, 394, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 431, 432, 433, 434, 435, 437, 443, 461, 462, 1766], "wise": [44, 45, 46, 47, 48, 61, 62, 110, 111, 124, 125, 148, 149, 170, 171, 172, 175, 176, 185, 186, 279, 280, 289, 290, 293, 294, 317, 318, 359, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 416, 431, 435, 436, 437, 444], "sum": [44, 47, 48, 61, 62, 110, 111, 140, 141, 148, 149, 150, 151, 164, 165, 170, 173, 174, 175, 176, 185, 186, 279, 280, 309, 310, 317, 318, 319, 320, 333, 334, 343, 345, 352, 354, 361, 403, 415], "promot": [44, 47, 48, 57, 58, 61, 62, 110, 111, 148, 149, 170, 175, 176, 181, 182, 185, 186, 279, 280, 317, 318, 331, 332, 340, 348, 349, 352, 403, 405, 417], "y": [44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 289, 290, 293, 294, 303, 304, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 342, 343, 347, 355, 356, 358, 359, 361, 363, 403, 417, 418, 431, 436, 441, 443, 444], "z": [44, 47, 48, 61, 62, 140, 141, 148, 149, 150, 151, 156, 157, 170, 175, 176, 185, 186, 309, 310, 317, 318, 319, 320, 325, 326, 342, 343, 347, 361, 363], "__le__": [44, 47, 48], "equal": [44, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 140, 141, 148, 149, 152, 153, 156, 157, 162, 163, 164, 165, 170, 173, 174, 175, 176, 181, 182, 185, 186, 279, 280, 309, 310, 317, 318, 321, 322, 325, 326, 331, 332, 343, 345, 347, 349, 403, 409], "bool": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 110, 111, 124, 125, 136, 137, 140, 141, 142, 143, 148, 149, 152, 153, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 293, 294, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 345, 347, 349, 354, 355, 357, 358, 361, 366, 394, 395, 396, 397, 398, 403, 409, 410, 411, 414, 415, 431, 443, 461, 462], "__radd__": [44, 47, 48, 170, 175, 176, 347, 348, 355], "__rrshift__": [44, 47, 48, 170, 175, 176], "bitwise_right_shift": [44, 47, 48, 61, 62, 185, 186], "32": [44, 47, 48, 61, 62, 110, 111, 118, 119, 156, 157, 170, 175, 176, 185, 186, 279, 280, 325, 326, 364, 403, 404, 421, 422, 423, 1767], "__rshift__": [44, 47, 48, 170, 175, 176], "__rsub__": [44, 47, 48, 170, 175, 176], "subtract": [44, 47, 48, 61, 62, 170, 175, 176, 185, 186, 341, 343, 347, 431, 441], "__sub__": [44, 47, 48, 170, 175, 176, 341, 343, 347, 351, 363], "nativearrai": [44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 61, 62, 124, 125, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 303, 304, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 341, 343, 347, 349, 350, 351, 352, 353, 354, 355, 358, 361, 363, 379, 389, 394, 395, 398, 400, 403, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 441, 442, 443, 448, 449, 450, 451, 454, 455, 1751], "resid": [44, 47, 48, 355, 361, 365], "mt": [44, 47, 48, 363], "matric": [44, 47, 48, 55, 56, 148, 149, 317, 318, 377, 1762], "n": [44, 47, 48, 55, 56, 110, 111, 128, 129, 148, 149, 152, 153, 156, 157, 158, 159, 164, 165, 166, 167, 185, 186, 317, 318, 321, 322, 325, 326, 327, 328, 333, 334, 335, 336, 339, 357, 394, 399, 403, 418, 448, 449, 450], "ndim": [44, 47, 48, 158, 159, 327, 328, 343, 357], "int": [44, 45, 46, 47, 48, 55, 56, 57, 58, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 171, 172, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 293, 294, 297, 298, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 343, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 366, 394, 395, 396, 397, 398, 399, 403, 408, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 431, 432, 438, 441, 442, 443, 448, 449, 450, 451, 461, 462], "size": [44, 47, 48, 110, 111, 118, 119, 124, 125, 128, 129, 134, 135, 136, 137, 140, 141, 148, 149, 152, 153, 156, 157, 158, 159, 170, 173, 174, 175, 176, 273, 274, 279, 280, 287, 288, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 317, 318, 321, 322, 325, 326, 327, 328, 356, 357, 364, 394, 396, 400, 403, 415, 421, 422, 424, 425, 431, 443, 448, 450, 454, 455, 461, 462], "overview": [44, 170, 357, 360, 377, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "forum": [44, 170, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 466, 504, 506, 507, 589, 680, 714, 1035, 1036, 1230, 1282, 1480, 1481, 1497, 1578, 1582, 1600, 1605, 1632, 1679, 1695, 1740, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1771, 1774, 1776, 1786, 1798, 1801, 1803, 1809], "abc": [45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 173, 174, 363], "gelu": [45, 46, 171, 172], "approxim": [45, 46, 110, 111, 148, 149, 171, 172, 185, 186, 317, 318, 348, 355, 403, 417, 418], "185": [45, 46, 171, 172], "046": [45, 46, 171, 172], "leaky_relu": [45, 46, 171, 172, 356, 1752], "alpha": [45, 46, 61, 62, 128, 129, 156, 157, 171, 172, 185, 186, 273, 274, 297, 298, 325, 326, 355, 356, 394, 395, 448, 449, 450, 451], "39": [45, 46, 61, 62, 118, 119, 156, 157, 171, 172, 185, 186, 311, 312, 325, 326, 421, 422, 426], "85": [45, 46, 156, 157, 171, 172, 185, 186, 311, 312, 315, 316, 325, 326], "17": [45, 46, 118, 119, 124, 125, 170, 171, 172, 175, 176, 185, 186, 287, 288, 309, 310, 311, 312, 315, 316, 325, 326, 343, 347, 421, 424, 425, 431, 432], "log_softmax": [45, 46, 171, 172], "98": [45, 46, 142, 143, 156, 157, 171, 172, 185, 186, 311, 312, 325, 326], "37": [45, 46, 61, 62, 171, 172, 185, 186, 287, 288], "35": [45, 46, 146, 147, 171, 172, 185, 186, 287, 288, 315, 316, 317, 318, 325, 326], "0719": [45, 46, 171, 172], "62": [45, 46, 171, 172, 279, 280, 323, 324, 325, 326], "221": [45, 46], "82": [45, 46, 61, 62, 311, 312, 325, 326], "relu": [45, 46, 168, 169, 171, 172, 356, 364, 365, 1752], "sigmoid": [45, 46, 171, 172, 361, 364, 365, 1752], "269": [45, 46, 171, 172], "731": [45, 46, 171, 172], "881": [45, 46, 61, 62, 171, 172, 185, 186], "softmax": [45, 46, 168, 169, 171, 172, 1752], "union": [45, 46, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 110, 111, 118, 119, 124, 125, 128, 129, 136, 137, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 343, 345, 346, 347, 349, 350, 351, 352, 354, 355, 358, 359, 361, 366, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 441, 442, 443, 448, 449, 450, 451, 454, 455, 461, 462], "422": [45, 46, 171, 172], "155": [45, 46, 171, 172, 315, 316], "softplu": [45, 46, 171, 172, 359, 1752], "beta": [45, 46, 154, 155, 156, 157, 171, 172, 273, 274, 323, 324, 325, 326, 359, 394, 395, 397, 398, 448, 450, 451], "threshold": [45, 46, 61, 62, 171, 172, 185, 186, 359], "3461": [45, 46, 171, 172], "6491": [45, 46, 171, 172], "22": [45, 46, 61, 62, 118, 119, 140, 141, 156, 157, 164, 165, 171, 172, 287, 288, 309, 310, 315, 316, 325, 326, 343, 421, 424, 425, 426], "09": [45, 46, 311, 312, 325, 326], "31": [45, 46, 61, 62, 118, 119, 185, 186, 309, 310, 315, 316, 325, 326, 364, 421, 423], "55": [45, 46, 325, 326], "13": [45, 46, 61, 62, 124, 125, 146, 147, 156, 157, 164, 165, 185, 186, 279, 280, 287, 288, 293, 294, 309, 310, 311, 312, 315, 316, 321, 322, 325, 326, 333, 334, 343, 347, 357, 431, 432], "collect": [49, 173, 174, 177, 349, 356, 357, 377, 1760, 1762, 1765], "args_to_ivi": 49, "include_deriv": [49, 50, 51, 52, 53, 54, 177, 178], "nest": [49, 50, 51, 52, 53, 54, 170, 173, 174, 175, 176, 177, 178, 341, 343, 352, 358, 364, 365, 378, 1751, 1762], "unchang": [49, 50, 51, 52, 53, 54, 431, 432], "deriv": [49, 50, 51, 52, 53, 54, 55, 56, 142, 143, 177, 178, 179, 180, 273, 274, 311, 312, 345, 346, 363, 365, 394, 397], "tupl": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 110, 111, 118, 119, 124, 125, 128, 129, 136, 137, 140, 141, 146, 147, 148, 149, 152, 153, 158, 159, 160, 161, 164, 165, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 287, 288, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 345, 350, 351, 356, 357, 361, 364, 365, 378, 394, 399, 403, 404, 405, 408, 410, 411, 413, 415, 416, 421, 422, 423, 424, 425, 426, 431, 440, 441, 442, 443, 448, 450, 454, 455, 461, 462], "kei": [49, 50, 51, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 350, 356, 357, 364, 1762, 1765, 1769], "word": [49, 50, 51, 343, 355, 1751], "args_to_n": [49, 354], "cont_inplac": [49, 51, 54], "ignore_frontend_arrai": [49, 51], "to_ivi": [49, 177, 178], "leaf": [49, 52, 53, 173, 174, 333, 334, 343, 352, 364], "travers": [49, 52, 53, 54, 177, 178, 343, 345, 361], "lowest": [49, 52, 53, 54, 156, 157, 177, 178, 325, 326, 352, 378, 1751, 1759, 1763, 1767], "to_ivy_arrai": 49, "devicearraybas": [49, 53], "to_n": [49, 177, 178, 361], "asarrai": [55, 56, 140, 141, 309, 310, 353, 354], "boolean": [55, 56, 57, 58, 61, 62, 110, 111, 140, 141, 142, 143, 152, 153, 158, 159, 173, 174, 181, 182, 185, 186, 279, 280, 309, 310, 311, 312, 321, 322, 327, 328, 343, 355, 356, 357, 359, 403, 409, 410, 411], "nativedtyp": [55, 56, 57, 58, 110, 111, 128, 129, 156, 157, 158, 159, 164, 165, 179, 180, 273, 274, 279, 280, 297, 298, 325, 326, 327, 328, 333, 334, 345, 346, 351, 355, 358, 361, 394, 396, 397, 400, 403, 415, 448, 449, 450, 451], "datatyp": [55, 56, 173, 174], "nativedevic": [55, 56, 59, 60, 156, 157, 179, 180, 183, 184, 325, 326, 345, 346, 349, 351, 358, 394, 399, 448, 449, 451], "interpret": [55, 56, 344, 1763], "copy_arrai": [55, 56], "empty_lik": [55, 56, 179, 180, 359], "deafult": [55, 56, 158, 159, 327, 328], "uniniti": [55, 56], "from_dlpack": [55, 56, 179, 180], "full_lik": [55, 56, 179, 180, 358], "float": [55, 56, 57, 58, 61, 62, 110, 111, 128, 129, 140, 141, 142, 143, 148, 149, 150, 151, 154, 155, 156, 157, 164, 165, 171, 172, 179, 180, 181, 182, 185, 186, 273, 274, 279, 280, 297, 298, 309, 310, 311, 312, 317, 318, 319, 320, 323, 324, 325, 326, 333, 334, 340, 343, 345, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 361, 363, 365, 394, 395, 396, 397, 398, 403, 404, 405, 409, 410, 411, 413, 414, 416, 417, 418, 448, 449, 450, 451], "scalar": [55, 56, 61, 62, 110, 111, 124, 125, 140, 141, 171, 172, 179, 180, 185, 186, 309, 310, 317, 318, 345, 378, 403, 404, 405, 409, 416, 431, 435, 1762], "fill": [55, 56, 110, 111, 156, 157, 158, 159, 173, 174, 179, 180, 279, 280, 325, 326, 327, 328, 356, 403, 414, 448, 449, 451], "000123": [55, 56], "ones": [55, 56, 142, 143, 156, 157, 173, 174, 179, 180, 325, 326, 347, 351, 357, 363, 364, 1752, 1762], "meshgrid": [55, 56, 179, 180], "spars": [55, 56, 150, 151, 179, 180, 319, 320], "xy": [55, 56, 179, 180], "one_hot": [55, 56, 179, 180, 366, 1752], "on_valu": [55, 56, 179, 180], "off_valu": [55, 56, 179, 180], "scatter": [55, 56, 140, 141, 179, 180, 309, 310, 359, 1769], "hot": [55, 56, 179, 180], "float32": [55, 56, 57, 58, 146, 147, 179, 180, 181, 182, 309, 310, 315, 316, 333, 334, 345, 347, 357, 394, 400, 403, 405], "cuda": [55, 56, 156, 157, 309, 310, 325, 326, 361, 378, 448, 449, 451, 1751, 1767], "unless": [55, 56, 110, 111, 148, 149, 179, 180, 279, 280, 342, 346, 354, 378, 403, 415], "overrid": [55, 56, 179, 180], "ones_lik": [55, 56, 179, 180, 342, 366, 1752], "tril": [55, 56, 179, 180], "k": [55, 56, 120, 121, 124, 125, 128, 129, 146, 147, 148, 149, 156, 157, 179, 180, 185, 186, 273, 274, 289, 290, 293, 294, 297, 298, 315, 316, 317, 318, 325, 326, 339, 340, 355, 361, 394, 399, 427, 428, 431, 442, 443, 448, 449, 450, 1758, 1762], "innermost": [55, 56, 148, 149, 317, 318], "mxn": [55, 56, 148, 149, 317, 318], "diagon": [55, 56, 148, 149, 317, 318, 394, 399, 427, 428], "triangular": [55, 56, 148, 149, 317, 318, 394, 399], "triu": [55, 56, 179, 180], "upper": [55, 56, 148, 149, 156, 157, 317, 318, 325, 326, 354, 357, 394, 399], "zeros_lik": [55, 56, 179, 180, 355, 359, 1752], "creation": [56, 105, 170, 173, 174, 175, 176, 180, 274, 345, 346, 349, 351, 353, 356, 357, 358, 361, 395, 396, 397, 398, 399, 400, 1762, 1764, 1768], "data_typ": [57, 58, 106, 107, 181, 182, 275, 276, 345, 357, 358], "astyp": [57, 58, 146, 147, 181, 182, 315, 316, 345, 354, 355, 359], "irrespect": [57, 58, 181, 182, 343, 354, 363, 1769], "rule": [57, 58, 110, 111, 148, 149, 181, 182, 185, 186, 317, 318, 340, 341, 343, 345, 347, 350, 351, 352, 357, 359, 403, 418, 1763], "cast": [57, 58, 110, 111, 181, 182, 279, 280, 345, 352, 356, 361, 403, 414, 1752], "nan": [57, 58, 61, 62, 110, 111, 140, 141, 164, 165, 181, 182, 185, 186, 279, 280, 309, 310, 340, 345, 348, 357, 358, 403, 406, 407, 409, 414, 415, 417], "infin": [57, 58, 61, 62, 110, 111, 140, 141, 181, 182, 185, 186, 279, 280, 317, 318, 340, 348, 403, 410, 411, 414, 417], "non": [57, 58, 110, 111, 148, 149, 156, 157, 158, 159, 164, 165, 166, 167, 181, 182, 279, 280, 317, 318, 325, 326, 327, 328, 333, 334, 335, 336, 343, 345, 347, 353, 361, 403, 406, 414, 1762], "float64": [57, 58, 156, 157, 164, 165, 181, 182, 325, 326, 333, 334, 345, 357, 403, 405], "broadcast_arrai": [57, 58, 181, 182], "arbitrari": [57, 58, 173, 174, 181, 182, 343, 351, 352, 354, 355, 357, 365, 378, 1763, 1768], "x3": [57, 58], "mix": [57, 58, 61, 62, 170, 175, 176, 181, 182, 185, 186, 309, 310, 319, 320, 325, 326, 339, 347, 354, 357, 359, 361, 1751, 1762, 1766, 1768], "broadcast_to": [57, 58, 181, 182, 345], "can_cast": [57, 58, 181, 182, 345, 352, 355], "occur": [57, 58, 110, 111, 160, 161, 181, 182, 279, 280, 329, 330, 340, 403, 414], "as_n": [57, 58, 59, 60, 181, 182, 183, 184, 345], "int32": [57, 58, 156, 157, 158, 159, 164, 165, 181, 182, 309, 310, 325, 326, 327, 328, 345, 357, 361], "finfo": [57, 58, 181, 182, 357], "iinfo": [57, 58, 181, 182, 350], "119": [57, 58], "122": [57, 58], "int8": [57, 58, 156, 157, 325, 326, 345, 357], "min": [57, 58, 140, 141, 164, 165, 181, 182, 309, 310, 333, 334, 394, 399], "128": [57, 58, 110, 111, 146, 147, 170, 175, 176, 279, 280, 315, 316, 403, 404], "max": [57, 58, 118, 119, 140, 141, 148, 149, 164, 165, 181, 182, 287, 288, 309, 310, 317, 318, 333, 334, 357, 421, 424, 425, 426], "127": [57, 58, 110, 111, 279, 280, 403, 417], "is_bool_dtyp": [57, 58, 181, 182], "is_float_dtyp": [57, 58, 181, 182, 358], "is_int_dtyp": [57, 58, 181, 182, 356, 358], "is_uint_dtyp": [57, 58, 181, 182, 356, 358], "result_typ": [57, 58, 181, 182, 345], "arrays_and_dtyp": [57, 58, 181, 182], "to_devic": [59, 60, 183, 184], "stream": [59, 60, 183, 184, 1766], "ab": [61, 62, 185, 186, 345, 353, 355, 357, 403, 409, 1752], "aco": [61, 62, 185, 186, 1752], "real": [61, 62, 185, 186, 343, 1764], "cosin": [61, 62, 185, 186, 394, 396], "57": [61, 62, 185, 186], "69": [61, 62, 311, 312, 325, 326, 357, 364], "acosh": [61, 62, 185, 186, 1752], "hyperbol": [61, 62, 185, 186], "99": [61, 62, 142, 143, 185, 186, 325, 326], "asin": [61, 62, 185, 186, 1752], "sine": [61, 62, 185, 186], "927": [61, 62, 185, 186], "asinh": [61, 62, 185, 186, 1752], "atan": [61, 62, 185, 186, 1752], "tangent": [61, 62, 185, 186, 348], "785": [61, 62, 185, 186], "464": [61, 62, 325, 326], "atan2": [61, 62, 185, 186, 1752], "coordin": [61, 62, 158, 159, 185, 186, 327, 328, 394, 399, 431, 439, 440], "quotient": [61, 62, 185, 186], "245": [61, 62, 315, 316], "atanh": [61, 62, 185, 186, 1752], "549": [61, 62, 185, 186, 315, 316], "47": [61, 62, 118, 119, 156, 157, 185, 186, 287, 288, 309, 310, 311, 312, 325, 326, 421, 425, 426], "bitwise_and": [61, 62, 185, 186], "11": [61, 62, 118, 119, 124, 125, 140, 141, 146, 147, 148, 149, 156, 157, 164, 165, 170, 175, 176, 185, 186, 287, 288, 293, 294, 309, 310, 315, 316, 317, 318, 321, 322, 325, 326, 333, 334, 343, 345, 347, 358, 421, 422, 424, 425, 431, 432], "bitwise_invert": [61, 62, 185, 186], "bitiwse_invert": [61, 62], "bitwise_left_shift": [61, 62, 185, 186], "bitwise_or": [61, 62, 185, 186], "bitwise_xor": [61, 62, 185, 186], "89": [61, 62, 156, 157, 181, 182, 185, 186, 325, 326], "51": [61, 62, 185, 186, 309, 310, 325, 326], "18": [61, 62, 118, 119, 124, 125, 156, 157, 185, 186, 287, 288, 325, 326, 333, 334, 343, 347, 421, 424, 431, 432], "19": [61, 62, 118, 119, 124, 125, 156, 157, 185, 186, 287, 288, 317, 318, 325, 326, 347, 421, 423, 424, 431, 432], "26": [61, 62, 154, 155, 156, 157, 309, 310, 311, 312, 325, 326], "27": [61, 62, 110, 111, 148, 149, 156, 157, 279, 280, 317, 318, 325, 326, 403, 405], "23": [61, 62, 118, 119, 156, 157, 179, 180, 185, 186, 287, 288, 309, 310, 325, 326, 357, 361, 421, 424, 425, 426], "20": [61, 62, 118, 119, 146, 147, 156, 157, 164, 165, 185, 186, 287, 288, 309, 310, 325, 326, 333, 334, 359, 363, 403, 409, 421, 423, 424], "74": [61, 62, 325, 326], "41": [61, 62, 118, 119, 185, 186, 309, 310, 317, 318, 421, 425], "59": [61, 62], "24": [61, 62, 118, 119, 148, 149, 164, 165, 279, 280, 287, 288, 309, 310, 315, 316, 317, 318, 325, 326, 364, 421, 424], "ceil": [61, 62, 185, 186, 1752], "radian": [61, 62, 110, 111, 185, 186, 279, 280, 348, 403, 417], "54": [61, 62, 146, 147, 185, 186, 273, 274, 279, 280, 315, 316, 325, 326, 347, 394, 395], "416": [61, 62], "cosh": [61, 62, 185, 186, 1752], "angl": [61, 62, 185, 186, 377], "76": [61, 62, 181, 182, 185, 186, 325, 326], "03": [61, 62, 185, 186, 311, 312, 325, 326], "81": [61, 62, 181, 182, 185, 186, 317, 318, 325, 326, 357], "deg2rad": [61, 62, 185, 186], "degre": [61, 62, 124, 125, 164, 165, 185, 186, 293, 294, 333, 334, 431, 442, 1761], "180": [61, 62, 185, 186], "270": [61, 62, 185, 186], "360": [61, 62, 185, 186], "71": [61, 62, 185, 186], "28": [61, 62, 154, 155, 185, 186, 309, 310, 325, 326], "divid": [61, 62, 140, 141, 152, 153, 173, 174, 185, 186, 321, 322, 341, 343, 347], "dividend": [61, 62, 185, 186], "divisor": [61, 62, 142, 143, 164, 165, 185, 186, 311, 312, 333, 334, 403, 408], "375": [61, 62], "erf": [61, 62, 185, 186], "exponenti": [61, 62, 185, 186], "gauss": [61, 62, 185, 186], "exp": [61, 62, 185, 186, 1752], "expm1": [61, 62, 185, 186, 345], "244": [61, 62], "918": [61, 62], "48": [61, 62, 118, 119, 185, 186, 287, 288, 309, 310, 311, 312, 325, 326, 421, 422, 423, 425, 426], "147": [61, 62], "floor": [61, 62, 185, 186, 1752], "floor_divid": [61, 62, 185, 186], "greater_equ": [61, 62, 185, 186], "isfinit": [61, 62, 185, 186, 355], "out_i": [61, 62, 185, 186], "self_i": [61, 62, 185, 186], "finit": [61, 62, 110, 111, 185, 186, 279, 280, 403, 414], "inf": [61, 62, 110, 111, 140, 141, 148, 149, 185, 186, 279, 280, 309, 310, 317, 318, 345, 357, 403, 410, 411, 414], "isinf": [61, 62, 185, 186], "neg": [61, 62, 110, 111, 148, 149, 152, 153, 156, 157, 166, 167, 171, 172, 185, 186, 279, 280, 317, 318, 321, 322, 325, 326, 335, 336, 343, 352, 354, 394, 399, 403, 410, 414, 427, 428], "isnan": [61, 62, 185, 186], "isreal": [61, 62, 185, 186], "1j": [61, 62, 185, 186], "5j": [61, 62, 185, 186], "6j": [61, 62], "less_equ": [61, 62, 185, 186, 349], "61": [61, 62, 185, 186, 311, 312, 319, 320, 325, 326], "log10": [61, 62, 185, 186], "logarithm": [61, 62, 185, 186], "602": [61, 62], "699": [61, 62], "log1p": [61, 62, 185, 186], "693": [61, 62, 185, 186], "001": [61, 62, 110, 111, 154, 155, 279, 280, 364, 365], "0953": [61, 62, 185, 186], "log2": [61, 62, 185, 186, 403, 413], "logaddexp": [61, 62, 185, 186], "05": [61, 62, 110, 111, 142, 143, 154, 155, 164, 165, 185, 186, 279, 280, 311, 312, 323, 324, 356, 357, 394, 398, 403, 409], "logical_and": [61, 62, 185, 186, 355, 359, 1752, 1769], "logical_not": [61, 62, 185, 186, 345, 1752], "logical_or": [61, 62, 185, 186, 1752, 1769], "conform": [61, 62, 185, 186, 348, 427, 428, 431, 432], "org": [61, 62, 185, 186, 311, 312, 348, 394, 399, 431, 432], "api_specif": [61, 62, 185, 186, 348, 431, 432], "elementwise_funct": [61, 62, 185, 186, 348], "simplic": [61, 62, 185, 186, 348, 359, 365, 377, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441], "nestabl": [61, 62, 185, 186, 339, 347, 348, 354, 357, 394, 399, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 441, 1751], "logical_xor": [61, 62, 185, 186], "use_wher": [61, 62, 185, 186], "formula": [61, 62, 185, 186], "clip": [61, 62, 152, 153, 185, 186, 309, 310, 321, 322, 343, 352, 354, 364, 366, 1752], "minimum": [61, 62, 140, 141, 152, 153, 158, 159, 185, 186, 309, 310, 321, 322, 327, 328, 403, 405, 431, 441, 1752, 1759, 1765, 1769], "exce": [61, 62, 124, 125, 293, 294, 431, 443], "arguement": [61, 62], "condit": [61, 62, 158, 159, 327, 328, 340, 345, 347, 349, 354, 357, 377], "boradcastbl": [61, 62], "thatth": [61, 62], "30": [61, 62, 309, 310, 325, 326, 333, 334], "56": [61, 62, 146, 147, 156, 157, 185, 186, 347], "21": [61, 62, 110, 111, 118, 119, 140, 141, 156, 157, 185, 186, 279, 280, 287, 288, 309, 310, 325, 326, 333, 334, 403, 412, 421, 424], "not_equ": [61, 62, 185, 186], "pow": [61, 62, 185, 186, 340], "expon": [61, 62, 110, 111, 140, 141, 279, 280, 309, 310, 403, 405], "rad2deg": [61, 62, 185, 186], "286": [61, 62], "458": [61, 62], "573": [61, 62], "reciproc": [61, 62, 185, 186], "remaind": [61, 62, 110, 111, 152, 153, 173, 174, 185, 186, 279, 280, 321, 322, 403, 407], "modulu": [61, 62, 185, 186], "x2_i": [61, 62, 185, 186, 340], "94": [61, 62, 142, 143, 156, 157, 185, 186, 311, 312, 325, 326], "256": [61, 62], "0001": [61, 62], "36": [61, 62, 146, 147, 287, 288, 309, 310, 317, 318], "67": [61, 62, 140, 141, 185, 186, 309, 310, 325, 326], "45": [61, 62, 170, 175, 176, 185, 186, 287, 288, 311, 312, 325, 326], "678": [61, 62], "25": [61, 62, 140, 141, 148, 149, 150, 151, 156, 157, 164, 165, 171, 172, 185, 186, 279, 280, 309, 310, 315, 316, 317, 318, 323, 324, 325, 326, 333, 334, 343, 394, 396], "33": [61, 62, 156, 157, 164, 165, 185, 186, 309, 310, 311, 312, 315, 316, 421, 422], "sin": [61, 62, 140, 141, 185, 186, 341, 361, 1752], "841": [61, 62, 185, 186], "909": [61, 62, 185, 186, 309, 310], "141": [61, 62, 185, 186], "sinh": [61, 62, 185, 186, 1752], "63": [61, 62, 171, 172, 185, 186, 317, 318], "232": [61, 62, 185, 186], "sqrt": [61, 62, 185, 186], "squar": [61, 62, 148, 149, 185, 186, 317, 318], "tan": [61, 62, 185, 186, 343, 348, 351, 352, 354, 355, 361, 1752], "tanh": [61, 62, 185, 186, 361, 1752], "762": [61, 62, 185, 186], "964": [61, 62, 185, 186], "trunc": [61, 62, 185, 186], "trunc_divid": [61, 62, 185, 186], "elementwis": [62, 111, 154, 155, 186, 280, 323, 324, 352, 358, 361, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418], "experiment": [64, 65, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 345, 355, 358, 361, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 1762], "exp2": [110, 111, 279, 280, 403], "power": [110, 111, 140, 141, 148, 149, 279, 280, 309, 310, 317, 318, 357, 363, 364, 365, 394, 400, 403, 404, 405, 1762, 1764, 1768], "float_pow": [110, 111, 279, 280, 403], "125": [110, 111, 148, 149, 317, 318, 403, 405], "fmax": [110, 111, 279, 280, 403], "fmod": [110, 111, 279, 280, 403], "divis": [110, 111, 140, 141, 142, 143, 279, 280, 309, 310, 311, 312, 352, 403, 407], "gcd": [110, 111, 279, 280, 403], "isclos": [110, 111, 279, 280, 357, 403], "rtol": [110, 111, 148, 149, 279, 280, 317, 318, 356, 403, 409], "1e": [110, 111, 142, 143, 150, 151, 154, 155, 279, 280, 311, 312, 319, 320, 323, 324, 343, 352, 354, 356, 365, 366, 403, 409, 1752], "atol": [110, 111, 148, 149, 279, 280, 317, 318, 403, 409], "08": [110, 111, 164, 165, 279, 280, 325, 326, 403, 409], "equal_nan": [110, 111, 279, 280, 403, 409], "toler": [110, 111, 148, 149, 279, 280, 317, 318, 340, 356, 403, 409, 1762], "compar": [110, 111, 140, 141, 162, 163, 173, 174, 279, 280, 309, 310, 331, 332, 342, 347, 350, 356, 357, 364, 403, 409, 1758, 1760, 1762, 1768, 1769], "hold": [110, 111, 140, 141, 148, 149, 164, 165, 279, 280, 317, 318, 333, 334, 364, 403, 415, 1763], "01": [110, 111, 142, 143, 279, 280, 311, 312, 325, 326, 342, 366, 394, 398], "isneginf": [110, 111, 279, 280, 403], "isposinf": [110, 111, 279, 280, 403], "lcm": [110, 111, 279, 280, 403], "60": [110, 111, 279, 280, 309, 310, 325, 326, 403, 412], "logaddexp2": [110, 111, 279, 280, 403], "169925": [110, 111, 279, 280, 403, 413], "nan_to_num": [110, 111, 279, 280, 403], "posinf": [110, 111, 279, 280, 403, 414], "neginf": [110, 111, 279, 280, 403, 414], "small": [110, 111, 148, 149, 154, 155, 279, 280, 317, 318, 323, 324, 347, 352, 356, 359, 361, 365, 378, 403, 409, 414, 1763], "5e": [110, 111, 142, 143, 279, 280, 403, 414], "nansum": [110, 111, 279, 280, 403], "keepdim": [110, 111, 136, 137, 148, 149, 152, 153, 158, 159, 164, 165, 166, 167, 173, 174, 279, 280, 305, 306, 317, 318, 321, 322, 327, 328, 333, 334, 335, 336, 349, 355, 361, 403, 415, 461, 462], "flatten": [110, 111, 124, 125, 136, 137, 140, 141, 152, 153, 158, 159, 160, 161, 279, 280, 293, 294, 305, 306, 309, 310, 317, 318, 321, 322, 327, 328, 329, 330, 403, 415, 427, 428, 431, 461, 462], "accumul": [110, 111, 279, 280, 403, 415], "By": [110, 111, 164, 165, 166, 167, 279, 280, 333, 334, 335, 336, 345, 347, 352, 354, 355, 361, 365, 366, 394, 400, 403, 415], "reduc": [110, 111, 136, 137, 140, 141, 148, 149, 158, 159, 164, 165, 166, 167, 173, 174, 279, 280, 305, 306, 309, 310, 317, 318, 327, 328, 333, 334, 335, 336, 349, 355, 359, 361, 363, 403, 415, 461, 462, 1760, 1764, 1765, 1766], "signbit": [110, 111, 279, 280, 403], "637": [110, 111, 279, 280, 403, 417], "212": [110, 111, 146, 147, 279, 280, 403, 417], "0909": [110, 111, 279, 280, 403, 417], "trapz": [110, 111, 185, 186, 403], "dx": [110, 111, 185, 186, 403, 418], "sampl": [110, 111, 128, 129, 156, 157, 164, 165, 185, 186, 297, 298, 325, 326, 333, 334, 353, 356, 357, 403, 418, 448, 449, 450, 451], "evenli": [110, 111, 152, 153, 173, 174, 185, 186, 321, 322, 403, 418], "apart": [110, 111, 185, 186, 403, 418], "trapezoid": [110, 111, 185, 186, 403, 418], "gradient": [115, 143, 284, 312, 358, 364, 365, 377, 378, 1752, 1762], "avg_pool3d": [118, 119, 287, 288, 421], "kernel": [118, 119, 146, 147, 287, 288, 315, 316, 359, 361, 378, 421, 422, 423, 424, 425, 426, 1762, 1765, 1766], "stride": [118, 119, 146, 147, 287, 288, 315, 316, 421, 422, 423, 424, 425, 426, 1762], "pad": [118, 119, 124, 125, 146, 147, 287, 288, 293, 294, 315, 316, 421, 422, 423, 424, 425, 426, 431], "data_format": [118, 119, 146, 147, 287, 288, 315, 316, 421, 422, 423, 424, 425, 426], "ndhwc": [118, 119, 146, 147, 287, 288, 315, 316, 421, 423, 426], "pool": [118, 119, 287, 288, 421, 422, 423, 424, 425, 426], "batch_siz": [118, 119, 146, 147, 156, 157, 287, 288, 315, 316, 325, 326, 364, 421, 422, 423, 424, 425, 426], "h": [118, 119, 146, 147, 287, 288, 309, 310, 315, 316, 339, 343, 421, 422, 423, 425, 426, 1758], "w": [118, 119, 142, 143, 146, 147, 173, 174, 185, 186, 287, 288, 309, 310, 311, 312, 315, 316, 361, 364, 365, 421, 422, 423, 424, 425, 426], "d_in": [118, 119, 146, 147, 287, 288, 315, 316, 421, 422, 423, 424, 425, 426], "convolut": [118, 119, 146, 147, 287, 288, 315, 316, 421, 423, 426, 1760, 1762], "slide": [118, 119, 146, 147, 287, 288, 315, 316, 421, 422, 423, 424, 425, 426], "algorithm": [118, 119, 146, 147, 171, 172, 287, 288, 315, 316, 345, 355, 359, 378, 421, 422, 423, 424, 425, 426, 1762, 1764, 1766], "ncdhw": [118, 119, 287, 288, 421, 423, 426], "arang": [118, 119, 148, 149, 287, 288, 293, 294, 317, 318, 345, 421, 422, 423, 424, 425, 426, 1752, 1769], "reshap": [118, 119, 148, 149, 152, 153, 173, 174, 287, 288, 315, 316, 317, 318, 321, 322, 354, 355, 357, 361, 363, 366, 421, 422, 423, 424, 425, 426, 431, 432, 1752], "43": [118, 119, 170, 175, 176, 325, 326, 421, 423], "44": [118, 119, 156, 157, 185, 186, 287, 288, 325, 326, 421, 423], "max_pool1d": [118, 119, 287, 288, 421], "nhwc": [118, 119, 146, 147, 287, 288, 315, 316, 421, 422, 425], "nwc": [118, 119, 146, 147, 287, 288, 315, 316, 421, 424], "ncw": [118, 119, 146, 147, 287, 288, 315, 316, 421, 424], "max_pool2d": [118, 119, 287, 288, 421], "nchw": [118, 119, 146, 147, 287, 288, 315, 316, 421, 422, 425], "40": [118, 119, 140, 141, 170, 175, 176, 279, 280, 309, 310, 325, 326, 421, 425], "46": [118, 119, 156, 157, 273, 274, 287, 288, 315, 316, 325, 326, 394, 395, 421, 425, 426], "max_pool3d": [118, 119, 287, 288, 421], "38": [118, 119, 185, 186, 325, 326, 347, 421, 422, 426], "diagflat": [120, 121, 289, 290, 427], "offset": [120, 121, 148, 149, 289, 290, 317, 318, 427, 428], "padding_valu": [120, 121, 289, 290, 427, 428], "right_left": [120, 121, 289, 290, 427, 428], "num_row": [120, 121, 289, 290, 427, 428], "num_col": [120, 121, 289, 290, 427, 428], "kron": [120, 121, 289, 290, 427, 1769], "loss": [123, 151, 292, 320, 345, 352, 355, 358, 364, 365, 366, 1752, 1762, 1769], "start_dim": [124, 125, 293, 294, 431, 432], "end_dim": [124, 125, 293, 294, 431, 432], "dim": [124, 125, 173, 174, 179, 180, 293, 294, 345, 356, 359, 431, 432], "fliplr": [124, 125, 293, 294, 431], "flip": [124, 125, 152, 153, 293, 294, 321, 322, 355, 363, 364, 366, 431, 433, 434, 1752], "diag": [124, 125, 148, 149, 293, 294, 317, 318, 361, 431, 433, 434], "flipud": [124, 125, 293, 294, 431], "heavisid": [124, 125, 293, 294, 431], "0000": [124, 125, 273, 274, 394, 395, 398, 431, 435], "5000": [124, 125, 431, 435], "hstack": [124, 125, 293, 294, 431], "vstack": [124, 125, 293, 294, 431], "i0": [124, 125, 293, 294, 431], "bessel": [124, 125, 164, 165, 273, 274, 293, 294, 333, 334, 394, 397, 431, 437], "26606588": [124, 125, 293, 294, 431, 437], "2795853": [124, 125, 293, 294, 431, 437], "88079259": [124, 125, 293, 294, 431, 437], "moveaxi": [124, 125, 293, 294, 431], "destin": [124, 125, 293, 294, 431, 438], "unstack": [124, 125, 152, 153, 173, 174, 321, 322, 343, 361, 364, 1752, 1769], "reorder": [124, 125, 152, 153, 293, 294, 321, 322, 431, 438], "pad_width": [124, 125, 152, 153, 293, 294, 321, 322, 431, 441], "constant": [124, 125, 154, 155, 293, 294, 323, 324, 352, 358, 365, 366, 378, 431, 441], "stat_length": [124, 125, 293, 294, 431, 441], "constant_valu": [124, 125, 293, 294, 431, 441], "end_valu": [124, 125, 293, 294, 431, 441], "reflect_typ": [124, 125, 293, 294, 431, 441], "rot90": [124, 125, 293, 294, 431], "rotat": [124, 125, 293, 294, 377, 431, 442], "plane": [124, 125, 293, 294, 431, 442], "top_k": [124, 125, 293, 294, 431], "largest": [124, 125, 173, 174, 293, 294, 377, 431, 443], "retun": [124, 125, 293, 294, 431, 443], "smallest": [124, 125, 173, 174, 293, 294, 431, 443], "norm": [127, 140, 141, 148, 149, 155, 296, 309, 310, 317, 318, 324, 358, 1752], "dirichlet": [128, 129, 297, 298, 448], "seed": [128, 129, 156, 157, 173, 174, 297, 298, 325, 326, 448, 449, 450, 451, 1752], "shuffl": [128, 129, 156, 157, 173, 174, 297, 298, 325, 326, 1752], "length": [128, 129, 152, 153, 170, 173, 174, 175, 176, 297, 298, 321, 322, 350, 357, 364, 394, 395, 397, 398, 400, 431, 441, 448, 450], "nativeshap": [128, 129, 152, 153, 156, 157, 297, 298, 321, 322, 325, 326, 448, 449, 450], "drawn": [128, 129, 156, 157, 297, 298, 325, 326, 357, 448, 449, 450], "vector": [128, 129, 140, 141, 146, 147, 148, 149, 309, 310, 315, 316, 317, 318, 377, 431, 441, 448, 450, 1762], "10598304": [128, 129, 448, 450], "21537054": [128, 129, 448, 450], "67864642": [128, 129, 448, 450], "48006698": [128, 129, 448, 450], "07472073": [128, 129, 448, 450], "44521229": [128, 129, 448, 450], "55479872": [128, 129, 448, 450], "05426367": [128, 129, 448, 450], "39093761": [128, 129, 448, 450], "19531053": [128, 129, 448, 450], "51675832": [128, 129, 448, 450], "28793114": [128, 129, 448, 450], "12315625": [128, 129, 448, 450], "29823365": [128, 129, 448, 450], "5786101": [128, 129, 448, 450], "15564976": [128, 129, 448, 450], "50542368": [128, 129, 448, 450], "33892656": [128, 129, 448, 450], "1325352": [128, 129, 448, 450], "44439589": [128, 129, 448, 450], "42306891": [128, 129, 448, 450], "msort": [134, 135, 303, 304, 454], "randint": [134, 135, 146, 147, 156, 157, 303, 304, 315, 316, 325, 326, 345, 454, 455, 1752], "median": [136, 137, 305, 306, 355, 431, 441, 461], "all_equ": [140, 141, 309, 310], "equality_matrix": [140, 141, 309, 310], "array_equ": [140, 141], "assert_supports_inplac": [140, 141, 309, 310], "clip_matrix_norm": [140, 141, 309, 310], "max_norm": [140, 141, 309, 310], "downscal": [140, 141, 309, 310], "894": [140, 141, 309, 310], "79": [140, 141, 309, 310, 325, 326], "clip_vector_norm": [140, 141, 309, 310], "default_v": [140, 141], "catch_except": [140, 141], "rev": [140, 141], "with_cal": [140, 141], "catch": [140, 141, 357], "callabl": [140, 141, 309, 310, 343, 349, 355, 357, 361, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 431, 441], "einops_rearrang": [140, 141, 309, 310], "axes_length": [140, 141, 309, 310], "arrang": [140, 141], "rearrang": [140, 141, 309, 310], "einops_reduc": [140, 141, 309, 310], "reduct": [140, 141, 150, 151, 166, 167, 173, 174, 309, 310, 319, 320, 335, 336, 345, 357, 363, 1752], "One": [140, 141, 152, 153, 156, 157, 309, 310, 321, 322, 325, 326, 345, 347, 356, 357, 361, 363, 364, 431, 441], "prod": [140, 141, 164, 165, 309, 310, 333, 334, 345, 347, 361], "einops_repeat": [140, 141, 309, 310], "fourier_encod": [140, 141, 309, 310], "max_freq": [140, 141, 309, 310], "num_band": [140, 141, 309, 310], "linear": [140, 141, 146, 147, 171, 172, 309, 310, 315, 316, 348, 355, 357, 359, 361, 364, 365, 366, 431, 441, 1480, 1752, 1760, 1761, 1762, 1765], "concat": [140, 141, 152, 153, 173, 174, 321, 322, 356, 359, 361, 431, 432, 1752], "band": [140, 141, 309, 310], "linearli": [140, 141, 309, 310], "oppos": [140, 141, 309, 310, 345], "geometr": [140, 141, 309, 310], "concaten": [140, 141, 152, 153, 356, 359, 361, 364, 1752], "seper": [140, 141, 347], "batch": [140, 141, 173, 174, 309, 310, 317, 318, 343, 352, 364, 1760], "expand": [140, 141, 152, 153, 309, 310, 343], "gather": [140, 141, 309, 310, 1769], "gather_nd": [140, 141, 309, 310, 1752], "get_num_dim": [140, 141, 309, 310, 1752], "as_arrai": [140, 141, 309, 310], "has_nan": [140, 141, 309, 310], "include_inf": [140, 141, 309, 310], "inplace_decr": [140, 141, 309, 310], "val": [140, 141, 173, 174, 309, 310, 354, 363], "decrement": [140, 141, 309, 310], "inplace_incr": [140, 141, 309, 310], "inplace_upd": [140, 141, 309, 310, 354], "ensure_in_backend": [140, 141, 354], "inplac": [140, 141, 142, 143, 173, 174, 309, 310, 339, 341, 347, 351, 353, 356, 359, 363, 365], "is_arrai": [140, 141, 309, 310, 355], "exclus": [140, 141, 142, 143, 164, 165, 173, 174, 309, 310, 311, 312, 333, 334, 343, 345, 352, 355, 358, 366, 1766, 1768], "trace": [140, 141, 148, 149, 173, 174, 309, 310, 317, 318, 340, 345, 361, 378, 1751, 1763, 1768], "is_ivy_arrai": [140, 141, 309, 310, 354, 363], "is_ivy_contain": [140, 141, 309, 310], "is_native_arrai": [140, 141, 309, 310, 363], "scatter_flat": [140, 141, 309, 310], "occupi": [140, 141], "scatter_nd": [140, 141, 309, 310, 359, 363, 1752], "arr": [140, 141, 181, 182, 345, 346], "stable_divid": [140, 141, 309, 310, 352], "denomin": [140, 141, 154, 155, 309, 310, 323, 324, 352, 378, 1759], "min_denomin": [140, 141, 309, 310], "_min_denomin": [140, 141, 309, 310], "stable_pow": [140, 141, 309, 310], "min_bas": [140, 141, 309, 310], "_min_bas": [140, 141, 154, 155, 309, 310, 323, 324], "supports_inplace_upd": [140, 141, 309, 310], "supports_inplac": [140, 141, 309, 310], "to_list": [140, 141, 309, 310, 1752], "represent": [140, 141, 170, 173, 174, 175, 176, 309, 310, 377, 1760, 1761, 1763, 1767, 1768], "to_numpi": [140, 141, 309, 310, 364, 1752], "to_scalar": [140, 141, 309, 310], "value_is_nan": [140, 141, 309, 310], "92": [140, 141, 325, 326], "adam_step": [142, 143, 311, 312], "mw": [142, 143, 311, 312, 365], "vw": [142, 143, 311, 312, 365], "beta1": [142, 143, 311, 312, 365], "beta2": [142, 143, 311, 312, 365], "999": [142, 143, 185, 186, 311, 312, 365], "epsilon": [142, 143, 148, 149, 150, 151, 154, 155, 311, 312, 317, 318, 319, 320, 323, 324, 343, 352, 354, 365], "07": [142, 143, 150, 151, 185, 186, 311, 312, 319, 320, 325, 326, 365], "cost": [142, 143, 311, 312, 359, 1760], "weight": [142, 143, 146, 147, 154, 155, 311, 312, 315, 316, 323, 324, 343, 352, 361, 365, 366, 394, 396, 1761], "dc": [142, 143, 311, 312], "dw": [142, 143, 311, 312], "averag": [142, 143, 311, 312, 421, 422], "forget": [142, 143, 311, 312, 345], "adam": [142, 143, 311, 312, 364, 365, 366, 1752, 1762], "delta": [142, 143, 311, 312], "dcdw": [142, 143, 311, 312], "adam_step_delta": [142, 143, 311, 312], "182": [142, 143], "adam_upd": [142, 143, 311, 312, 365], "lr": [142, 143, 311, 312, 364, 365], "mw_tm1": [142, 143, 311, 312], "vw_tm1": [142, 143, 311, 312], "stop_gradi": [142, 143, 311, 312, 365, 1752], "rate": [142, 143, 311, 312], "stop": [142, 143, 179, 180, 311, 312, 351, 359, 361, 378, 1762], "ws_new": [142, 143, 311, 312], "gradient_descent_upd": [142, 143, 311, 312, 1752], "handl": [142, 143, 170, 173, 174, 175, 176, 339, 343, 345, 346, 351, 352, 353, 354, 355, 356, 357, 359, 365, 1759, 1769], "higher": [142, 143, 360, 361, 366, 378, 1759, 1762, 1763, 1766, 1768, 1769], "descent": [142, 143, 311, 312, 365, 1762], "new_weight": [142, 143, 311, 312, 364], "95": [142, 143, 156, 157, 311, 312, 325, 326], "97": [142, 143, 185, 186, 311, 312, 325, 326], "96": [142, 143, 185, 186, 279, 280, 309, 310, 325, 326], "is_vari": [142, 143, 311, 312, 354], "trainabl": [142, 143, 311, 312, 348, 362, 364, 365], "is_var": [142, 143, 311, 312], "lamb_upd": [142, 143, 311, 312], "max_trust_ratio": [142, 143, 311, 312], "decay_lambda": [142, 143, 311, 312], "trust": [142, 143, 311, 312], "ratio": [142, 143, 311, 312], "decai": [142, 143, 311, 312], "lamb": [142, 143, 311, 312, 365], "784": [142, 143], "78": [142, 143], "02": [142, 143, 154, 155, 156, 157, 185, 186, 311, 312, 325, 326], "04": [142, 143, 311, 312, 356, 357], "0e": [142, 143, 311, 312], "lars_upd": [142, 143, 311, 312], "lar": [142, 143, 311, 312, 365], "optimizer_upd": [142, 143, 311, 312], "effective_grad": [142, 143, 311, 312], "3e": [142, 143, 311, 312], "preserve_typ": [142, 143, 311, 312], "preserv": [142, 143, 170, 173, 174, 175, 176, 311, 312, 357, 366, 378, 431, 433, 434], "variable_data": [142, 143, 311, 312], "intern": [142, 143, 173, 174, 311, 312, 341, 343, 346, 348, 354], "conv1d": [146, 147, 315, 316], "dilat": [146, 147, 287, 288, 315, 316], "fw": [146, 147, 315, 316, 356, 357], "d_out": [146, 147, 315, 316], "wio": [146, 147], "conv1d_transpos": [146, 147, 315, 316], "output_shap": [146, 147, 315, 316], "conv2d": [146, 147, 315, 316, 1752], "fh": [146, 147, 315, 316], "hwio": [146, 147], "conv3d": [146, 147, 315, 316], "conv3d_transpos": [146, 147, 315, 316], "depthwise_conv2d": [146, 147, 315, 316, 1752], "255": [146, 147, 315, 316], "random_norm": [146, 147, 156, 157, 315, 316, 325, 326], "std": [146, 147, 156, 157, 164, 165, 315, 316, 325, 326, 333, 334, 347, 448, 449], "dropout": [146, 147, 315, 316, 364], "prob": [146, 147, 315, 316, 325, 326], "scale": [146, 147, 311, 312, 315, 316, 427, 429, 1762, 1764], "bia": [146, 147, 154, 155, 315, 316, 323, 324, 361, 365], "transform": [146, 147, 315, 316, 366, 377, 1751, 1760, 1762, 1763, 1764], "outer_batch_shap": [146, 147, 315, 316], "inner_batch_shap": [146, 147, 315, 316], "in_featur": [146, 147, 315, 316], "out_featur": [146, 147, 315, 316], "84": [146, 147, 185, 186, 323, 324, 325, 326], "133": [146, 147], "134": [146, 147], "lstm_updat": [146, 147, 315, 316, 361], "init_h": [146, 147, 315, 316, 361], "init_c": [146, 147, 315, 316, 361], "recurrent_kernel": [146, 147, 315, 316, 361], "recurrent_bia": [146, 147, 315, 316, 361], "multi_head_attent": [146, 147, 315, 316, 354], "num_head": [146, 147, 315, 316], "mask": [146, 147, 315, 316, 359], "to_q_fn": [146, 147, 315, 316], "to_kv_fn": [146, 147, 315, 316], "to_out_fn": [146, 147, 315, 316, 354], "to_q_v": [146, 147, 315, 316], "to_kv_v": [146, 147, 315, 316], "to_out_v": [146, 147, 315, 316], "scaled_dot_product_attent": [146, 147, 315, 316], "choleski": [148, 149, 317, 318, 354], "symmetr": [148, 149, 273, 274, 317, 318, 343, 394, 395, 396, 397, 398, 431, 441], "625": [148, 149], "cross": [148, 149, 150, 151, 317, 318, 319, 320, 344, 1752], "vif": [148, 149, 317, 318], "det": [148, 149, 317, 318], "axis1": [148, 149, 152, 153, 317, 318, 321, 322], "axis2": [148, 149, 317, 318], "eigh": [148, 149, 317, 318], "eigvalsh": [148, 149], "inv": [148, 149, 317, 318, 1752], "adjoint": [148, 149, 317, 318], "matmul": [148, 149, 317, 318, 342, 357, 358, 361, 1752], "matrix_norm": [148, 149, 317, 318], "ord": [148, 149, 317, 318], "fro": [148, 149, 317, 318], "liter": [148, 149, 317, 318, 350, 431, 441], "nuc": [148, 149, 317, 318], "matrix_rank": [148, 149, 317, 318], "rank": [148, 149, 152, 153, 166, 167, 317, 318, 321, 322, 335, 336, 431, 441], "singular": [148, 149, 317, 318, 345], "largest_singular_valu": [148, 149, 317, 318], "ep": [148, 149, 317, 318], "defici": [148, 149], "matrix_transpos": [148, 149, 317, 318, 363], "pinv": [148, 149, 317, 318, 1752], "0426": [148, 149, 317, 318], "0964": [148, 149, 317, 318], "0605": [148, 149, 317, 318], "1368": [148, 149, 317, 318], "qr": [148, 149, 317, 318], "slogdet": [148, 149, 317, 318], "namedtupl": [148, 149, 160, 161, 317, 318, 329, 330], "logabsdet": [148, 149, 317, 318], "6931472": [148, 149], "solv": [148, 149, 317, 318, 340, 355, 362, 377, 1764], "svd": [148, 149, 317, 318, 1752], "compute_uv": [148, 149, 317, 318], "full_matric": [148, 149, 317, 318], "svdval": [148, 149, 317, 318], "tensordot": [148, 149, 317, 318, 345], "vander": [148, 149, 317, 318], "vandermond": [148, 149, 317, 318], "column": [148, 149, 317, 318, 394, 399, 431, 433, 434, 436], "len": [148, 149, 317, 318, 343, 354, 355, 357, 363, 366], "vecdot": [148, 149, 317, 318], "vector_norm": [148, 149, 317, 318], "vector_to_skew_symmetric_matrix": [148, 149, 317, 318, 1752], "binary_cross_entropi": [150, 151, 319, 320], "pred": [150, 151, 319, 320, 343, 352, 354], "predict": [150, 151, 319, 320], "amount": [150, 151, 319, 320, 346, 356], "smooth": [150, 151, 319, 320], "binari": [150, 151, 319, 320], "entropi": [150, 151, 319, 320], "357": [150, 151, 319, 320], "223": [150, 151, 319, 320], "cross_entropi": [150, 151, 319, 320, 343, 352, 354], "3862944": [150, 151], "sparse_cross_entropi": [150, 151, 319, 320], "logit": [150, 151, 319, 320], "x_min": [152, 153, 321, 322, 366], "x_max": [152, 153, 321, 322, 366], "join": [152, 153, 173, 174, 349, 1752], "count": [152, 153, 160, 161, 166, 167, 321, 322, 329, 330, 335, 336, 343, 347, 364], "constant_pad": [152, 153, 321, 322], "expand_dim": [152, 153, 321, 322, 355, 361, 364, 1752], "permute_dim": [152, 153, 321, 322], "valueerror": [152, 153, 309, 310, 321, 322, 349], "reus": [152, 153, 321, 322, 349, 357, 1767], "memori": [152, 153, 321, 322, 345, 346, 354, 355, 359, 361, 376, 378, 1752, 1762, 1764, 1765, 1766], "buffer": [152, 153, 321, 322, 378], "roll": [152, 153, 321, 322, 343, 351], "larger": [152, 153, 164, 165, 321, 322, 333, 334, 357, 1769], "restor": [152, 153, 321, 322], "num_or_size_split": [152, 153, 173, 174, 321, 322, 361], "with_remaind": [152, 153, 173, 174, 321, 322], "entri": [152, 153, 173, 174, 321, 322, 431, 433, 434, 1762], "squeez": [152, 153, 321, 322, 1752, 1762], "swapax": [152, 153, 321, 322], "axis0": [152, 153, 321, 322], "swap_ax": [152, 153], "tile": [152, 153, 309, 310, 321, 322, 1752], "rep": [152, 153, 321, 322], "unpack": [152, 153, 321, 322, 350, 356, 357], "zero_pad": [152, 153, 321, 322, 1752], "layer_norm": [154, 155, 323, 324], "normalized_idx": [154, 155, 323, 324], "new_std": [154, 155, 323, 324], "learnabl": [154, 155, 323, 324, 366], "gamma": [154, 155, 156, 157, 323, 324, 448], "0976": [154, 155], "3452": [154, 155], "2740": [154, 155], "1047": [154, 155], "5886": [154, 155], "2732": [154, 155], "7696": [154, 155], "7024": [154, 155], "2518": [154, 155], "826": [154, 155], "178": [154, 155], "981": [154, 155], "831": [154, 155], "421": [154, 155], "parameter": [156, 157, 325, 326], "multinomi": [156, 157, 325, 326, 448, 450], "population_s": [156, 157, 325, 326], "num_sampl": [156, 157, 325, 326], "unnorm": [156, 157, 325, 326, 357], "popul": [156, 157, 164, 165, 173, 174, 325, 326, 333, 334, 345, 346, 357, 361, 1768], "uniform": [156, 157, 325, 326, 365, 1769], "batch_shap": [156, 157, 179, 180, 325, 326, 359, 361, 363], "independ": [156, 157, 325, 326, 340, 345, 347, 353, 361, 366, 1760], "highest": [156, 157, 325, 326], "low": [156, 157, 325, 326, 343, 355, 359, 361, 1758, 1760, 1762, 1763, 1764, 1766, 1768], "half": [156, 157, 325, 326, 359], "int16": [156, 157, 181, 182, 325, 326, 345, 357, 361], "int64": [156, 157, 158, 159, 162, 163, 181, 182, 325, 326, 327, 328, 331, 332, 333, 334, 345, 357, 361], "72": [156, 157, 311, 312], "235": [156, 157], "float16": [156, 157, 325, 326, 345, 357, 403, 405], "49": [156, 157, 317, 318], "807": [156, 157], "42": [156, 157, 171, 172, 311, 312, 323, 324, 325, 326, 361, 366], "random_uniform": [156, 157, 325, 326, 346, 357, 365, 1752], "boundari": [156, 157, 325, 326, 1762], "86": [156, 157, 325, 326], "06": [156, 157, 185, 186, 311, 312, 357, 364], "53": [156, 157, 185, 186], "argmax": [158, 159, 327, 328, 1752], "output_dtyp": [158, 159, 327, 328], "insert": [158, 159, 327, 328], "occurr": [158, 159], "argmin": [158, 159, 327, 328, 1752], "singleton": [158, 159, 164, 165, 166, 167, 317, 318, 327, 328, 333, 334, 335, 336, 361], "accordingli": [158, 159, 164, 165, 166, 167, 317, 318, 327, 328, 333, 334, 335, 336, 350, 355, 361], "argwher": [158, 159, 327, 328, 350], "nonzero": [158, 159, 327, 328], "as_tupl": [158, 159, 327, 328], "fewer": [158, 159, 327, 328], "yield": [158, 159, 344, 350, 431, 439, 440, 441], "unique_al": [160, 161, 329, 330], "unique_count": [160, 161, 329, 330], "field": [160, 161, 329, 330, 377, 1760, 1768], "unique_invers": [160, 161, 329, 330], "inverse_indic": [160, 161, 329, 330], "reconstruct": [160, 161, 329, 330], "unique_valu": [160, 161, 329, 330], "argsort": [162, 163, 331, 332], "descend": [162, 163, 331, 332], "ascend": [162, 163, 331, 332], "stabil": [162, 163, 331, 332, 345, 359], "searchsort": [162, 163, 331, 332], "sorter": [162, 163, 331, 332], "ret_dtyp": [162, 163, 331, 332], "cumprod": [164, 165, 333, 334, 355, 366], "cumul": [164, 165, 333, 334, 377], "120": [164, 165, 170, 175, 176, 333, 334], "cumsum": [164, 165, 333, 334, 345, 1752], "einsum": [164, 165, 333, 334], "equat": [164, 165, 273, 274, 333, 334, 394, 395, 1762], "arithmet": [164, 165, 333, 334, 355], "x_i": [164, 165, 185, 186, 348, 403, 417], "propag": [164, 165], "varianc": [164, 165, 333, 334], "freedom": [164, 165, 333, 334, 342], "constitut": [164, 165, 333, 334, 352, 361, 1763], "unbias": [164, 165, 333, 334], "commonli": [164, 165, 333, 334, 349, 352], "6666665": [164, 165, 364], "667": [164, 165, 309, 310], "AND": [166, 167, 335, 336], "backward": [166, 167, 335, 336, 378], "add_ivy_array_instance_method": 168, "cl": [168, 169, 337, 338], "to_ignor": [168, 169, 337, 338], "loop": [168, 169, 337, 338, 342, 350, 378], "_wrap_funct": [168, 169, 337, 338, 352, 353], "toi": [168, 169, 337, 338], "arrayexampl": [168, 169], "hasattr": [168, 169, 337, 338], "dict_in": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "queue": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 364], "queue_load_s": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "container_combine_method": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "list_join": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "queue_timeout": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "print_limit": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "key_length_limit": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "print_ind": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "print_line_spac": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "ivyh": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "default_key_color": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "keyword_color_dict": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "rebuild_child_contain": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "types_to_iteratively_nest": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "alphabetical_kei": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "containerwithactiv": [170, 171, 175, 176], "containerwithconvers": [170, 175, 176, 177], "containerwithcr": [170, 175, 176, 179], "containerwithdatatyp": [170, 175, 176, 181], "containerwithdevic": [170, 175, 176, 183], "containerwithelementwis": [170, 175, 176, 185, 343], "containerwithgener": [170, 175, 176, 309], "containerwithgradi": [170, 175, 176, 311], "containerwithimag": [170, 175, 176, 313], "containerwithlay": [170, 175, 176, 315], "containerwithlinalg": [170, 175, 176, 317], "containerwithloss": [170, 175, 176, 319], "containerwithnorm": [170, 175, 176, 323], "containerwithrandom": [170, 175, 176, 325], "containerwithsearch": [170, 175, 176, 327], "containerwithset": [170, 175, 176, 329], "containerwithsort": [170, 175, 176, 331], "containerwithstatist": [170, 175, 176, 333], "containerwithutil": [170, 175, 176, 335], "containerwithactivationexperiment": [170, 175, 176, 188], "containerwithconversionexperiment": [170, 175, 176, 271], "containerwithcreationexperiment": [170, 175, 176, 273], "containerwithdata_typeexperiment": [170, 175, 176, 275], "containerwithdeviceexperiment": [170, 175, 176, 277], "containerwithelementwiseexperiment": [170, 175, 176, 279], "containerwithgeneralexperiment": [170, 175, 176, 281], "containerwithgradientsexperiment": [170, 175, 176, 283], "containerwithimageexperiment": [170, 175, 176, 285], "containerwithlayersexperiment": [170, 175, 176, 287], "containerwithlinalgexperiment": [170, 175, 176, 289], "containerwithlossesexperiment": [170, 175, 176, 291], "containerwithmanipulationexperiment": [170, 175, 176, 293], "containerwithnormsexperiment": [170, 175, 176, 295], "containerwithrandomexperiment": [170, 175, 176, 297], "containerwithsearchingexperiment": [170, 175, 176, 299], "containerwithsetexperiment": [170, 175, 176, 301], "containerwithsortingexperiment": [170, 175, 176, 303], "containerwithstatisticalexperiment": [170, 175, 176, 305], "containerwithutilityexperiment": [170, 175, 176, 307], "dictionari": [170, 173, 174, 175, 176, 345, 364, 378], "multiprocess": [170, 173, 174, 175, 176, 364, 378], "asynchron": [170, 173, 174, 175, 176, 1762], "arriv": [170, 173, 174, 175, 176, 359], "timeout": [170, 173, 174, 175, 176], "whitespac": [170, 173, 174, 175, 176], "indent": [170, 173, 174, 175, 176, 364], "extra": [170, 173, 174, 175, 176, 341, 345, 347, 353, 355, 356, 359, 361, 1759, 1764], "newlin": [170, 173, 174, 175, 176, 348], "color": [170, 173, 174, 175, 176, 1812, 1813], "map": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 345, 351, 352, 355, 357, 358, 364, 377, 378, 1751, 1763], "termcolor": [170, 173, 174, 175, 176], "constructor": [170, 173, 174, 175, 176, 345, 346, 363], "alphabet": [170, 173, 174, 175, 176], "rshift": [170, 175, 176], "143": [170, 175, 176, 185, 186, 347], "containerbas": [171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343], "key_chain": [171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "to_appli": [171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "prune_unappli": [171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "map_sequ": [171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 273, 274, 279, 280, 287, 288, 289, 290, 293, 294, 297, 298, 303, 304, 305, 306, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "formul": [171, 172], "chain": [171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 343, 355, 365, 366, 378, 1762], "prune": [171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 279, 280, 293, 294, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "slope": [171, 172], "leaki": [171, 172], "371": [171, 172], "rectifi": [171, 172], "revert": [171, 172], "535": [171, 172], "948": [171, 172], "static_gelu": [171, 172], "static_leaky_relu": [171, 172], "static_log_softmax": [171, 172], "static_relu": [171, 172], "static_sigmoid": [171, 172], "static_softmax": [171, 172], "static_softplu": [171, 172], "__getitem__": [173, 174, 343], "queri": [173, 174, 343, 345, 363, 1762], "slice": [173, 174, 309, 310, 394, 399, 1762], "__setitem__": [173, 174, 341, 343, 363], "all_fals": [173, 174], "assert_is_bool": [173, 174], "all_key_chain": [173, 174], "include_empti": [173, 174], "all_tru": [173, 174, 343, 364], "as_bool": [173, 174], "assert_contains_sub_contain": [173, 174], "sub_cont": [173, 174], "diff": [173, 174, 343, 347, 364], "assert_contains_sub_structur": [173, 174], "assert_ident": [173, 174], "check_typ": [173, 174], "same_arrai": [173, 174, 364], "arrays_equ": [173, 174], "assert_identical_structur": [173, 174], "at_key_chain": [173, 174], "ignore_key_error": [173, 174], "ignore_non": [173, 174], "at_kei": [173, 174], "ignor": [173, 174, 344, 347, 357, 378, 1768], "substr": [173, 174], "duplic": [173, 174, 342, 348, 350, 353, 356, 365, 1768], "container_rightmost": [173, 174], "common_key_chain": [173, 174, 343], "cont_inplace_upd": [173, 174], "contains_sub_contain": [173, 174], "contains_sub_structur": [173, 174], "create_if_abs": [173, 174], "noth": [173, 174, 359, 1768], "cutoff_at_depth": [173, 174], "depth_cutoff": [173, 174], "cutoff_at_height": [173, 174], "height_cutoff": [173, 174], "deep_copi": [173, 174, 364], "dev_str": [173, 174], "diff_kei": [173, 174], "detect_key_diff": [173, 174], "detect_value_diff": [173, 174], "detect_shape_diff": [173, 174], "treat": [173, 174, 357, 362, 366, 403, 415], "container0": [173, 174], "duplicate_array_keychain": [173, 174], "find_sub_contain": [173, 174], "sub_cont_to_find": [173, 174], "exsit": [173, 174], "find_sub_structur": [173, 174], "sub_struc_to_find": [173, 174], "flatten_key_chain": [173, 174, 364], "__": [173, 174, 347, 364], "above_height": [173, 174, 364], "below_depth": [173, 174, 364], "format_key_chain": [173, 174], "format_fn": [173, 174], "string": [173, 174, 342, 345, 346, 349, 350, 361, 364, 431, 441], "from_disk_as_hdf5": [173, 174, 364], "h5_obj_or_filepath": [173, 174], "slice_obj": [173, 174], "load": [173, 174, 378, 1761, 1768], "disk": [173, 174, 364, 1761], "h5py": [173, 174], "hdf5": [173, 174, 364], "h5": [173, 174], "from_disk_as_json": [173, 174, 364], "json_filepath": [173, 174], "from_disk_as_pickl": [173, 174, 364], "pickle_filepath": [173, 174], "pickl": [173, 174, 343, 364], "from_flat_list": [173, 174], "flat_list": [173, 174], "flat": [173, 174], "h5_file_s": [173, 174], "handle_inplac": [173, 174], "prime": [173, 174], "overwritten": [173, 174, 341, 342], "has_kei": [173, 174], "query_kei": [173, 174], "somewher": [173, 174], "has_key_chain": [173, 174], "identical_array_shap": [173, 174], "identical_config": [173, 174], "identical_structur": [173, 174], "if_exist": [173, 174], "key_chains_contain": [173, 174], "sub_str": [173, 174], "list_stack": [173, 174, 364], "map_cont": [173, 174], "include_self": [173, 174], "possibi": [173, 174], "max_depth": [173, 174], "multi_map": [173, 174, 343], "map_nest": [173, 174], "leftmost": [173, 174], "multi_map_in_static_method": [173, 174, 343], "fn_name": [173, 174, 342, 356, 357], "num_arrai": [173, 174, 356, 357], "overwrite_at_key_chain": [173, 174], "target_dict": [173, 174], "return_dict": [173, 174], "prune_empti": [173, 174], "keep_non": [173, 174], "prune_key_chain": [173, 174], "key1": [173, 174, 365], "key2": [173, 174], "key3": [173, 174], "prune_key_from_key_chain": [173, 174], "prune_kei": [173, 174], "prune_keys_from_key_chain": [173, 174], "remove_key_length_limit": [173, 174], "remove_print_limit": [173, 174], "reshape_lik": [173, 174], "leading_shap": [173, 174], "return_cont": [173, 174], "restructur": [173, 174], "keep_orig": [173, 174], "restructure_key_chain": [173, 174], "keychain_map": [173, 174], "set_at_key_chain": [173, 174], "set_at_kei": [173, 174], "attribut": [173, 174, 343, 345, 348, 353, 354, 362, 363, 364, 365], "shared_shap": [173, 174], "show_sub_contain": [173, 174], "sub_cont_or_keychain": [173, 174], "shuffle_h5_fil": [173, 174], "seed_valu": [173, 174], "dataset": [173, 174, 364, 376, 1752], "size_ordered_arrai": [173, 174], "keychain": [173, 174], "slice_kei": [173, 174], "key_slic": [173, 174], "all_depth": [173, 174], "slice_via_kei": [173, 174], "sort_by_kei": [173, 174], "split_cont": [173, 174], "constitu": [173, 174, 366], "structural_diff": [173, 174], "to_dict": [173, 174], "to_disk_as_hdf5": [173, 174, 364], "starting_index": [173, 174], "max_batch_s": [173, 174], "to_disk_as_json": [173, 174, 364], "to_disk_as_pickl": [173, 174, 364], "to_flat_list": [173, 174], "to_iter": [173, 174, 343], "leaf_keys_onli": [173, 174], "to_iterator_kei": [173, 174], "to_iterator_valu": [173, 174], "to_json": [173, 174], "to_nested_list": [173, 174], "to_raw": [173, 174], "raw": [173, 174, 348, 1763], "trim_kei": [173, 174], "max_length": [173, 174], "trim": [173, 174], "try_kc": [173, 174], "tri": [173, 174], "concatten": [173, 174], "unstack_cont": [173, 174], "dim_siz": [173, 174], "update_config": [173, 174], "with_default_key_color": [173, 174], "with_entries_as_list": [173, 174], "with_ivy_backend": [173, 174], "ivy_backend": [173, 174], "with_key_length_limit": [173, 174, 364], "with_print_ind": [173, 174, 364], "with_print_limit": [173, 174, 364], "with_print_line_spac": [173, 174], "static_to_ivi": [177, 178], "static_to_n": [177, 178], "2324": [179, 180], "234": [179, 180], "123": [179, 180, 357], "static_arang": [179, 180], "static_asarrai": [179, 180], "static_empty_lik": [179, 180], "static_ey": [179, 180], "n_row": [179, 180, 273, 274, 394, 399], "n_col": [179, 180, 273, 274, 394, 399], "static_from_dlpack": [179, 180], "static_full_lik": [179, 180], "static_linspac": [179, 180], "endpoint": [179, 180, 351], "static_logspac": [179, 180], "static_meshgrid": [179, 180], "static_native_arrai": [179, 180], "static_one_hot": [179, 180], "static_on": [179, 180], "static_ones_lik": [179, 180], "static_tril": [179, 180], "static_triu": [179, 180], "static_zero": [179, 180], "static_zeros_lik": [179, 180], "718": [181, 182, 185, 186], "618": [181, 182, 185, 186], "broadcats": [181, 182], "1800": [181, 182], "32768": [181, 182], "32767": [181, 182], "2147483648": [181, 182], "2147483647": [181, 182], "static_astyp": [181, 182], "static_broadcast_arrai": [181, 182], "And": [181, 182, 357], "static_broadcast_to": [181, 182], "static_can_cast": [181, 182], "from_": [181, 182], "static_default_float_dtyp": [181, 182], "float_dtyp": [181, 182], "static_dtyp": [181, 182], "static_finfo": [181, 182], "static_function_supported_dtyp": [181, 182], "static_function_unsupported_dtyp": [181, 182], "static_iinfo": [181, 182], "static_is_bool_dtyp": [181, 182], "dtype_in": [181, 182], "static_is_float_dtyp": [181, 182], "roughli": [181, 182, 1765], "static_is_int_dtyp": [181, 182], "static_is_uint_dtyp": [181, 182], "static_result_typ": [181, 182], "static_dev": [183, 184], "static_to_devic": [183, 184], "__dlpack__": [183, 184], "caveat": [183, 184], "portabl": [183, 184, 1752, 1760], "524": [185, 186], "644": [185, 186, 365], "305": [185, 186, 315, 316], "915": [185, 186], "29": [185, 186, 309, 310, 311, 312, 325, 326], "983": [185, 186], "75": [185, 186, 309, 310, 315, 316, 325, 326, 394, 396], "978": [185, 186], "696": [185, 186, 325, 326], "993": [185, 186], "203": [185, 186, 323, 324], "34": [185, 186, 287, 288, 309, 310, 325, 326], "52": [185, 186, 309, 310, 311, 312, 325, 326], "351": [185, 186], "50": [185, 186, 289, 290, 309, 310, 363], "00613": [185, 186], "0154": [185, 186], "0262": [185, 186], "873": [185, 186], "333": [185, 186], "thefunct": [185, 186], "649": [185, 186], "220": [185, 186], "959": [185, 186], "865": [185, 186], "metho": [185, 186], "999999999999": [185, 186], "7j": [185, 186], "3j": [185, 186], "0j": [185, 186], "898": [185, 186], "0414": [185, 186], "956": [185, 186], "65": [185, 186, 311, 312, 325, 326], "2860": [185, 186], "413": [185, 186], "recirpoc": [185, 186], "300": [185, 186, 309, 310, 357], "527": [185, 186], "301": [185, 186], "757": [185, 186], "279": [185, 186], "835": [185, 186], "347": [185, 186], "721": [185, 186], "static_ab": [185, 186], "static_aco": [185, 186], "static_acosh": [185, 186], "static_add": [185, 186, 343, 347, 348], "static_asin": [185, 186], "412": [185, 186, 315, 316], "201": [185, 186], "static_asinh": [185, 186], "static_atan": [185, 186], "static_atan2": [185, 186], "static_atanh": [185, 186], "static_bitwise_and": [185, 186], "static_bitwise_invert": [185, 186], "static_bitwise_left_shift": [185, 186], "static_bitwise_or": [185, 186], "static_bitwise_right_shift": [185, 186], "static_bitwise_xor": [185, 186], "static_ceil": [185, 186], "static_co": [185, 186], "static_cosh": [185, 186], "static_deg2rad": [185, 186], "static_divid": [185, 186], "static_equ": [185, 186], "static_erf": [185, 186], "static_exp": [185, 186], "static_expm1": [185, 186], "areal": [185, 186], "static_floor": [185, 186], "static_floor_divid": [185, 186], "static_great": [185, 186], "static_greater_equ": [185, 186], "static_isfinit": [185, 186], "static_isinf": [185, 186], "static_isnan": [185, 186], "static_isr": [185, 186], "23j": [185, 186], "9j": [185, 186], "static_less": [185, 186], "static_less_equ": [185, 186], "static_log": [185, 186], "static_log10": [185, 186], "static_log1p": [185, 186], "static_log2": [185, 186], "static_logaddexp": [185, 186], "static_logical_and": [185, 186], "static_logical_not": [185, 186], "static_logical_or": [185, 186], "static_logical_xor": [185, 186], "static_maximum": [185, 186], "static_minimum": [185, 186], "static_multipli": [185, 186], "static_neg": [185, 186], "static_not_equ": [185, 186], "static_posit": [185, 186], "static_pow": [185, 186], "static_rad2deg": [185, 186], "5160": [185, 186], "10300": [185, 186], "15500": [185, 186], "20600": [185, 186], "static_reciproc": [185, 186], "static_remaind": [185, 186], "static_round": [185, 186], "thevfunct": [185, 186], "static_sign": [185, 186], "static_sin": [185, 186], "static_sinh": [185, 186], "static_sqrt": [185, 186], "static_squar": [185, 186], "static_subtract": [185, 186], "static_tan": [185, 186, 343, 347], "static_tanh": [185, 186], "995": [185, 186], "9999": [185, 186], "static_trapz": [185, 186], "static_trunc": [185, 186], "static_trunc_divid": [185, 186], "hamming_window": [273, 274, 394], "lenght": [273, 274], "coeffici": [273, 274, 394, 395], "ham": [273, 274, 394, 395], "8000": [273, 274, 394, 395], "2000": [273, 274, 394, 395], "4180": [273, 274], "8180": [273, 274], "hann_window": [273, 274, 394], "hann": [273, 274, 394, 396], "7500": [273, 274], "3455": [273, 274], "9045": [273, 274], "kaiser_bessel_derived_window": [273, 274, 394], "spectral": [273, 274, 394, 397, 398], "analysi": [273, 274, 394, 397, 398, 1762, 1763], "kaiser": [273, 274, 394, 397, 398], "70710677": [273, 274, 394, 397], "18493208": [273, 274, 394, 397], "9827513": [273, 274, 394, 397], "kaiser_window": [273, 274, 394], "static_kaiser_window": [273, 274], "2049": [273, 274], "8712": [273, 274], "0367": [273, 274, 394, 398], "7753": [273, 274], "static_hamming_window": [273, 274], "static_hann_window": [273, 274], "window_length": [273, 274, 394, 395, 396, 397, 398, 400], "static_hann": [273, 274], "static_kaiser_bessel_derived_window": [273, 274], "static_triu_indic": [273, 274], "triu_indic": [273, 274, 394], "1080": [279, 280], "1550": [279, 280], "130": [279, 280], "08746284": [279, 280], "32192809": [279, 280], "0707": [279, 280, 403, 417], "0579": [279, 280, 403, 417], "static_exp2": [279, 280], "static_float_pow": [279, 280], "static_fmax": [279, 280], "static_fmod": [279, 280], "static_gcd": [279, 280], "static_isclos": [279, 280], "static_isneginf": [279, 280], "static_isposinf": [279, 280], "static_lcm": [279, 280], "static_logaddexp2": [279, 280], "static_nan_to_num": [279, 280], "static_nansum": [279, 280], "static_signbit": [279, 280], "static_sinc": [279, 280], "636": [279, 280], "090": [279, 280], "070": [279, 280], "057": [279, 280], "avg_pool2d": [287, 288, 421], "static_avg_pool2d": [287, 288], "static_avg_pool3d": [287, 288], "static_max_pool1d": [287, 288], "static_max_pool2d": [287, 288], "max_pool2dd": [287, 288], "static_max_pool3d": [287, 288], "450": [289, 290], "static_diagflat": [289, 290], "static_kron": [289, 290], "kroneck": [289, 290, 427, 429], "30192195": [293, 294], "static_flatten": [293, 294], "static_fliplr": [293, 294], "static_flipud": [293, 294], "static_heavisid": [293, 294], "static_hstack": [293, 294], "static_i0": [293, 294], "static_moveaxi": [293, 294, 305, 306], "static_pad": [293, 294], "static_rot90": [293, 294], "static_top_k": [293, 294], "static_vstack": [293, 294], "43643127": [297, 298], "32325703": [297, 298], "24031169": [297, 298], "34251311": [297, 298], "31692529": [297, 298], "3405616": [297, 298], "5319725": [297, 298], "22458365": [297, 298], "24344385": [297, 298], "26588406": [297, 298], "61075421": [297, 298], "12336174": [297, 298], "51142915": [297, 298], "25041268": [297, 298], "23815817": [297, 298], "64042903": [297, 298], "25763214": [297, 298], "10193883": [297, 298], "31624692": [297, 298], "46567987": [297, 298], "21807321": [297, 298], "37677699": [297, 298], "39914594": [297, 298], "22407707": [297, 298], "static_dirichlet": [297, 298], "static_msort": [303, 304], "static_median": [305, 306], "static_all_equ": [309, 310], "833": [309, 310], "200": [309, 310, 364], "400": [309, 310], "500": [309, 310], "600": [309, 310], "700": [309, 310], "static_assert_supports_inplac": [309, 310], "static_clip_matrix_norm": [309, 310], "849": [309, 310], "static_clip_vector_norm": [309, 310], "static_einops_rearrang": [309, 310], "static_einops_reduc": [309, 310], "93": [309, 310, 325, 326], "66": [309, 310, 311, 312], "static_einops_repeat": [309, 310], "static_fourier_encod": [309, 310], "static_gath": [309, 310], "static_gather_nd": [309, 310], "static_get_num_dim": [309, 310], "static_has_nan": [309, 310], "leafwis": [309, 310], "static_inplace_decr": [309, 310], "static_inplace_incr": [309, 310], "static_inplace_upd": [309, 310], "static_is_arrai": [309, 310], "static_is_ivy_arrai": [309, 310], "static_is_ivy_contain": [309, 310], "static_is_native_arrai": [309, 310], "static_scatter_flat": [309, 310], "ref": [309, 310, 317, 318, 348, 361], "static_scatter_nd": [309, 310], "static_stable_divid": [309, 310], "22222222": [309, 310], "11111111": [309, 310], "857": [309, 310], "444": [309, 310], "static_stable_pow": [309, 310], "static_supports_inplace_upd": [309, 310], "static_to_list": [309, 310], "static_to_numpi": [309, 310], "static_to_scalar": [309, 310], "static_value_is_nan": [309, 310], "452": [309, 310], "425": [309, 310], "87": [311, 312], "976": [311, 312], "49e": [311, 312], "74e": [311, 312], "95e": [311, 312], "024": [311, 312], "096": [311, 312], "216": [311, 312, 317, 318], "384": [311, 312], "626": [311, 312], "en": [311, 312], "wikipedia": [311, 312], "wiki": [311, 312], "stochastic_gradient_desc": [311, 312], "w_new": [311, 312], "88": [311, 312, 325, 326], "708": [311, 312], "445": [311, 312], "6e": [311, 312], "00036": [311, 312], "00016": [311, 312], "00049": [311, 312], "layerwis": [311, 312], "static_is_vari": [311, 312], "static_stop_gradi": [311, 312], "static_vari": [311, 312], "static_variable_data": [311, 312], "ey": [315, 316, 359, 366], "conv2d_transpos": [315, 316], "inp": [315, 316], "278": [315, 316], "105": [315, 316], "352": [315, 316], "195": [315, 316], "static_conv1d": [315, 316], "static_conv1d_transpos": [315, 316], "static_conv2d": [315, 316], "static_conv2d_transpos": [315, 316], "static_conv3d": [315, 316], "static_conv3d_transpos": [315, 316], "static_depthwise_conv2d": [315, 316], "static_dropout": [315, 316], "static_linear": [315, 316], "static_lstm_upd": [315, 316], "static_multi_head_attent": [315, 316], "static_scaled_dot_product_attent": [315, 316], "73": [317, 318, 357], "577": [317, 318], "707": [317, 318], "matrix_pow": [317, 318], "pseudo": [317, 318], "static_choleski": [317, 318], "static_rol": [317, 318, 321, 322, 343, 347], "static_cross": [317, 318], "static_det": [317, 318], "static_diag": [317, 318], "static_diagon": [317, 318], "static_inn": [317, 318], "static_inv": [317, 318], "static_matmul": [317, 318], "matul": [317, 318], "static_matrix_norm": [317, 318], "deimens": [317, 318], "static_matrix_pow": [317, 318], "static_matrix_rank": [317, 318], "static_matrix_transpos": [317, 318], "static_out": [317, 318], "static_pinv": [317, 318], "static_qr": [317, 318], "static_slogdet": [317, 318], "static_solv": [317, 318], "static_svd": [317, 318], "static_svdv": [317, 318], "static_tensordot": [317, 318], "static_trac": [317, 318], "static_vand": [317, 318], "343": [317, 318], "512": [317, 318], "729": [317, 318, 365], "static_vecdot": [317, 318], "static_vector_norm": [317, 318], "mathemat": [317, 318, 345, 355, 359, 1762, 1768], "l1": [317, 318, 343, 364], "manhattan": [317, 318], "l2": [317, 318, 343], "euclidean": [317, 318], "static_vector_to_skew_symmetric_matrix": [317, 318], "511": [319, 320], "5108256": [319, 320], "609438": [319, 320], "static_binary_cross_entropi": [319, 320], "static_cross_entropi": [319, 320], "20397282": [319, 320], "83258148": [319, 320], "60943794": [319, 320], "static_sparse_cross_entropi": [319, 320], "static_stack": [321, 322], "static_clip": [321, 322], "static_concat": [321, 322], "static_constant_pad": [321, 322], "static_expand_dim": [321, 322], "container_axi": [321, 322], "static_flip": [321, 322], "static_permute_dim": [321, 322], "static_repeat": [321, 322], "static_reshap": [321, 322], "positivclip": [321, 322], "static_split": [321, 322], "static_squeez": [321, 322], "static_swapax": [321, 322], "static_til": [321, 322], "static_unstack": [321, 322], "static_zero_pad": [321, 322], "classivi": [321, 322, 329, 330], "342": [323, 324], "0427": [323, 324], "299": [323, 324], "241": [323, 324], "102": [325, 326], "431": [325, 326], "68": [325, 326], "83": [325, 326], "274": [325, 326], "91": [325, 326], "static_beta": [325, 326], "static_multinomi": [325, 326], "static_randint": [325, 326], "static_random_norm": [325, 326], "651": [325, 326], "static_random_uniform": [325, 326], "481": [325, 326], "0999": [325, 326], "static_shuffl": [325, 326], "static_argmax": [327, 328], "static_argmin": [327, 328], "static_argwher": [327, 328], "static_nonzero": [327, 328], "static_wher": [327, 328], "static_unique_al": [329, 330], "static_unique_count": [329, 330], "static_unique_invers": [329, 330], "static_unique_valu": [329, 330], "static_argsort": [331, 332], "static_searchsort": [331, 332], "static_sort": [331, 332], "static_cumprod": [333, 334], "static_cumsum": [333, 334], "static_sum": [333, 334], "static_var": [333, 334], "12666667": [333, 334], "11555555": [333, 334], "contian": [333, 334], "6666667": [333, 334], "static_al": [335, 336], "static_ani": [335, 336], "add_ivy_container_instance_method": 337, "containerexampl": [337, 338], "who": [339, 360, 378, 1762, 1764], "hood": [339, 343, 347, 352, 355, 357, 359, 360, 361, 364, 366, 1769], "weed": [339, 360], "tour": 339, "primari": [339, 342, 345, 354, 355, 357, 359, 378, 394, 399, 1751], "superset": [339, 378], "goe": [339, 359], "dynam": [339, 345, 346, 354, 355, 361, 1762, 1766], "runtim": [339, 357, 359, 1762], "borrow": 339, "conjunct": 340, "establish": [340, 1764], "2020": [340, 1762], "group": [340, 343, 352, 355, 356, 1758, 1761, 1767], "intend": [340, 351, 1760, 1762, 1766, 1767], "popular": [340, 1762], "sens": [340, 347, 355, 363], "unconnect": 340, "decis": [340, 343, 345, 355, 359, 361, 363, 1762], "initialis": [340, 357], "checkout": [340, 357], "everytim": [340, 345], "init": [340, 366], "thoroughli": 340, "ci": [340, 345, 350, 357, 378], "insert_chosen_backend": 340, "test_linalg": 340, "test_set_funct": 340, "test_signatur": 340, "excess": [340, 342, 347], "explicitli": [340, 341, 342, 343, 345, 348, 349, 352, 353, 354, 357, 361, 378, 1762], "array_modul": 340, "vv": 340, "test_manipulation_funct": 340, "test_concat": [340, 357], "typic": [340, 352, 403, 409, 1761, 1769], "nb": 340, "varieti": [340, 344, 345, 346, 357, 1758, 1760, 1764, 1765, 1768, 1769], "known": [340, 345, 355, 357], "test_asarray_arrai": 340, "test_floor_divid": 340, "health": 340, "test_iop": 340, "__imod__": 340, "x1_i": 340, "isequ": 340, "test_matrix_norm": 340, "alter": 340, "tweak": 340, "array_api_methods_to_test": 340, "identifi": [340, 344, 357, 359], "202": 340, "test_trac": 340, "latter": [340, 342, 345, 348, 355], "hand": [340, 345, 352, 357, 378], "scheme": [340, 365, 1762], "edg": [340, 357, 431, 441, 1752, 1762, 1764, 1768], "test_special_cas": 340, "__ipow__": 340, "is_integ": 340, "unskip": 340, "temporarili": [340, 358], "straightforward": [340, 364], "tf": [341, 345, 346, 351, 354, 355, 357, 358, 359, 361, 366, 378, 1751, 1752, 1762], "wrapper": [341, 343, 345, 353, 354, 363, 1751, 1758, 1762], "_data": [341, 355, 363], "meta": [341, 358, 1762], "organiz": [341, 343, 355], "inherit": [341, 343, 349, 363, 378, 1751], "bear": [341, 343, 345, 355], "necessarili": [341, 343], "although": [341, 343, 355, 1760, 1762], "underpin": [341, 343, 361], "programmat": [341, 343, 1763], "backup": [341, 343], "accident": [341, 343, 355], "readabl": [341, 343, 349, 351, 358, 363, 364], "absent": [341, 343], "perk": [341, 343], "auto": [341, 343, 364], "__mul__": [341, 343, 347, 351, 359, 363], "__truediv__": [341, 343, 347], "throw": [341, 345, 349, 363, 1762], "imposs": 341, "inputs_to_native_arrai": [341, 353, 379], "outputs_to_ivy_arrai": [341, 345, 346, 351, 353, 379], "firstli": [341, 345, 347, 348, 349, 352, 353, 354, 359, 364, 1758, 1768], "anywai": [341, 353, 355], "secondli": [341, 345], "permit": [341, 351, 355, 357, 359], "dictat": [341, 347, 351, 354], "implicit_backend": [342, 361], "ivy_original_dict": [342, 361], "unmodifi": [342, 345], "opt": [342, 345, 354, 357, 358, 359], "fallback": 342, "layout": [342, 355, 359], "requires_grad": [342, 356], "memory_format": 342, "preserve_format": 342, "weren": 342, "break": [342, 345, 350, 351, 358, 378, 1752], "Not": [342, 356, 364, 365, 378, 403, 415], "vast": [342, 345, 1762], "minor": [342, 359, 361, 378], "fn_name_v_1p12_and_abov": 342, "similarli": [342, 345, 355, 359, 363, 394, 399, 1768], "fn_name_v_1p01_to_1p1": 342, "vari": [343, 347, 355, 357, 363], "five": [343, 364], "recap": [343, 347, 365], "arbitrarili": [343, 353, 364], "__repr__": 343, "control": [343, 345, 354, 355, 359, 363, 364, 377, 394, 399, 1751, 1762, 1768], "__getattr__": 343, "underli": [343, 359, 1762], "__setattr__": 343, "__contains__": 343, "__getstate__": 343, "__setstate__": 343, "unpickl": 343, "num_dim": [343, 366], "__len__": 343, "restrict": [343, 355, 361, 1759], "enforc": [343, 363], "extern": [343, 351, 355, 357, 358], "flexibl": [343, 351, 358, 1762], "c1": 343, "lefthand": 343, "righthand": 343, "operand": [343, 348, 355, 403, 417], "decor": [343, 345, 346, 352, 353, 354, 355, 356, 357], "handle_nest": [343, 352, 353, 361, 379], "addition": [343, 354, 355, 1768], "counterpart": [343, 353], "behavior": [343, 345, 355, 356, 357, 359, 361, 378, 1759], "presenc": [343, 354], "absenc": [343, 351, 1762], "implicitli": [343, 361], "themselv": [343, 345, 346, 348, 352, 355, 365, 1759, 1768], "log_pr": [343, 352, 354], "intuit": [343, 364, 365, 1758], "chronolog": 343, "concurr": [343, 352, 1762], "had": [343, 354, 1762, 1763], "consum": [343, 351, 356, 357], "sequenti": [343, 365], "But": [343, 348, 353, 354, 366], "flow": [343, 377, 1762, 1763], "compil": [343, 355, 358, 359, 360, 362, 378, 1751, 1752, 1758, 1761, 1762, 1763, 1766, 1769], "implic": 343, "whatsoev": [343, 352, 1751, 1768], "implicit": [343, 348, 355, 357, 361, 1762], "eager": [343, 378, 1762], "children": 343, "shallowest": 343, "deepest": 343, "event": [344, 357], "ex": 344, "reopen": 344, "review_request": 344, "yml": 344, "dispatch": [344, 378, 1762, 1765], "pair": [344, 431, 439], "test_nn": 344, "yellow": 344, "dot": 344, "queu": 344, "redirect": 344, "book": 344, "procedur": [344, 347], "decoupl": [344, 365], "ran": 344, "badg": 344, "clickabl": 344, "uint8": [345, 357], "uint16": [345, 357, 361], "uint32": [345, 357, 361], "uint64": [345, 357, 361], "bfloat16": [345, 355, 357], "all_dtyp": 345, "all_numeric_dtyp": 345, "all_int_dtyp": 345, "all_float_dtyp": 345, "replic": [345, 347, 355, 359], "four": [345, 347, 351, 352, 357, 359, 364], "thirdli": 345, "native_float32": 345, "importantli": [345, 363, 366, 377], "conveni": [345, 346, 351, 356, 362, 364, 365, 1751, 1768], "set_default_dtyp": [345, 352], "default_dtyp": [345, 352], "arguabl": [345, 346, 355], "promote_typ": 345, "type_promote_arrai": 345, "promote_types_of_input": 345, "jaxarrai": [345, 346, 351, 354, 358, 361], "jnp": [345, 346, 351, 354, 356, 358, 361, 366, 1752], "_handle_0_dim_output": [345, 354], "subtli": [345, 354], "On": [345, 355, 357, 362, 366], "promote_types_frontend_nam": 345, "promote_types_of_frontend_name_input": 345, "frontend_nam": 345, "demonstr": [345, 347, 363], "accuraci": 345, "precis": [345, 355, 359, 403, 405, 1766], "upcast": 345, "instabl": 345, "underflow": 345, "nearli": [345, 351, 353, 1762], "downcast": 345, "footprint": 345, "constraint": 345, "concret": 345, "compound": 345, "infer_dtyp": [345, 346, 351, 353, 379], "default_int_dtyp": 345, "default_float_dtyp": 345, "settabl": [345, 346], "set_default_int_dtyp": 345, "set_default_float_dtyp": 345, "irrelev": [345, 347], "handle_out_argu": [345, 346, 351, 353, 354, 361, 379], "infer_devic": [345, 346, 351, 353, 379], "deleg": [345, 1769], "shape_to_tupl": 345, "with_supported_dtyp": [345, 379], "with_unsupported_dtyp": [345, 379], "unment": 345, "backend_vers": 345, "_cast_for_unary_op": 345, "target_typ": 345, "function_supported_dtyp": 345, "function_unsupported_dtyp": 345, "discov": 345, "unsupported_dtyp": 345, "invalid_dtyp": 345, "former": [345, 348, 355], "uint": [345, 356], "lack": [345, 354, 1762, 1769], "rang": [345, 349, 357, 361, 364, 365, 366, 1752, 1762, 1768], "patch": [345, 1762], "achiev": [345, 350, 353, 357, 364, 366, 1751], "subtl": [345, 358, 1768], "unsign": [345, 356, 361], "offici": [345, 361], "inconsist": [345, 349], "unexpect": 345, "84530": 345, "unwarr": 345, "risk": [345, 1768], "needlessli": 345, "bloat": 345, "undergo": [345, 378], "supported_dtyp": [345, 355], "unsupported_devic": 345, "supported_devic": 345, "slight": [345, 365], "downsid": 345, "coverag": [345, 357], "inflat": 345, "idx": [346, 363], "tpu": [346, 1762, 1765], "get_all_ivy_arrays_on_dev": 346, "aliv": 346, "num_gpu": [346, 357], "total_mem_on_dev": 346, "dev_util": 346, "num_cpu_cor": 346, "default_devic": [346, 349], "outsid": [346, 350, 352, 363, 1767], "dual": 346, "categor": [346, 352, 355], "thrown": [346, 349, 378], "far": [346, 347, 362, 1767, 1768], "set_default_devic": 346, "eight": [347, 360], "func_nam": [347, 348, 352, 355], "static_func_nam": 347, "op_nam": 347, "__r": 347, "combinatori": 347, "variat": [347, 357], "grid": [347, 357, 377], "unus": [347, 350, 354], "okai": [347, 359, 361], "showcas": [347, 377], "meant": 347, "imaginari": 347, "spec": [347, 348], "my_func": [347, 358], "some_flag": 347, "another_flag": 347, "jointli": 347, "x0": 347, "5574077": 347, "1850398": 347, "5463025": 347, "8422884": 347, "91601413": 347, "9647598": 347, "3738229": 347, "1597457": 347, "0963247": 347, "9955841": 347, "3278579": 347, "multi": [347, 360, 378, 1752, 1758, 1760, 1762, 1766], "pars": [347, 378], "satisfi": [347, 357], "asid": [347, 377], "increasingli": 347, "14254655": 347, "1578213": 347, "380515": 347, "trivial": 347, "exlud": 347, "failing_fn_nam": 347, "onlin": [347, 348], "minutest": 347, "suffici": 347, "segment": 347, "fault": [347, 1762], "contrast": [348, 351, 355, 1768], "instanti": 348, "templat": [348, 357, 1752], "array_api": 348, "preview": 348, "render": 348, "incorrectli": 348, "domain": [348, 403, 417, 1760, 1762], "codomain": [348, 403, 417], "needless": [348, 356], "info": [348, 357, 1752], "subset": [348, 351, 355, 357, 361, 1762], "renam": 348, "judgment": 348, "beyond": [348, 355, 1768], "pure": [348, 351, 355, 359, 363, 366, 378, 1762, 1768, 1769], "operator_nam": 348, "succinct": 348, "contstructor": 348, "_forward": [348, 361, 364, 365, 1752], "docst": 348, "ivyexcept": [349, 355], "super": [349, 361, 364, 365, 366], "ivybackendexcept": 349, "_default": 349, "current_backend_str": [349, 361, 363], "_delimit": 349, "indexerror": 349, "ivyerror": 349, "repetit": 349, "caught": 349, "functool": [349, 355, 363], "new_fn": [349, 355], "__name__": 349, "comparison": 349, "error_stack": 349, "axiserror": 349, "bound": [349, 357, 361, 1768], "got": [349, 1752], "assertionerror": [349, 357], "elif": [349, 354, 355], "polici": [349, 357, 377], "moreov": 349, "cleaner": [349, 364], "lesser": 349, "set_split_factor": 349, "split_factor": 349, "met": 349, "flake8": 350, "undefin": [350, 431, 441], "statement": [350, 354, 357, 359, 378], "handler": [350, 360, 362, 366, 1751, 1752], "annot": [350, 351], "star": 350, "byte": [350, 1767, 1768], "notimpl": 350, "notimplementederror": 350, "unsuccess": 350, "reformat": 350, "exceed": 350, "black": 350, "disobei": 350, "taken": [350, 358, 366, 1763], "successfulli": 350, "inde": [350, 351, 359, 378, 1760], "adress": 351, "revisit": 351, "dedic": [351, 363, 365], "to_native_arrays_and_back": [351, 353, 361, 379], "usabl": [351, 358], "sole": [351, 358, 1761, 1762, 1763], "strictli": [351, 354], "linspac": [351, 359, 361, 1752, 1769], "rational": 351, "__div__": [351, 359], "dicat": 351, "futher": 351, "pep": 351, "484": 351, "brittl": 351, "freeli": 351, "technic": [351, 354, 378, 1762, 1764], "original_typ": 351, "cumbersom": 351, "omit": [351, 354, 355], "venn": 352, "diagram": [352, 1768], "light": [352, 355, 378, 1751, 1763, 1768], "array_arg": 352, "cache_fn": 352, "cach": [352, 357], "deal": [352, 356, 378], "modif": [352, 1762], "briefli": [352, 357, 364], "get_all_arrays_on_dev": 352, "nested_map": 352, "index_nest": 352, "inputs_to_ivy_arrai": [353, 379], "heavili": [353, 355, 378], "facilit": 353, "integer_array_to_float": 353, "handle_cmd_line_arg": [353, 356, 357], "as_vari": [353, 356, 357], "with_out": [353, 356, 357], "instance_method": [353, 357], "test_gradi": 353, "topic": [353, 363, 1762], "suffic": [353, 357], "program": [354, 1759, 1760, 1762, 1765, 1766, 1769], "ration": [354, 359], "speak": 354, "x_nativ": 354, "val_n": 354, "unspecifi": 354, "predominantli": [354, 358, 377], "support_native_out": 354, "math": [354, 355, 357, 366, 1752, 1760], "mx": 354, "nd": 354, "_wrap_fn": 354, "dim0": 354, "dim1": 354, "maxim": [354, 359, 361, 1759, 1760, 1764, 1765, 1766], "third": [354, 378, 1761, 1762, 1768], "leverag": [354, 1760, 1762], "capabl": [354, 359], "input_arrai": 354, "plai": [355, 357, 366, 1762, 1765], "tf_frontend": 355, "lax": [355, 356, 359, 366, 378], "neither": [355, 359], "fn_tree": [355, 356], "wrong": [355, 359], "carefulli": [355, 1760, 1765], "acceler": [355, 1752, 1760, 1764, 1765, 1766, 1767], "algebra": [355, 1480, 1760, 1761, 1762, 1765, 1769], "xla": [355, 378, 1751, 1762], "decompos": 355, "dynamic": 355, "extent": 355, "mimic": 355, "arithmetic_oper": 355, "same_kind": 355, "subok": [355, 356, 359], "as_ivy_dtyp": 355, "recov": 355, "obtain": 355, "unhandl": 355, "seek": 355, "subclass": [355, 359], "trigonometric_funct": 355, "from_zero_dim_arrays_to_float": [355, 379], "pointwise_op": 355, "preferred_element_typ": 355, "conv_general_dil": 355, "finer": 355, "nor": [355, 1766], "margin": 355, "fit": [355, 361, 1758, 1759, 1762], "meet": 355, "criteria": 355, "incorpor": [355, 364, 1762], "omiss": 355, "sensibl": 355, "deem": 355, "reserv": 355, "resum": 355, "possibli": [355, 357, 378], "straight": [355, 357, 363, 1752], "ahead": [355, 1762], "heavi": [355, 356, 359, 1763], "logicaland": 355, "truth": [355, 357], "np_frontend": 355, "radd": 355, "_init_data": 355, "isinst": [355, 357, 358, 365, 366], "_process_str_data": 355, "2d": 355, "_shape": [355, 363], "_dtype": [355, 363], "govern": 355, "promote_types_of_": 355, "_input": 355, "promote_types_of_tensorflow_input": 355, "saniti": 355, "handle_numpy_cast": 355, "func_wrapp": [355, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389], "to_ivy_arrays_and_back": [355, 356], "handle_numpy_casting_speci": 355, "equiv": 355, "safe": 355, "unsaf": 355, "array_type_test": 355, "watch": 355, "youtub": 355, "seri": [355, 357, 1762, 1764], "jump": 356, "knowledg": 356, "test_frontend_funct": 356, "lift": [356, 1763], "get_dtyp": [356, 357], "dtype_and_valu": [356, 357], "num_positional_arg": [356, 357], "get_shap": [356, 357], "np_frontend_help": 356, "nn": [356, 359, 366, 1752, 1763], "test_jax": 356, "test_jax_lax_oper": 356, "dtype_and_x": [356, 357], "available_dtyp": [356, 357], "test_jax_lax_tan": 356, "input_dtyp": [356, 357], "as_variable_flag": [356, 357], "native_array_flag": [356, 357], "test_numpi": 356, "test_mathematical_funct": 356, "test_np_trigonometric_funct": 356, "test_numpy_tan": 356, "handle_where_and_array_bool": 356, "test_tensorflow": 356, "test_math": 356, "test_tensorflow_tan": 356, "test_torch": 356, "test_non_linear_activation_funct": 356, "st": [356, 357], "min_valu": [356, 357], "max_valu": [356, 357], "with_inplac": 356, "test_torch_leaky_relu": 356, "negative_slop": 356, "_fill_valu": 356, "allow_non": [356, 357], "min_num_dim": [356, 357], "max_num_dim": [356, 357], "min_dim_s": [356, 357], "max_dim_s": 356, "test_jax_lax_ful": 356, "test_from_shape_or_valu": 356, "test_numpy_ful": 356, "test_tf_funct": 356, "test_tensorflow_ful": 356, "discrep": 356, "test_creation_op": 356, "_requires_grad": 356, "test_torch_ful": 356, "accommod": 356, "walkthrough": 356, "torch_frontend": 356, "gt": [356, 361], "comparison_op": 356, "promote_types_of_torch_input": 356, "test_comparison_op": 356, "dtype_and_input": 356, "allow_inf": [356, 357], "shared_dtyp": 356, "test_torch_great": 356, "has_alias": 356, "all_alias": 356, "test_frontend_instance_method": 356, "frontend_class": 356, "test_jax_devicearrai": 356, "test_jax_instance_add": 356, "test_frontend_array_instance_method": 356, "test_ndarrai": 356, "test_numpy_ndarray_add": 356, "test_frontend_method": 356, "input_dtypes_init": 356, "as_variable_flags_init": 356, "num_positional_args_init": 356, "native_array_flags_init": 356, "all_as_kwargs_np_init": 356, "input_dtypes_method": 356, "as_variable_flags_method": 356, "num_positional_args_method": 356, "native_array_flags_method": 356, "all_as_kwargs_np_method": 356, "class_nam": 356, "method_nam": 356, "test_tensor": 356, "test_tensorflow_instance_add": 356, "1e04": 356, "1e06": 356, "allow_infin": 356, "test_torch_instance_add": 356, "somewhat": [356, 378, 1762], "value_test": 356, "dtype_x": 356, "test_jax_special_add": 356, "ret_gt": 356, "flatten_and_to_np": 356, "zip": [356, 361], "ret_from_gt": 356, "ground_truth_backend": 356, "_arrays_idx_n_dtyp": 356, "test_manipul": [356, 357], "surprisingli": 356, "cat": [356, 359, 361, 366], "closest_relevant_group": 356, "strive": [356, 357, 359, 378, 1764], "cycl": 357, "exhaust": [357, 1759, 1768], "fixtur": 357, "hit": [357, 361], "eleg": [357, 1762], "intellig": [357, 359, 1764], "unexplor": 357, "repeatedli": 357, "upload": 357, "artifact": 357, "parametr": [357, 1762], "impli": 357, "bespok": 357, "_array_or_typ": 357, "standalon": [357, 1751, 1758, 1763, 1768, 1769], "test_default_int_dtyp": 357, "clariti": [357, 359, 1762], "print_hypothesis_exampl": 357, "searchstrategi": 357, "custom_strategi": 357, "sampled_from": 357, "randomis": 357, "simplist": 357, "intricaci": 357, "one_of": 357, "datum": 357, "pipe": 357, "overload": 357, "shorthand": 357, "flatmap": 357, "suppos": 357, "scaler": 357, "array_or_scal": 357, "len_of_arrai": 357, "interact": [357, 1752, 1761, 1762, 1767], "bodi": 357, "reusabl": [357, 378, 1760, 1762], "snippet": 357, "container_flag": 357, "thankfulli": 357, "advis": 357, "seamlessli": 357, "encount": 357, "criterion": 357, "array_valu": 357, "valid_ax": 357, "craft": 357, "hoc": 357, "intersect": [357, 377], "44758124e": 357, "308": 357, "11228": 357, "456": 357, "268": 357, "wherev": 357, "dtype_values_axi": 357, "9622": 357, "28136": 357, "6375": 357, "12720": 357, "21354": 357, "900e": 357, "00": 357, "955e": 357, "exclude_min": 357, "large_abs_safety_factor": 357, "safety_factor_scal": 357, "57384": 357, "25687": 357, "248": 357, "array_dtyp": 357, "min_siz": 357, "max_siz": 357, "array_bool": 357, "na": 357, "test_devic": 357, "array_shap": 357, "common_shap": 357, "test_lay": 357, "size_bound": 357, "reshape_shap": 357, "stand": 357, "fashion": 357, "some_sequ": 357, "allow_nan": 357, "allow_subnorm": 357, "get_bound": 357, "arrays_valu": 357, "36418": 357, "213": 357, "21716926": 357, "none_or_list_of_float": 357, "get_prob": 357, "get_mean_std": 357, "103515625e": 357, "099609375": 357, "probabilist": 357, "get_axi": 357, "number_positional_argu": 357, "unreproduc": 357, "test_valu": 357, "enough": [357, 363, 364, 365], "report": 357, "valid_float_dtyp": 357, "test_demo": 357, "falsifi": 357, "failing_test": 357, "traceback": 357, "file_nam": [357, 358], "shrink": 357, "prescrib": 357, "closest": [357, 359], "scratch": 357, "databas": 357, "therebi": 357, "test_gelu": 357, "test_fil": 357, "brief": 357, "phase": [357, 378, 1762], "notabl": [357, 1762], "verbos": [357, 361, 1752, 1813], "newer": 357, "max_exampl": 357, "impact": [357, 365, 1764], "deadlin": 357, "weird": 357, "systemat": 357, "safeguard": 357, "inabl": 357, "test_result_typ": 357, "9090909090909091": 357, "linear_algebra": 358, "judgement": 358, "some_namespac": 358, "some_backend": 358, "another_backend": 358, "refactor": 358, "ongo": 358, "cooler": 358, "something_cool": 358, "clean": [358, 359, 361, 362, 364], "_assert_fill_value_and_dtype_are_compat": 358, "_to_devic": 358, "focus": [358, 377, 1760, 1761, 1762, 1768, 1769], "prior": [358, 448, 450], "older": 358, "grow": [358, 1752, 1762], "unbound": 358, "battl": 358, "face": [359, 361, 1762, 1768], "answer": [359, 363, 378], "contradict": 359, "entail": 359, "sacrif": 359, "dimems": 359, "conv": 359, "jacfwd": 359, "jacrev": 359, "banner": 359, "pointwis": 359, "unnecessari": 359, "fuse": 359, "tensorrt": 359, "highli": [359, 1762], "expens": 359, "incredibli": [359, 364, 378, 1765], "six": 359, "__gt__": 359, "price": 359, "pai": 359, "intrus": 359, "x_beta": 359, "equip": 359, "deliber": 359, "priorit": 359, "simplif": 359, "allevi": 359, "ineffici": [359, 378, 1762], "fledg": [361, 362], "syntact": [361, 366], "logspac": 361, "construct": [361, 365, 366, 1760, 1762, 1769], "power_seq": 361, "backend_stack": 361, "cprint": [361, 1812], "_determine_backend_from_arg": 361, "importlib": 361, "import_modul": 361, "_backend_dict": 361, "illustr": [361, 377], "un": 361, "unrol": [361, 364], "lstm": [361, 1762], "cell": 361, "hidden": [361, 365], "recurr": [361, 1762, 1766], "timestep": 361, "x_shape": 361, "input_channel": [361, 365], "x_flat": 361, "wi": 361, "wi_x": 361, "wii_x": 361, "wif_x": 361, "wig_x": 361, "wio_x": 361, "wh": 361, "ht": 361, "ct": 361, "hts_list": 361, "wii_xt": 361, "wif_xt": 361, "wig_xt": 361, "wio_xt": 361, "htm1": 361, "ctm1": 361, "wh_htm1": 361, "whi_htm1": 361, "whf_htm1": 361, "whg_htm1": 361, "who_htm1": 361, "ft": 361, "ot": 361, "reliabl": 361, "sacrific": 361, "hear": 361, "virtu": [361, 1759], "pure_ivi": 361, "compile_graph": [361, 366], "pure_torch": 361, "backbon": [361, 364], "_layer": 361, "random_unifrom": 361, "unclean": 361, "wx": 361, "temp": 361, "ivy_func": 361, "emphas": 361, "torchscript": [361, 1751, 1769], "example_input": 361, "static_argnum": 361, "static_argnam": 361, "jit": [361, 378, 1762], "primit": [362, 378, 1760, 1762], "upcom": 362, "hierarch": [362, 364, 365, 1762], "_init": 363, "_size": 363, "mul": 363, "_devic": 363, "_dev_str": 363, "as_ivy_dev": 363, "_pre_repr": 363, "_post_repr": 363, "framework_str": 363, "noinspect": 363, "pypep8nam": 363, "typeerror": 363, "immut": 363, "claim": 363, "truli": 363, "_native_wrapp": 363, "attributeerror": 363, "genuin": 363, "some_method": 363, "rewritten": 363, "__pow__": 363, "strang": 363, "compartment": 363, "public": [363, 1765], "newshap": 363, "new_shap": 363, "tidi": 363, "shorter": 363, "crystal": 363, "ton": 364, "ado": [364, 365], "soup": 364, "walk": [364, 365], "dct": 364, "cnt": 364, "combo": 364, "1000": 364, "3333335": 364, "grad": [364, 365, 366, 1752], "delimit": 364, "autocomplet": 364, "midwai": 364, "agent": 364, "total_spe": 364, "total_height": 364, "total_width": 364, "ag": 364, "tot": 364, "total_": 364, "total_h": 364, "cnt0": 364, "cnt1": 364, "diff_0": 364, "diff_1": 364, "config0": 364, "config1": 364, "decod": 364, "l0": 364, "truncat": 364, "decoder__l0": 364, "decoder__l1": 364, "encoder__l0": 364, "encoder__l1": 364, "height": 364, "l0__b": 364, "l0__w": 364, "l1__b": 364, "l1__w": 364, "printabl": 364, "obviou": [364, 1762], "foresight": 364, "untidili": 364, "update_ag": 364, "normalize_img": 364, "img": 364, "img_max": 364, "reduce_max": [364, 1752], "img_min": 364, "reduce_min": [364, 1752], "img_rang": 364, "agent_posit": 364, "agent_veloc": 364, "agent_cam_front_rgb": 364, "agent_cam_front_depth": 364, "agent_cam_rear_rgb": 364, "agent_cam_rear_depth": 364, "agent_cam_lidar": 364, "camera": 364, "front_rgb": 364, "front_depth": 364, "rear_rgb": 364, "rear_depth": 364, "lidar": 364, "rgb": 364, "rear": 364, "veloc": 364, "cam": 364, "cam_max": 364, "cam_min": 364, "cam_rang": 364, "Of": [364, 1767, 1768], "perman": 364, "thread": [364, 1762], "pretti": [364, 1768], "dataload": [364, 376, 1752], "_cnt": 364, "img_": 364, "_dataset_s": 364, "_batch_siz": 364, "_count": [364, 365], "__next__": 364, "filenam": 364, "img_fnam": 364, "fname": 364, "loaded_img": 364, "cv2": 364, "imread": 364, "from_numpi": 364, "loader": [364, 378], "batch_slic": 364, "model": [364, 365, 1751, 1752, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1768, 1769], "mymodel": [364, 1752], "linear0": [364, 365, 1752], "linear1": [364, 365, 1752], "x_in": [364, 365, 366, 1752], "loss_fn": [364, 365, 366, 1752], "reduce_mean": [364, 365, 366, 1752], "execute_with_gradi": [364, 365, 366, 378, 1752], "0145": 364, "grad_fn": 364, "addbackward0": 364, "_create_vari": 365, "output_channel": 365, "with_bia": 365, "_input_channel": 365, "_output_channel": 365, "_w_shape": 365, "_b_shape": 365, "_with_bia": 365, "396": 365, "764": 365, "872": 365, "211": 365, "439": 365, "nightmar": 365, "overcom": 365, "fc": 365, "v0": 365, "v1": 365, "key0": 365, "linear3": 365, "v2": 365, "counter": 365, "fed": 365, "weight_initi": 365, "glorotuniform": 365, "bias_initi": 365, "_w_init": 365, "_b_init": 365, "create_vari": 365, "var_shap": 365, "fan_out": 365, "fan_in": 365, "fan_mod": 365, "fan_sum": 365, "misnom": 365, "saw": 365, "vanilla": [365, 1762], "compile_on_next_step": 365, "_beta1": 365, "_beta2": 365, "_epsilon": 365, "_mw": 365, "_vw": 365, "_first_pass": 365, "_should_compil": 365, "_step": 365, "new_v": 365, "_lr": 365, "_inplac": 365, "_stop_gradi": 365, "set_stat": 365, "clamp": 366, "clip_by_valu": 366, "captur": [366, 1763], "sparse_funct": 366, "num_class": 366, "new_axi": 366, "_linear": 366, "jax_graph": 366, "to_backend": 366, "to_ivy_modul": 366, "thinli": 366, "whilst": [366, 1751, 1762], "to_haiku_modul": 366, "hk": 366, "loss_fn_t": 366, "without_apply_rng": 366, "rng": 366, "prngkei": 366, "update_rul": 366, "tree_multimap": 366, "mechan": [376, 378, 1752], "robot": [376, 1752], "perfect": 377, "3d": 377, "differenti": [377, 1762], "orient": 377, "pose": 377, "euler": 377, "quaternion": 377, "ivy_mech": 377, "target_facing_rotation_matrix": 377, "polar_to_cartesian_coord": 377, "ordin": 377, "warp": 377, "optic": 377, "voxel": 377, "ivy_vis": 377, "coords_to_voxel_grid": 377, "render_pixel_coord": 377, "neural": [377, 1752, 1758, 1760, 1761, 1762, 1766, 1768, 1769], "radianc": 377, "nerf": 377, "trajectori": 377, "motion": 377, "plan": [377, 1752], "mobil": [377, 1762], "sample_spline_path": 377, "rigidmobil": 377, "sample_bodi": 377, "drone": 377, "sample_link": 377, "openai": 377, "swimmer": 377, "reward": 377, "supervis": 377, "reinforc": 377, "door": [377, 378], "cartpol": 377, "mountain_car": 377, "pendulum": 377, "reacher": 377, "learnt": 377, "ture": 377, "ntm": 377, "egospher": 377, "spatial": 377, "esm": 377, "ivy_memori": 377, "egocentr": 377, "room": 377, "inspir": 377, "doubt": 378, "grate": 378, "probe": 378, "remark": 378, "surpris": 378, "lock": 378, "gold": 378, "dex": 378, "ye": 378, "scan": 378, "tricki": [378, 1751], "predictor": 378, "tight": 378, "driver": 378, "schedul": [378, 1762, 1769], "Will": 378, "ast": 378, "cond": 378, "jacobian": [378, 1762], "checkpoint": 378, "autodiff": 378, "shine": 378, "merci": 378, "autograd": 378, "cluster": [378, 1762], "compet": [378, 1762], "paradigm": [378, 1762], "parallelis": 378, "spmd": 378, "mixtur": 378, "expert": 378, "sophist": 378, "depart": 378, "routin": [378, 1762], "hundr": 378, "thousand": 378, "deepli": [378, 1762], "broadli": [378, 1768], "supplementari": 378, "fanci": [378, 1762], "fusion": [378, 1766], "lose": 378, "vmap": [378, 1762], "pmap": 378, "overhead": [378, 1765], "eventu": 378, "supplement": 378, "backdoor": 378, "callback": 378, "record": [378, 1763], "metric": 378, "outsourc": 378, "integer_arrays_to_float": 379, "with_supported_device_and_dtyp": 379, "version_dict": 379, "with_supported_devic": 379, "with_unsupported_device_and_dtyp": 379, "with_unsupported_devic": 379, "0800": [394, 395], "3979": [394, 395], "9121": [394, 395], "5400": [394, 395], "han": [394, 396], "taper": [394, 396], "00713103": [394, 397], "99997455": [394, 397], "kaiser_derived_window": [394, 397], "00726415": [394, 397], "9999736": [394, 397], "2773e": [394, 398], "0172e": [394, 398], "9294e": [394, 398], "4149": [394, 398], "9138": [394, 398], "5529": [394, 398], "row": [394, 399, 431, 434, 444], "col": [394, 399], "retain": [394, 399, 1751], "upward": [394, 399], "downward": [394, 399], "2xn": [394, 399], "subarrai": [394, 399], "vorbis_window": 394, "vorbi": [394, 400], "complementari": [394, 400, 1760, 1768], "38268346": [394, 400], "38268352": [394, 400], "14943586": [394, 400], "8563191": [394, 400], "14943568": [394, 400], "position": [403, 405], "inexact": [403, 405], "greatest": [403, 408], "1e10": [403, 409], "00001e10": [403, 409], "999999e": [403, 409], "005": [403, 409], "suppli": [403, 416, 431, 441], "princip": [403, 417], "217234": [403, 417], "dimensio": [421, 422, 425], "avg": [421, 423], "th": [427, 428], "superdiagon": [427, 428], "subdiagon": [427, 428], "manipulation_funct": [431, 432], "horizot": [431, 436], "ndenumer": 431, "multidimension": [431, 439, 440, 1762], "ndindex": 431, "before_1": [431, 441], "after_1": [431, 441], "before_n": [431, 441], "after_n": [431, 441], "width": [431, 441], "linear_ramp": [431, 441], "ramp": [431, 441], "padding_func": [431, 441], "iaxis_pad_width": [431, 441], "iaxi": [431, 441], "unalt": [431, 441], "multivari": [448, 450], "conjug": [448, 450], "bayesian": [448, 450], "sparse_arrai": [456, 457, 458, 459, 460], "nativesparsearrai": 456, "sparsearrai": 456, "coo_indic": [456, 459], "csr_crow_indic": [456, 459], "csr_col_indic": [456, 459], "dense_shap": [456, 459], "to_dense_arrai": 456, "is_ivy_sparse_arrai": 456, "is_native_sparse_arrai": 456, "native_sparse_arrai": 456, "native_sparse_array_to_indices_values_and_shap": 456, "nail": 1751, "funtion": 1751, "asset": 1751, "functiona": 1751, "scientist": 1751, "deploi": [1751, 1760, 1761, 1762, 1764, 1768], "correl": 1751, "analyz": 1751, "ai": [1752, 1760, 1764], "colab": 1752, "sharp": 1752, "favorit": 1752, "jax_concat": 1752, "tf_concat": 1752, "np_concat": 1752, "torch_concat": 1752, "get_devic": 1752, "reduce_prod": 1752, "reduce_sum": 1752, "gradient_imag": 1752, "indices_wher": 1752, "bilinear_resampl": 1752, "stack_imag": 1752, "neural_net": 1752, "floormod": 1752, "articl": 1752, "lenton2021ivi": 1752, "inter": 1752, "lenton": 1752, "daniel": 1752, "pardo": 1752, "fabio": 1752, "falck": 1752, "fabian": 1752, "jame": 1752, "stephen": 1752, "clark": 1752, "ronald": 1752, "journal": 1752, "arxiv": 1752, "preprint": 1752, "2102": 1752, "02886": 1752, "2021": 1752, "conceptu": [1758, 1763], "broken": [1758, 1762], "tracer": 1758, "infrastructur": [1758, 1764, 1765], "vendor": [1758, 1764], "complimentari": [1758, 1768], "acycl": [1758, 1763], "insert_numb": 1759, "insert_t": 1759, "scaffold": [1760, 1768], "heart": 1760, "toolchain": [1760, 1765], "intermedi": [1760, 1761, 1762, 1763, 1768], "ir": [1760, 1763, 1768], "assembli": [1760, 1767, 1768], "idl": 1760, "middl": 1760, "emit": 1760, "gnu": [1760, 1765], "gcc": [1760, 1767], "broader": 1760, "heterogen": 1760, "aid": 1760, "coprocessor": 1760, "programm": [1760, 1767], "gate": 1760, "onednn": 1760, "awai": [1760, 1762], "sit": [1760, 1763, 1768], "tandem": 1760, "possess": 1760, "underneath": 1760, "export": [1761, 1768], "signal": [1761, 1762], "khrono": [1761, 1767], "appl": 1761, "coremltool": 1761, "albeit": 1761, "promin": 1762, "abbrevi": 1762, "laboratori": 1762, "proprietari": [1762, 1766, 1767], "mathwork": 1762, "commerci": 1762, "1984": 1762, "plot": 1762, "toolbox": 1762, "mupad": 1762, "engin": [1762, 1764, 1765], "simulink": 1762, "graphic": [1762, 1766, 1767], "simul": 1762, "embed": 1762, "million": [1762, 1765], "worldwid": 1762, "scienc": [1762, 1764], "econom": 1762, "2001": 1762, "scientif": 1762, "interpol": 1762, "od": 1762, "solver": 1762, "fortran": [1762, 1766], "cython": 1762, "friendli": 1762, "2002": 1762, "lua": 1762, "luajit": 1762, "idiap": 1762, "epfl": 1762, "2005": 1762, "numarrai": 1762, "cpython": 1762, "partli": 1762, "2007": 1762, "classif": 1762, "regress": [1762, 1769], "forest": 1762, "boost": 1762, "dbscan": 1762, "inbuilt": 1762, "esqu": 1762, "aesara": 1762, "2008": 1762, "datafram": 1762, "critic": [1762, 1768], "2012": 1762, "Its": 1762, "polymorph": 1762, "parallel": [1762, 1766, 1767], "mpi": 1762, "openmp": 1762, "glue": 1762, "jaot": 1762, "nasa": 1762, "cern": 1762, "climat": 1762, "allianc": 1762, "influenti": 1762, "2014": 1762, "analyt": [1762, 1764, 1768], "scala": 1762, "ship": 1762, "forgiv": 1762, "decemb": 1762, "2019": [1762, 1765], "announc": 1762, "transit": 1762, "mainten": 1762, "v7": 1762, "meaning": 1762, "2016": 1762, "imper": 1762, "fast": 1762, "amazon": 1762, "traction": 1762, "cognit": [1762, 1769], "toolkit": [1762, 1763, 1769], "grade": 1762, "realiz": 1762, "feed": [1762, 1763], "dnn": 1762, "cnn": 1762, "rnn": 1762, "stochast": 1762, "sgd": 1762, "backpropag": 1762, "succumb": 1762, "came": 1762, "monitor": 1762, "practition": [1762, 1766, 1767, 1768], "hobbyist": 1762, "tremend": 1762, "ecosystem": 1762, "gear": 1762, "batteri": 1762, "zygot": 1762, "jl": 1762, "workload": 1762, "daggerflux": 1762, "frontier": 1762, "hessian": 1762, "2018": 1762, "lightweight": [1762, 1769], "shortcom": 1762, "eas": 1762, "barrier": 1762, "inexperienc": 1762, "underdevelop": 1762, "fanat": 1762, "ounc": 1762, "infanc": 1762, "emerg": 1762, "nich": 1762, "introduct": 1762, "lite": 1762, "enterpris": 1762, "reinvent": [1762, 1764], "inertia": 1762, "haven": 1762, "creator": [1762, 1764], "paszk": 1762, "hi": 1762, "safeti": 1762, "bulk": 1762, "haskel": 1762, "dataflow": 1763, "distil": 1763, "essenc": [1763, 1768], "enclos": 1763, "scope": [1763, 1767], "trace_modul": 1763, "scriptfunct": 1763, "scriptmodul": 1763, "fake": 1763, "proxi": 1763, "site": 1763, "graphmodul": 1763, "travi": 1764, "oliph": 1764, "leader": 1764, "led": 1764, "cornerston": 1764, "numba": 1764, "numfocu": 1764, "pydata": 1764, "confer": 1764, "consult": 1764, "servic": 1764, "expertis": 1764, "devop": 1764, "mlop": 1764, "dashboard": 1764, "startup": 1764, "mlir": [1764, 1765, 1768], "Their": 1764, "held": 1764, "privileg": 1764, "presum": 1764, "llvm": [1764, 1767], "founder": 1764, "tvm": [1764, 1768], "sustain": 1764, "empow": 1764, "har": 1764, "burden": 1764, "benchmark": 1764, "convention": 1765, "precompil": 1765, "executor": 1765, "exploit": 1765, "julia": [1765, 1768], "fsf": 1765, "gpl": 1765, "biggest": [1765, 1768], "nvidia": [1766, 1767], "conduct": 1766, "throughput": 1766, "autotun": 1766, "consumpt": 1766, "gpgpu": 1766, "talk": 1767, "classic": 1767, "sycl": 1767, "dpc": 1767, "processor": 1767, "x86": 1767, "oneapi": 1767, "ia": 1767, "aka": 1767, "xeon": 1767, "gen9": 1767, "xe": 1767, "card": 1767, "arria": 1767, "gx": 1767, "fpga": 1767, "tune": [1767, 1768], "lofti": 1768, "ambit": 1768, "realm": 1768, "bedrock": 1768, "flux": 1768, "bite": 1768, "chew": 1768, "eagerpi": 1768, "tensorli": 1768, "thinc": 1768, "neuropod": 1768, "exhibit": 1768, "emploi": 1768, "fx": 1768, "retrain": 1768, "wider": 1768, "closer": 1768, "greatli": 1768, "challeng": 1768, "modular": 1768, "anywher": 1768, "switch": 1769, "theano": 1769, "plaidml": 1769, "partial_svd": 1769, "tucker_mode_dot": 1769, "excel": 1769, "subsystem": 1769}, "objects": {"ivy.array": [[45, 0, 0, "-", "activations"], [47, 0, 0, "-", "array"], [49, 0, 0, "-", "conversions"], [55, 0, 0, "-", "creation"], [57, 0, 0, "-", "data_type"], [59, 0, 0, "-", "device"], [61, 0, 0, "-", "elementwise"], [63, 0, 0, "-", "experimental"], [140, 0, 0, "-", "general"], [142, 0, 0, "-", "gradients"], [144, 0, 0, "-", "image"], [146, 0, 0, "-", "layers"], [148, 0, 0, "-", "linalg"], [150, 0, 0, "-", "losses"], [152, 0, 0, "-", "manipulation"], [154, 0, 0, "-", "norms"], [156, 0, 0, "-", "random"], [158, 0, 0, "-", "searching"], [160, 0, 0, "-", "set"], [162, 0, 0, "-", "sorting"], [164, 0, 0, "-", "statistical"], [166, 0, 0, "-", "utility"], [168, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[46, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[46, 2, 1, "", "gelu"], [46, 2, 1, "", "leaky_relu"], [46, 2, 1, "", "log_softmax"], [46, 2, 1, "", "relu"], [46, 2, 1, "", "sigmoid"], [46, 2, 1, "", "softmax"], [46, 2, 1, "", "softplus"]], "ivy.array.array": [[48, 1, 1, "", "Array"]], "ivy.array.array.Array": [[48, 3, 1, "", "T"], [48, 2, 1, "", "__add__"], [48, 2, 1, "", "__init__"], [48, 2, 1, "", "__le__"], [48, 2, 1, "", "__radd__"], [48, 2, 1, "", "__rrshift__"], [48, 2, 1, "", "__rshift__"], [48, 2, 1, "", "__rsub__"], [48, 2, 1, "", "__sub__"], [48, 3, 1, "", "data"], [48, 3, 1, "", "device"], [48, 3, 1, "", "dtype"], [48, 3, 1, "", "mT"], [48, 3, 1, "", "ndim"], [48, 3, 1, "", "shape"], [48, 3, 1, "", "size"]], "ivy.array.conversions": [[50, 4, 1, "", "args_to_ivy"], [51, 4, 1, "", "args_to_native"], [52, 4, 1, "", "to_ivy"], [53, 4, 1, "", "to_ivy_array"], [54, 4, 1, "", "to_native"]], "ivy.array.creation": [[56, 1, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[56, 2, 1, "", "asarray"], [56, 2, 1, "", "copy_array"], [56, 2, 1, "", "empty_like"], [56, 2, 1, "", "from_dlpack"], [56, 2, 1, "", "full_like"], [56, 2, 1, "", "meshgrid"], [56, 2, 1, "", "native_array"], [56, 2, 1, "", "one_hot"], [56, 2, 1, "", "ones_like"], [56, 2, 1, "", "tril"], [56, 2, 1, "", "triu"], [56, 2, 1, "", "zeros_like"]], "ivy.array.data_type": [[58, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[58, 2, 1, "", "astype"], [58, 2, 1, "", "broadcast_arrays"], [58, 2, 1, "", "broadcast_to"], [58, 2, 1, "", "can_cast"], [58, 2, 1, "", "dtype"], [58, 2, 1, "", "finfo"], [58, 2, 1, "", "iinfo"], [58, 2, 1, "", "is_bool_dtype"], [58, 2, 1, "", "is_float_dtype"], [58, 2, 1, "", "is_int_dtype"], [58, 2, 1, "", "is_uint_dtype"], [58, 2, 1, "", "result_type"]], "ivy.array.device": [[60, 1, 1, "", "ArrayWithDevice"]], "ivy.array.device.ArrayWithDevice": [[60, 2, 1, "", "dev"], [60, 2, 1, "", "to_device"]], "ivy.array.elementwise": [[62, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[62, 2, 1, "", "abs"], [62, 2, 1, "", "acos"], [62, 2, 1, "", "acosh"], [62, 2, 1, "", "add"], [62, 2, 1, "", "asin"], [62, 2, 1, "", "asinh"], [62, 2, 1, "", "atan"], [62, 2, 1, "", "atan2"], [62, 2, 1, "", "atanh"], [62, 2, 1, "", "bitwise_and"], [62, 2, 1, "", "bitwise_invert"], [62, 2, 1, "", "bitwise_left_shift"], [62, 2, 1, "", "bitwise_or"], [62, 2, 1, "", "bitwise_right_shift"], [62, 2, 1, "", "bitwise_xor"], [62, 2, 1, "", "ceil"], [62, 2, 1, "", "cos"], [62, 2, 1, "", "cosh"], [62, 2, 1, "", "deg2rad"], [62, 2, 1, "", "divide"], [62, 2, 1, "", "equal"], [62, 2, 1, "", "erf"], [62, 2, 1, "", "exp"], [62, 2, 1, "", "expm1"], [62, 2, 1, "", "floor"], [62, 2, 1, "", "floor_divide"], [62, 2, 1, "", "greater"], [62, 2, 1, "", "greater_equal"], [62, 2, 1, "", "isfinite"], [62, 2, 1, "", "isinf"], [62, 2, 1, "", "isnan"], [62, 2, 1, "", "isreal"], [62, 2, 1, "", "less"], [62, 2, 1, "", "less_equal"], [62, 2, 1, "", "log"], [62, 2, 1, "", "log10"], [62, 2, 1, "", "log1p"], [62, 2, 1, "", "log2"], [62, 2, 1, "", "logaddexp"], [62, 2, 1, "", "logical_and"], [62, 2, 1, "", "logical_not"], [62, 2, 1, "", "logical_or"], [62, 2, 1, "", "logical_xor"], [62, 2, 1, "", "maximum"], [62, 2, 1, "", "minimum"], [62, 2, 1, "", "multiply"], [62, 2, 1, "", "negative"], [62, 2, 1, "", "not_equal"], [62, 2, 1, "", "positive"], [62, 2, 1, "", "pow"], [62, 2, 1, "", "rad2deg"], [62, 2, 1, "", "reciprocal"], [62, 2, 1, "", "remainder"], [62, 2, 1, "", "round"], [62, 2, 1, "", "sign"], [62, 2, 1, "", "sin"], [62, 2, 1, "", "sinh"], [62, 2, 1, "", "sqrt"], [62, 2, 1, "", "square"], [62, 2, 1, "", "subtract"], [62, 2, 1, "", "tan"], [62, 2, 1, "", "tanh"], [62, 2, 1, "", "trunc"], [62, 2, 1, "", "trunc_divide"]], "ivy.array.experimental": [[64, 0, 0, "-", "activations"], [102, 0, 0, "-", "conversions"], [104, 0, 0, "-", "creation"], [106, 0, 0, "-", "data_type"], [108, 0, 0, "-", "device"], [110, 0, 0, "-", "elementwise"], [112, 0, 0, "-", "general"], [114, 0, 0, "-", "gradients"], [116, 0, 0, "-", "image"], [118, 0, 0, "-", "layers"], [120, 0, 0, "-", "linalg"], [122, 0, 0, "-", "losses"], [124, 0, 0, "-", "manipulation"], [126, 0, 0, "-", "norms"], [128, 0, 0, "-", "random"], [130, 0, 0, "-", "searching"], [132, 0, 0, "-", "set"], [134, 0, 0, "-", "sorting"], [136, 0, 0, "-", "statistical"], [138, 0, 0, "-", "utility"]], "ivy.array.experimental.activations": [[65, 1, 1, "", "ArrayWithActivationsExperimental"]], "ivy.array.experimental.conversions": [[103, 1, 1, "", "ArrayWithConversionsExperimental"]], "ivy.array.experimental.creation": [[105, 1, 1, "", "ArrayWithCreationExperimental"]], "ivy.array.experimental.data_type": [[107, 1, 1, "", "ArrayWithData_typeExperimental"]], "ivy.array.experimental.device": [[109, 1, 1, "", "ArrayWithDeviceExperimental"]], "ivy.array.experimental.elementwise": [[111, 1, 1, "", "ArrayWithElementWiseExperimental"]], "ivy.array.experimental.elementwise.ArrayWithElementWiseExperimental": [[111, 2, 1, "", "exp2"], [111, 2, 1, "", "float_power"], [111, 2, 1, "", "fmax"], [111, 2, 1, "", "fmod"], [111, 2, 1, "", "gcd"], [111, 2, 1, "", "isclose"], [111, 2, 1, "", "isneginf"], [111, 2, 1, "", "isposinf"], [111, 2, 1, "", "lcm"], [111, 2, 1, "", "logaddexp2"], [111, 2, 1, "", "nan_to_num"], [111, 2, 1, "", "nansum"], [111, 2, 1, "", "signbit"], [111, 2, 1, "", "sinc"], [111, 2, 1, "", "trapz"]], "ivy.array.experimental.general": [[113, 1, 1, "", "ArrayWithGeneralExperimental"]], "ivy.array.experimental.gradients": [[115, 1, 1, "", "ArrayWithGradientsExperimental"]], "ivy.array.experimental.image": [[117, 1, 1, "", "ArrayWithImageExperimental"]], "ivy.array.experimental.layers": [[119, 1, 1, "", "ArrayWithLayersExperimental"]], "ivy.array.experimental.layers.ArrayWithLayersExperimental": [[119, 2, 1, "", "avg_pool3d"], [119, 2, 1, "", "max_pool1d"], [119, 2, 1, "", "max_pool2d"], [119, 2, 1, "", "max_pool3d"]], "ivy.array.experimental.linalg": [[121, 1, 1, "", "ArrayWithLinalgExperimental"]], "ivy.array.experimental.linalg.ArrayWithLinalgExperimental": [[121, 2, 1, "", "diagflat"], [121, 2, 1, "", "kron"]], "ivy.array.experimental.losses": [[123, 1, 1, "", "ArrayWithLossesExperimental"]], "ivy.array.experimental.manipulation": [[125, 1, 1, "", "ArrayWithManipulationExperimental"]], "ivy.array.experimental.manipulation.ArrayWithManipulationExperimental": [[125, 2, 1, "", "flatten"], [125, 2, 1, "", "fliplr"], [125, 2, 1, "", "flipud"], [125, 2, 1, "", "heaviside"], [125, 2, 1, "", "hstack"], [125, 2, 1, "", "i0"], [125, 2, 1, "", "moveaxis"], [125, 2, 1, "", "pad"], [125, 2, 1, "", "rot90"], [125, 2, 1, "", "top_k"], [125, 2, 1, "", "vstack"]], "ivy.array.experimental.norms": [[127, 1, 1, "", "ArrayWithNormsExperimental"]], "ivy.array.experimental.random": [[129, 1, 1, "", "ArrayWithRandomExperimental"]], "ivy.array.experimental.random.ArrayWithRandomExperimental": [[129, 2, 1, "", "dirichlet"]], "ivy.array.experimental.searching": [[131, 1, 1, "", "ArrayWithSearchingExperimental"]], "ivy.array.experimental.set": [[133, 1, 1, "", "ArrayWithSetExperimental"]], "ivy.array.experimental.sorting": [[135, 1, 1, "", "ArrayWithSortingExperimental"]], "ivy.array.experimental.sorting.ArrayWithSortingExperimental": [[135, 2, 1, "", "msort"]], "ivy.array.experimental.statistical": [[137, 1, 1, "", "ArrayWithStatisticalExperimental"]], "ivy.array.experimental.statistical.ArrayWithStatisticalExperimental": [[137, 2, 1, "", "median"]], "ivy.array.experimental.utility": [[139, 1, 1, "", "ArrayWithUtilityExperimental"]], "ivy.array.general": [[141, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[141, 2, 1, "", "all_equal"], [141, 2, 1, "", "array_equal"], [141, 2, 1, "", "assert_supports_inplace"], [141, 2, 1, "", "clip_matrix_norm"], [141, 2, 1, "", "clip_vector_norm"], [141, 2, 1, "", "default"], [141, 2, 1, "", "einops_rearrange"], [141, 2, 1, "", "einops_reduce"], [141, 2, 1, "", "einops_repeat"], [141, 2, 1, "", "exists"], [141, 2, 1, "", "fourier_encode"], [141, 2, 1, "", "gather"], [141, 2, 1, "", "gather_nd"], [141, 2, 1, "", "get_num_dims"], [141, 2, 1, "", "has_nans"], [141, 2, 1, "", "inplace_decrement"], [141, 2, 1, "", "inplace_increment"], [141, 2, 1, "", "inplace_update"], [141, 2, 1, "", "is_array"], [141, 2, 1, "", "is_ivy_array"], [141, 2, 1, "", "is_ivy_container"], [141, 2, 1, "", "is_native_array"], [141, 2, 1, "", "scatter_flat"], [141, 2, 1, "", "scatter_nd"], [141, 2, 1, "", "stable_divide"], [141, 2, 1, "", "stable_pow"], [141, 2, 1, "", "supports_inplace_updates"], [141, 2, 1, "", "to_list"], [141, 2, 1, "", "to_numpy"], [141, 2, 1, "", "to_scalar"], [141, 2, 1, "", "value_is_nan"]], "ivy.array.gradients": [[143, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[143, 2, 1, "", "adam_step"], [143, 2, 1, "", "adam_update"], [143, 2, 1, "", "gradient_descent_update"], [143, 2, 1, "", "is_variable"], [143, 2, 1, "", "lamb_update"], [143, 2, 1, "", "lars_update"], [143, 2, 1, "", "optimizer_update"], [143, 2, 1, "", "stop_gradient"], [143, 2, 1, "", "variable"], [143, 2, 1, "", "variable_data"]], "ivy.array.image": [[145, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[147, 1, 1, "", "ArrayWithLayers"]], "ivy.array.layers.ArrayWithLayers": [[147, 2, 1, "", "conv1d"], [147, 2, 1, "", "conv1d_transpose"], [147, 2, 1, "", "conv2d"], [147, 2, 1, "", "conv3d"], [147, 2, 1, "", "conv3d_transpose"], [147, 2, 1, "", "depthwise_conv2d"], [147, 2, 1, "", "dropout"], [147, 2, 1, "", "linear"], [147, 2, 1, "", "lstm_update"], [147, 2, 1, "", "multi_head_attention"], [147, 2, 1, "", "scaled_dot_product_attention"]], "ivy.array.linalg": [[149, 1, 1, "", "ArrayWithLinalg"]], "ivy.array.linalg.ArrayWithLinalg": [[149, 2, 1, "", "cholesky"], [149, 2, 1, "", "cross"], [149, 2, 1, "", "det"], [149, 2, 1, "", "diag"], [149, 2, 1, "", "diagonal"], [149, 2, 1, "", "eigh"], [149, 2, 1, "", "eigvalsh"], [149, 2, 1, "", "inner"], [149, 2, 1, "", "inv"], [149, 2, 1, "", "matmul"], [149, 2, 1, "", "matrix_norm"], [149, 2, 1, "", "matrix_rank"], [149, 2, 1, "", "matrix_transpose"], [149, 2, 1, "", "outer"], [149, 2, 1, "", "pinv"], [149, 2, 1, "", "qr"], [149, 2, 1, "", "slogdet"], [149, 2, 1, "", "solve"], [149, 2, 1, "", "svd"], [149, 2, 1, "", "svdvals"], [149, 2, 1, "", "tensordot"], [149, 2, 1, "", "trace"], [149, 2, 1, "", "vander"], [149, 2, 1, "", "vecdot"], [149, 2, 1, "", "vector_norm"], [149, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[151, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[151, 2, 1, "", "binary_cross_entropy"], [151, 2, 1, "", "cross_entropy"], [151, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[153, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[153, 2, 1, "", "clip"], [153, 2, 1, "", "concat"], [153, 2, 1, "", "constant_pad"], [153, 2, 1, "", "expand_dims"], [153, 2, 1, "", "flip"], [153, 2, 1, "", "permute_dims"], [153, 2, 1, "", "repeat"], [153, 2, 1, "", "reshape"], [153, 2, 1, "", "roll"], [153, 2, 1, "", "split"], [153, 2, 1, "", "squeeze"], [153, 2, 1, "", "stack"], [153, 2, 1, "", "swapaxes"], [153, 2, 1, "", "tile"], [153, 2, 1, "", "unstack"], [153, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[155, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[155, 2, 1, "", "layer_norm"]], "ivy.array.random": [[157, 1, 1, "", "ArrayWithRandom"]], "ivy.array.random.ArrayWithRandom": [[157, 2, 1, "", "beta"], [157, 2, 1, "", "gamma"], [157, 2, 1, "", "multinomial"], [157, 2, 1, "", "randint"], [157, 2, 1, "", "random_normal"], [157, 2, 1, "", "random_uniform"], [157, 2, 1, "", "shuffle"]], "ivy.array.searching": [[159, 1, 1, "", "ArrayWithSearching"]], "ivy.array.searching.ArrayWithSearching": [[159, 2, 1, "", "argmax"], [159, 2, 1, "", "argmin"], [159, 2, 1, "", "argwhere"], [159, 2, 1, "", "nonzero"], [159, 2, 1, "", "where"]], "ivy.array.set": [[161, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[161, 2, 1, "", "unique_all"], [161, 2, 1, "", "unique_counts"], [161, 2, 1, "", "unique_inverse"], [161, 2, 1, "", "unique_values"]], "ivy.array.sorting": [[163, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[163, 2, 1, "", "argsort"], [163, 2, 1, "", "searchsorted"], [163, 2, 1, "", "sort"]], "ivy.array.statistical": [[165, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[165, 2, 1, "", "cumprod"], [165, 2, 1, "", "cumsum"], [165, 2, 1, "", "einsum"], [165, 2, 1, "", "max"], [165, 2, 1, "", "mean"], [165, 2, 1, "", "min"], [165, 2, 1, "", "prod"], [165, 2, 1, "", "std"], [165, 2, 1, "", "sum"], [165, 2, 1, "", "var"]], "ivy.array.utility": [[167, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[167, 2, 1, "", "all"], [167, 2, 1, "", "any"]], "ivy.array.wrapping": [[169, 4, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[1, 0, 0, "-", "assertions"], [19, 0, 0, "-", "backend_handler"], [379, 0, 0, "-", "func_wrapper"], [1812, 0, 0, "-", "verbosity"]], "ivy.assertions": [[2, 4, 1, "", "check_all"], [3, 4, 1, "", "check_all_or_any_fn"], [4, 4, 1, "", "check_any"], [5, 4, 1, "", "check_elem_in_list"], [6, 4, 1, "", "check_equal"], [7, 4, 1, "", "check_exists"], [8, 4, 1, "", "check_false"], [9, 4, 1, "", "check_fill_value_and_dtype_are_compatible"], [10, 4, 1, "", "check_gather_input_valid"], [11, 4, 1, "", "check_gather_nd_input_valid"], [12, 4, 1, "", "check_greater"], [13, 4, 1, "", "check_inplace_sizes_valid"], [14, 4, 1, "", "check_isinstance"], [15, 4, 1, "", "check_less"], [16, 4, 1, "", "check_one_way_broadcastable"], [17, 4, 1, "", "check_shape"], [18, 4, 1, "", "check_true"]], "ivy.backend_handler": [[19, 1, 1, "", "ContextManager"], [20, 4, 1, "", "choose_random_backend"], [21, 4, 1, "", "clear_backend_stack"], [22, 4, 1, "", "current_backend"], [23, 4, 1, "", "fn_name_from_version_specific_fn_name"], [24, 4, 1, "", "get_backend"], [25, 4, 1, "", "set_backend"], [26, 4, 1, "", "set_backend_to_specific_version"], [27, 4, 1, "", "set_jax_backend"], [28, 4, 1, "", "set_numpy_backend"], [29, 4, 1, "", "set_tensorflow_backend"], [30, 4, 1, "", "set_torch_backend"], [31, 4, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[19, 2, 1, "", "__init__"]], "ivy.container": [[171, 0, 0, "-", "activations"], [173, 0, 0, "-", "base"], [175, 0, 0, "-", "container"], [177, 0, 0, "-", "conversions"], [179, 0, 0, "-", "creation"], [181, 0, 0, "-", "data_type"], [183, 0, 0, "-", "device"], [185, 0, 0, "-", "elementwise"], [187, 0, 0, "-", "experimental"], [309, 0, 0, "-", "general"], [311, 0, 0, "-", "gradients"], [313, 0, 0, "-", "image"], [315, 0, 0, "-", "layers"], [317, 0, 0, "-", "linalg"], [319, 0, 0, "-", "losses"], [321, 0, 0, "-", "manipulation"], [323, 0, 0, "-", "norms"], [325, 0, 0, "-", "random"], [327, 0, 0, "-", "searching"], [329, 0, 0, "-", "set"], [331, 0, 0, "-", "sorting"], [333, 0, 0, "-", "statistical"], [335, 0, 0, "-", "utility"], [337, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[172, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[172, 2, 1, "", "gelu"], [172, 2, 1, "", "leaky_relu"], [172, 2, 1, "", "log_softmax"], [172, 2, 1, "", "relu"], [172, 2, 1, "", "sigmoid"], [172, 2, 1, "", "softmax"], [172, 2, 1, "", "softplus"], [172, 2, 1, "", "static_gelu"], [172, 2, 1, "", "static_leaky_relu"], [172, 2, 1, "", "static_log_softmax"], [172, 2, 1, "", "static_relu"], [172, 2, 1, "", "static_sigmoid"], [172, 2, 1, "", "static_softmax"], [172, 2, 1, "", "static_softplus"]], "ivy.container.base": [[174, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[174, 2, 1, "", "__getitem__"], [174, 2, 1, "", "__init__"], [174, 2, 1, "", "__setitem__"], [174, 2, 1, "", "all_false"], [174, 2, 1, "", "all_key_chains"], [174, 2, 1, "", "all_true"], [174, 2, 1, "", "as_bools"], [174, 2, 1, "", "assert_contains_sub_container"], [174, 2, 1, "", "assert_contains_sub_structure"], [174, 2, 1, "", "assert_identical"], [174, 2, 1, "", "assert_identical_structure"], [174, 2, 1, "", "at_key_chain"], [174, 2, 1, "", "at_key_chains"], [174, 2, 1, "", "at_keys"], [174, 2, 1, "", "combine"], [174, 2, 1, "", "common_key_chains"], [174, 3, 1, "", "config"], [174, 2, 1, "", "cont_inplace_update"], [174, 2, 1, "", "contains_sub_container"], [174, 2, 1, "", "contains_sub_structure"], [174, 2, 1, "", "copy"], [174, 2, 1, "", "create_if_absent"], [174, 2, 1, "", "cutoff_at_depth"], [174, 2, 1, "", "cutoff_at_height"], [174, 2, 1, "", "deep_copy"], [174, 3, 1, "", "dev"], [174, 3, 1, "", "dev_str"], [174, 2, 1, "", "diff"], [174, 2, 1, "", "duplicate_array_keychains"], [174, 2, 1, "", "find_sub_container"], [174, 2, 1, "", "find_sub_structure"], [174, 2, 1, "", "flatten_key_chain"], [174, 2, 1, "", "flatten_key_chains"], [174, 2, 1, "", "format_key_chains"], [174, 2, 1, "", "from_disk_as_hdf5"], [174, 2, 1, "", "from_disk_as_json"], [174, 2, 1, "", "from_disk_as_pickled"], [174, 2, 1, "", "from_flat_list"], [174, 2, 1, "", "h5_file_size"], [174, 2, 1, "", "handle_inplace"], [174, 2, 1, "", "has_key"], [174, 2, 1, "", "has_key_chain"], [174, 2, 1, "", "identical"], [174, 2, 1, "", "identical_array_shapes"], [174, 2, 1, "", "identical_configs"], [174, 2, 1, "", "identical_structure"], [174, 2, 1, "", "if_exists"], [174, 3, 1, "", "ivy"], [174, 2, 1, "", "key_chains_containing"], [174, 2, 1, "", "list_join"], [174, 2, 1, "", "list_stack"], [174, 2, 1, "", "map"], [174, 2, 1, "", "map_conts"], [174, 3, 1, "", "max_depth"], [174, 2, 1, "", "multi_map"], [174, 2, 1, "", "multi_map_in_static_method"], [174, 2, 1, "", "num_arrays"], [174, 2, 1, "", "overwrite_at_key_chain"], [174, 2, 1, "", "overwrite_at_key_chains"], [174, 2, 1, "", "prune_empty"], [174, 2, 1, "", "prune_key_chain"], [174, 2, 1, "", "prune_key_chains"], [174, 2, 1, "", "prune_key_from_key_chains"], [174, 2, 1, "", "prune_keys"], [174, 2, 1, "", "prune_keys_from_key_chains"], [174, 2, 1, "", "reduce"], [174, 2, 1, "", "remove_key_length_limit"], [174, 2, 1, "", "remove_print_limit"], [174, 2, 1, "", "reshape_like"], [174, 2, 1, "", "restructure"], [174, 2, 1, "", "restructure_key_chains"], [174, 2, 1, "", "set_at_key_chain"], [174, 2, 1, "", "set_at_key_chains"], [174, 2, 1, "", "set_at_keys"], [174, 3, 1, "", "shapes"], [174, 3, 1, "", "shared_shape"], [174, 2, 1, "", "show"], [174, 2, 1, "", "show_sub_container"], [174, 2, 1, "", "shuffle_h5_file"], [174, 2, 1, "", "size_ordered_arrays"], [174, 2, 1, "", "slice_keys"], [174, 2, 1, "", "slice_via_key"], [174, 2, 1, "", "sort_by_key"], [174, 2, 1, "", "split_conts"], [174, 2, 1, "", "structural_diff"], [174, 2, 1, "", "to_dict"], [174, 2, 1, "", "to_disk_as_hdf5"], [174, 2, 1, "", "to_disk_as_json"], [174, 2, 1, "", "to_disk_as_pickled"], [174, 2, 1, "", "to_flat_list"], [174, 2, 1, "", "to_iterator"], [174, 2, 1, "", "to_iterator_keys"], [174, 2, 1, "", "to_iterator_values"], [174, 2, 1, "", "to_jsonable"], [174, 2, 1, "", "to_nested_list"], [174, 2, 1, "", "to_raw"], [174, 2, 1, "", "trim_key"], [174, 2, 1, "", "try_kc"], [174, 2, 1, "", "unify"], [174, 2, 1, "", "unstack_conts"], [174, 2, 1, "", "update_config"], [174, 2, 1, "", "with_default_key_color"], [174, 2, 1, "", "with_entries_as_lists"], [174, 2, 1, "", "with_ivy_backend"], [174, 2, 1, "", "with_key_length_limit"], [174, 2, 1, "", "with_print_indent"], [174, 2, 1, "", "with_print_limit"], [174, 2, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[176, 1, 1, "", "Container"]], "ivy.container.container.Container": [[176, 2, 1, "", "__add__"], [176, 2, 1, "", "__init__"], [176, 2, 1, "", "__radd__"], [176, 2, 1, "", "__rrshift__"], [176, 2, 1, "", "__rshift__"], [176, 2, 1, "", "__rsub__"], [176, 2, 1, "", "__sub__"]], "ivy.container.conversions": [[178, 1, 1, "", "ContainerWithConversions"]], "ivy.container.conversions.ContainerWithConversions": [[178, 2, 1, "", "static_to_ivy"], [178, 2, 1, "", "static_to_native"], [178, 2, 1, "", "to_ivy"], [178, 2, 1, "", "to_native"]], "ivy.container.creation": [[180, 1, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[180, 2, 1, "", "empty_like"], [180, 2, 1, "", "from_dlpack"], [180, 2, 1, "", "full_like"], [180, 2, 1, "", "meshgrid"], [180, 2, 1, "", "native_array"], [180, 2, 1, "", "one_hot"], [180, 2, 1, "", "ones_like"], [180, 2, 1, "", "static_arange"], [180, 2, 1, "", "static_asarray"], [180, 2, 1, "", "static_empty_like"], [180, 2, 1, "", "static_eye"], [180, 2, 1, "", "static_from_dlpack"], [180, 2, 1, "", "static_full_like"], [180, 2, 1, "", "static_linspace"], [180, 2, 1, "", "static_logspace"], [180, 2, 1, "", "static_meshgrid"], [180, 2, 1, "", "static_native_array"], [180, 2, 1, "", "static_one_hot"], [180, 2, 1, "", "static_ones"], [180, 2, 1, "", "static_ones_like"], [180, 2, 1, "", "static_tril"], [180, 2, 1, "", "static_triu"], [180, 2, 1, "", "static_zeros"], [180, 2, 1, "", "static_zeros_like"], [180, 2, 1, "", "tril"], [180, 2, 1, "", "triu"], [180, 2, 1, "", "zeros_like"]], "ivy.container.data_type": [[182, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[182, 2, 1, "", "astype"], [182, 2, 1, "", "broadcast_arrays"], [182, 2, 1, "", "broadcast_to"], [182, 2, 1, "", "can_cast"], [182, 2, 1, "", "dtype"], [182, 2, 1, "", "finfo"], [182, 2, 1, "", "iinfo"], [182, 2, 1, "", "is_bool_dtype"], [182, 2, 1, "", "is_float_dtype"], [182, 2, 1, "", "is_int_dtype"], [182, 2, 1, "", "is_uint_dtype"], [182, 2, 1, "", "result_type"], [182, 2, 1, "", "static_astype"], [182, 2, 1, "", "static_broadcast_arrays"], [182, 2, 1, "", "static_broadcast_to"], [182, 2, 1, "", "static_can_cast"], [182, 2, 1, "", "static_default_float_dtype"], [182, 2, 1, "", "static_dtype"], [182, 2, 1, "", "static_finfo"], [182, 2, 1, "", "static_function_supported_dtypes"], [182, 2, 1, "", "static_function_unsupported_dtypes"], [182, 2, 1, "", "static_iinfo"], [182, 2, 1, "", "static_is_bool_dtype"], [182, 2, 1, "", "static_is_float_dtype"], [182, 2, 1, "", "static_is_int_dtype"], [182, 2, 1, "", "static_is_uint_dtype"], [182, 2, 1, "", "static_result_type"]], "ivy.container.device": [[184, 1, 1, "", "ContainerWithDevice"]], "ivy.container.device.ContainerWithDevice": [[184, 2, 1, "", "dev"], [184, 2, 1, "", "static_dev"], [184, 2, 1, "", "static_to_device"], [184, 2, 1, "", "to_device"]], "ivy.container.elementwise": [[186, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[186, 2, 1, "", "abs"], [186, 2, 1, "", "acos"], [186, 2, 1, "", "acosh"], [186, 2, 1, "", "add"], [186, 2, 1, "", "asin"], [186, 2, 1, "", "asinh"], [186, 2, 1, "", "atan"], [186, 2, 1, "", "atan2"], [186, 2, 1, "", "atanh"], [186, 2, 1, "", "bitwise_and"], [186, 2, 1, "", "bitwise_invert"], [186, 2, 1, "", "bitwise_left_shift"], [186, 2, 1, "", "bitwise_or"], [186, 2, 1, "", "bitwise_right_shift"], [186, 2, 1, "", "bitwise_xor"], [186, 2, 1, "", "ceil"], [186, 2, 1, "", "cos"], [186, 2, 1, "", "cosh"], [186, 2, 1, "", "deg2rad"], [186, 2, 1, "", "divide"], [186, 2, 1, "", "equal"], [186, 2, 1, "", "erf"], [186, 2, 1, "", "exp"], [186, 2, 1, "", "expm1"], [186, 2, 1, "", "floor"], [186, 2, 1, "", "floor_divide"], [186, 2, 1, "", "greater"], [186, 2, 1, "", "greater_equal"], [186, 2, 1, "", "isfinite"], [186, 2, 1, "", "isinf"], [186, 2, 1, "", "isnan"], [186, 2, 1, "", "isreal"], [186, 2, 1, "", "less"], [186, 2, 1, "", "less_equal"], [186, 2, 1, "", "log"], [186, 2, 1, "", "log10"], [186, 2, 1, "", "log1p"], [186, 2, 1, "", "log2"], [186, 2, 1, "", "logaddexp"], [186, 2, 1, "", "logical_and"], [186, 2, 1, "", "logical_not"], [186, 2, 1, "", "logical_or"], [186, 2, 1, "", "logical_xor"], [186, 2, 1, "", "maximum"], [186, 2, 1, "", "minimum"], [186, 2, 1, "", "multiply"], [186, 2, 1, "", "negative"], [186, 2, 1, "", "not_equal"], [186, 2, 1, "", "positive"], [186, 2, 1, "", "pow"], [186, 2, 1, "", "rad2deg"], [186, 2, 1, "", "reciprocal"], [186, 2, 1, "", "remainder"], [186, 2, 1, "", "round"], [186, 2, 1, "", "sign"], [186, 2, 1, "", "sin"], [186, 2, 1, "", "sinh"], [186, 2, 1, "", "sqrt"], [186, 2, 1, "", "square"], [186, 2, 1, "", "static_abs"], [186, 2, 1, "", "static_acos"], [186, 2, 1, "", "static_acosh"], [186, 2, 1, "", "static_add"], [186, 2, 1, "", "static_asin"], [186, 2, 1, "", "static_asinh"], [186, 2, 1, "", "static_atan"], [186, 2, 1, "", "static_atan2"], [186, 2, 1, "", "static_atanh"], [186, 2, 1, "", "static_bitwise_and"], [186, 2, 1, "", "static_bitwise_invert"], [186, 2, 1, "", "static_bitwise_left_shift"], [186, 2, 1, "", "static_bitwise_or"], [186, 2, 1, "", "static_bitwise_right_shift"], [186, 2, 1, "", "static_bitwise_xor"], [186, 2, 1, "", "static_ceil"], [186, 2, 1, "", "static_cos"], [186, 2, 1, "", "static_cosh"], [186, 2, 1, "", "static_deg2rad"], [186, 2, 1, "", "static_divide"], [186, 2, 1, "", "static_equal"], [186, 2, 1, "", "static_erf"], [186, 2, 1, "", "static_exp"], [186, 2, 1, "", "static_expm1"], [186, 2, 1, "", "static_floor"], [186, 2, 1, "", "static_floor_divide"], [186, 2, 1, "", "static_greater"], [186, 2, 1, "", "static_greater_equal"], [186, 2, 1, "", "static_isfinite"], [186, 2, 1, "", "static_isinf"], [186, 2, 1, "", "static_isnan"], [186, 2, 1, "", "static_isreal"], [186, 2, 1, "", "static_less"], [186, 2, 1, "", "static_less_equal"], [186, 2, 1, "", "static_log"], [186, 2, 1, "", "static_log10"], [186, 2, 1, "", "static_log1p"], [186, 2, 1, "", "static_log2"], [186, 2, 1, "", "static_logaddexp"], [186, 2, 1, "", "static_logical_and"], [186, 2, 1, "", "static_logical_not"], [186, 2, 1, "", "static_logical_or"], [186, 2, 1, "", "static_logical_xor"], [186, 2, 1, "", "static_maximum"], [186, 2, 1, "", "static_minimum"], [186, 2, 1, "", "static_multiply"], [186, 2, 1, "", "static_negative"], [186, 2, 1, "", "static_not_equal"], [186, 2, 1, "", "static_positive"], [186, 2, 1, "", "static_pow"], [186, 2, 1, "", "static_rad2deg"], [186, 2, 1, "", "static_reciprocal"], [186, 2, 1, "", "static_remainder"], [186, 2, 1, "", "static_round"], [186, 2, 1, "", "static_sign"], [186, 2, 1, "", "static_sin"], [186, 2, 1, "", "static_sinh"], [186, 2, 1, "", "static_sqrt"], [186, 2, 1, "", "static_square"], [186, 2, 1, "", "static_subtract"], [186, 2, 1, "", "static_tan"], [186, 2, 1, "", "static_tanh"], [186, 2, 1, "", "static_trapz"], [186, 2, 1, "", "static_trunc"], [186, 2, 1, "", "static_trunc_divide"], [186, 2, 1, "", "subtract"], [186, 2, 1, "", "tan"], [186, 2, 1, "", "tanh"], [186, 2, 1, "", "trapz"], [186, 2, 1, "", "trunc"], [186, 2, 1, "", "trunc_divide"]], "ivy.container.experimental": [[188, 0, 0, "-", "activations"], [271, 0, 0, "-", "conversions"], [273, 0, 0, "-", "creation"], [275, 0, 0, "-", "data_type"], [277, 0, 0, "-", "device"], [279, 0, 0, "-", "elementwise"], [281, 0, 0, "-", "general"], [283, 0, 0, "-", "gradients"], [285, 0, 0, "-", "image"], [287, 0, 0, "-", "layers"], [289, 0, 0, "-", "linalg"], [291, 0, 0, "-", "losses"], [293, 0, 0, "-", "manipulation"], [295, 0, 0, "-", "norms"], [297, 0, 0, "-", "random"], [299, 0, 0, "-", "searching"], [301, 0, 0, "-", "set"], [303, 0, 0, "-", "sorting"], [305, 0, 0, "-", "statistical"], [307, 0, 0, "-", "utility"]], "ivy.container.experimental.activations": [[189, 1, 1, "", "ContainerWithActivationExperimental"]], "ivy.container.experimental.conversions": [[272, 1, 1, "", "ContainerWithConversionExperimental"]], "ivy.container.experimental.creation": [[274, 1, 1, "", "ContainerWithCreationExperimental"]], "ivy.container.experimental.creation.ContainerWithCreationExperimental": [[274, 2, 1, "", "hamming_window"], [274, 2, 1, "", "hann_window"], [274, 2, 1, "", "kaiser_bessel_derived_window"], [274, 2, 1, "", "kaiser_window"], [274, 2, 1, "", "static_hamming_window"], [274, 2, 1, "", "static_hann_window"], [274, 2, 1, "", "static_kaiser_bessel_derived_window"], [274, 2, 1, "", "static_kaiser_window"], [274, 2, 1, "", "static_triu_indices"], [274, 2, 1, "", "triu_indices"]], "ivy.container.experimental.data_type": [[276, 1, 1, "", "ContainerWithData_typeExperimental"]], "ivy.container.experimental.device": [[278, 1, 1, "", "ContainerWithDeviceExperimental"]], "ivy.container.experimental.elementwise": [[280, 1, 1, "", "ContainerWithElementWiseExperimental"]], "ivy.container.experimental.elementwise.ContainerWithElementWiseExperimental": [[280, 2, 1, "", "exp2"], [280, 2, 1, "", "float_power"], [280, 2, 1, "", "fmax"], [280, 2, 1, "", "fmod"], [280, 2, 1, "", "gcd"], [280, 2, 1, "", "isclose"], [280, 2, 1, "", "isneginf"], [280, 2, 1, "", "isposinf"], [280, 2, 1, "", "lcm"], [280, 2, 1, "", "logaddexp2"], [280, 2, 1, "", "nan_to_num"], [280, 2, 1, "", "nansum"], [280, 2, 1, "", "signbit"], [280, 2, 1, "", "sinc"], [280, 2, 1, "", "static_exp2"], [280, 2, 1, "", "static_float_power"], [280, 2, 1, "", "static_fmax"], [280, 2, 1, "", "static_fmod"], [280, 2, 1, "", "static_gcd"], [280, 2, 1, "", "static_isclose"], [280, 2, 1, "", "static_isneginf"], [280, 2, 1, "", "static_isposinf"], [280, 2, 1, "", "static_lcm"], [280, 2, 1, "", "static_logaddexp2"], [280, 2, 1, "", "static_nan_to_num"], [280, 2, 1, "", "static_nansum"], [280, 2, 1, "", "static_signbit"], [280, 2, 1, "", "static_sinc"]], "ivy.container.experimental.general": [[282, 1, 1, "", "ContainerWithGeneralExperimental"]], "ivy.container.experimental.gradients": [[284, 1, 1, "", "ContainerWithGradientsExperimental"]], "ivy.container.experimental.image": [[286, 1, 1, "", "ContainerWithImageExperimental"]], "ivy.container.experimental.layers": [[288, 1, 1, "", "ContainerWithLayersExperimental"]], "ivy.container.experimental.layers.ContainerWithLayersExperimental": [[288, 2, 1, "", "avg_pool2d"], [288, 2, 1, "", "avg_pool3d"], [288, 2, 1, "", "max_pool1d"], [288, 2, 1, "", "max_pool2d"], [288, 2, 1, "", "max_pool3d"], [288, 2, 1, "", "static_avg_pool2d"], [288, 2, 1, "", "static_avg_pool3d"], [288, 2, 1, "", "static_max_pool1d"], [288, 2, 1, "", "static_max_pool2d"], [288, 2, 1, "", "static_max_pool3d"]], "ivy.container.experimental.linalg": [[290, 1, 1, "", "ContainerWithLinalgExperimental"]], "ivy.container.experimental.linalg.ContainerWithLinalgExperimental": [[290, 2, 1, "", "diagflat"], [290, 2, 1, "", "kron"], [290, 2, 1, "", "static_diagflat"], [290, 2, 1, "", "static_kron"]], "ivy.container.experimental.losses": [[292, 1, 1, "", "ContainerWithLossesExperimental"]], "ivy.container.experimental.manipulation": [[294, 1, 1, "", "ContainerWithManipulationExperimental"]], "ivy.container.experimental.manipulation.ContainerWithManipulationExperimental": [[294, 2, 1, "", "flatten"], [294, 2, 1, "", "fliplr"], [294, 2, 1, "", "flipud"], [294, 2, 1, "", "heaviside"], [294, 2, 1, "", "hstack"], [294, 2, 1, "", "i0"], [294, 2, 1, "", "moveaxis"], [294, 2, 1, "", "pad"], [294, 2, 1, "", "rot90"], [294, 2, 1, "", "static_flatten"], [294, 2, 1, "", "static_fliplr"], [294, 2, 1, "", "static_flipud"], [294, 2, 1, "", "static_heaviside"], [294, 2, 1, "", "static_hstack"], [294, 2, 1, "", "static_i0"], [294, 2, 1, "", "static_moveaxis"], [294, 2, 1, "", "static_pad"], [294, 2, 1, "", "static_rot90"], [294, 2, 1, "", "static_top_k"], [294, 2, 1, "", "static_vstack"], [294, 2, 1, "", "top_k"], [294, 2, 1, "", "vstack"]], "ivy.container.experimental.norms": [[296, 1, 1, "", "ContainerWithNormsExperimental"]], "ivy.container.experimental.random": [[298, 1, 1, "", "ContainerWithRandomExperimental"]], "ivy.container.experimental.random.ContainerWithRandomExperimental": [[298, 2, 1, "", "dirichlet"], [298, 2, 1, "", "static_dirichlet"]], "ivy.container.experimental.searching": [[300, 1, 1, "", "ContainerWithSearchingExperimental"]], "ivy.container.experimental.set": [[302, 1, 1, "", "ContainerWithSetExperimental"]], "ivy.container.experimental.sorting": [[304, 1, 1, "", "ContainerWithSortingExperimental"]], "ivy.container.experimental.sorting.ContainerWithSortingExperimental": [[304, 2, 1, "", "msort"], [304, 2, 1, "", "static_msort"]], "ivy.container.experimental.statistical": [[306, 1, 1, "", "ContainerWithStatisticalExperimental"]], "ivy.container.experimental.statistical.ContainerWithStatisticalExperimental": [[306, 2, 1, "", "median"], [306, 2, 1, "", "static_median"]], "ivy.container.experimental.utility": [[308, 1, 1, "", "ContainerWithUtilityExperimental"]], "ivy.container.general": [[310, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[310, 2, 1, "", "all_equal"], [310, 2, 1, "", "assert_supports_inplace"], [310, 2, 1, "", "clip_matrix_norm"], [310, 2, 1, "", "clip_vector_norm"], [310, 2, 1, "", "einops_rearrange"], [310, 2, 1, "", "einops_reduce"], [310, 2, 1, "", "einops_repeat"], [310, 2, 1, "", "fourier_encode"], [310, 2, 1, "", "gather"], [310, 2, 1, "", "gather_nd"], [310, 2, 1, "", "get_num_dims"], [310, 2, 1, "", "has_nans"], [310, 2, 1, "", "inplace_decrement"], [310, 2, 1, "", "inplace_increment"], [310, 2, 1, "", "inplace_update"], [310, 2, 1, "", "is_array"], [310, 2, 1, "", "is_ivy_array"], [310, 2, 1, "", "is_ivy_container"], [310, 2, 1, "", "is_native_array"], [310, 2, 1, "", "scatter_flat"], [310, 2, 1, "", "scatter_nd"], [310, 2, 1, "", "stable_divide"], [310, 2, 1, "", "stable_pow"], [310, 2, 1, "", "static_all_equal"], [310, 2, 1, "", "static_assert_supports_inplace"], [310, 2, 1, "", "static_clip_matrix_norm"], [310, 2, 1, "", "static_clip_vector_norm"], [310, 2, 1, "", "static_einops_rearrange"], [310, 2, 1, "", "static_einops_reduce"], [310, 2, 1, "", "static_einops_repeat"], [310, 2, 1, "", "static_fourier_encode"], [310, 2, 1, "", "static_gather"], [310, 2, 1, "", "static_gather_nd"], [310, 2, 1, "", "static_get_num_dims"], [310, 2, 1, "", "static_has_nans"], [310, 2, 1, "", "static_inplace_decrement"], [310, 2, 1, "", "static_inplace_increment"], [310, 2, 1, "", "static_inplace_update"], [310, 2, 1, "", "static_is_array"], [310, 2, 1, "", "static_is_ivy_array"], [310, 2, 1, "", "static_is_ivy_container"], [310, 2, 1, "", "static_is_native_array"], [310, 2, 1, "", "static_scatter_flat"], [310, 2, 1, "", "static_scatter_nd"], [310, 2, 1, "", "static_stable_divide"], [310, 2, 1, "", "static_stable_pow"], [310, 2, 1, "", "static_supports_inplace_updates"], [310, 2, 1, "", "static_to_list"], [310, 2, 1, "", "static_to_numpy"], [310, 2, 1, "", "static_to_scalar"], [310, 2, 1, "", "static_value_is_nan"], [310, 2, 1, "", "supports_inplace_updates"], [310, 2, 1, "", "to_list"], [310, 2, 1, "", "to_numpy"], [310, 2, 1, "", "to_scalar"], [310, 2, 1, "", "value_is_nan"]], "ivy.container.gradients": [[312, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[312, 2, 1, "", "adam_step"], [312, 2, 1, "", "adam_update"], [312, 2, 1, "", "gradient_descent_update"], [312, 2, 1, "", "is_variable"], [312, 2, 1, "", "lamb_update"], [312, 2, 1, "", "lars_update"], [312, 2, 1, "", "optimizer_update"], [312, 2, 1, "", "static_is_variable"], [312, 2, 1, "", "static_stop_gradient"], [312, 2, 1, "", "static_variable"], [312, 2, 1, "", "static_variable_data"], [312, 2, 1, "", "stop_gradient"], [312, 2, 1, "", "variable"], [312, 2, 1, "", "variable_data"]], "ivy.container.image": [[314, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[316, 1, 1, "", "ContainerWithLayers"]], "ivy.container.layers.ContainerWithLayers": [[316, 2, 1, "", "conv1d"], [316, 2, 1, "", "conv1d_transpose"], [316, 2, 1, "", "conv2d"], [316, 2, 1, "", "conv2d_transpose"], [316, 2, 1, "", "conv3d"], [316, 2, 1, "", "conv3d_transpose"], [316, 2, 1, "", "depthwise_conv2d"], [316, 2, 1, "", "dropout"], [316, 2, 1, "", "linear"], [316, 2, 1, "", "lstm_update"], [316, 2, 1, "", "multi_head_attention"], [316, 2, 1, "", "scaled_dot_product_attention"], [316, 2, 1, "", "static_conv1d"], [316, 2, 1, "", "static_conv1d_transpose"], [316, 2, 1, "", "static_conv2d"], [316, 2, 1, "", "static_conv2d_transpose"], [316, 2, 1, "", "static_conv3d"], [316, 2, 1, "", "static_conv3d_transpose"], [316, 2, 1, "", "static_depthwise_conv2d"], [316, 2, 1, "", "static_dropout"], [316, 2, 1, "", "static_linear"], [316, 2, 1, "", "static_lstm_update"], [316, 2, 1, "", "static_multi_head_attention"], [316, 2, 1, "", "static_scaled_dot_product_attention"]], "ivy.container.linalg": [[318, 1, 1, "", "ContainerWithLinalg"]], "ivy.container.linalg.ContainerWithLinalg": [[318, 2, 1, "", "cholesky"], [318, 2, 1, "", "cross"], [318, 2, 1, "", "det"], [318, 2, 1, "", "diag"], [318, 2, 1, "", "diagonal"], [318, 2, 1, "", "eigh"], [318, 2, 1, "", "inner"], [318, 2, 1, "", "inv"], [318, 2, 1, "", "matmul"], [318, 2, 1, "", "matrix_norm"], [318, 2, 1, "", "matrix_power"], [318, 2, 1, "", "matrix_rank"], [318, 2, 1, "", "matrix_transpose"], [318, 2, 1, "", "outer"], [318, 2, 1, "", "pinv"], [318, 2, 1, "", "qr"], [318, 2, 1, "", "slogdet"], [318, 2, 1, "", "solve"], [318, 2, 1, "", "static_cholesky"], [318, 2, 1, "", "static_cross"], [318, 2, 1, "", "static_det"], [318, 2, 1, "", "static_diag"], [318, 2, 1, "", "static_diagonal"], [318, 2, 1, "", "static_inner"], [318, 2, 1, "", "static_inv"], [318, 2, 1, "", "static_matmul"], [318, 2, 1, "", "static_matrix_norm"], [318, 2, 1, "", "static_matrix_power"], [318, 2, 1, "", "static_matrix_rank"], [318, 2, 1, "", "static_matrix_transpose"], [318, 2, 1, "", "static_outer"], [318, 2, 1, "", "static_pinv"], [318, 2, 1, "", "static_qr"], [318, 2, 1, "", "static_slogdet"], [318, 2, 1, "", "static_solve"], [318, 2, 1, "", "static_svd"], [318, 2, 1, "", "static_svdvals"], [318, 2, 1, "", "static_tensordot"], [318, 2, 1, "", "static_trace"], [318, 2, 1, "", "static_vander"], [318, 2, 1, "", "static_vecdot"], [318, 2, 1, "", "static_vector_norm"], [318, 2, 1, "", "static_vector_to_skew_symmetric_matrix"], [318, 2, 1, "", "svd"], [318, 2, 1, "", "svdvals"], [318, 2, 1, "", "tensordot"], [318, 2, 1, "", "trace"], [318, 2, 1, "", "vander"], [318, 2, 1, "", "vecdot"], [318, 2, 1, "", "vector_norm"], [318, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.container.losses": [[320, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[320, 2, 1, "", "binary_cross_entropy"], [320, 2, 1, "", "cross_entropy"], [320, 2, 1, "", "sparse_cross_entropy"], [320, 2, 1, "", "static_binary_cross_entropy"], [320, 2, 1, "", "static_cross_entropy"], [320, 2, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[322, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[322, 2, 1, "", "clip"], [322, 2, 1, "", "concat"], [322, 2, 1, "", "constant_pad"], [322, 2, 1, "", "expand_dims"], [322, 2, 1, "", "flip"], [322, 2, 1, "", "permute_dims"], [322, 2, 1, "", "repeat"], [322, 2, 1, "", "reshape"], [322, 2, 1, "", "roll"], [322, 2, 1, "", "split"], [322, 2, 1, "", "squeeze"], [322, 2, 1, "", "stack"], [322, 2, 1, "", "static_clip"], [322, 2, 1, "", "static_concat"], [322, 2, 1, "", "static_constant_pad"], [322, 2, 1, "", "static_expand_dims"], [322, 2, 1, "", "static_flip"], [322, 2, 1, "", "static_permute_dims"], [322, 2, 1, "", "static_repeat"], [322, 2, 1, "", "static_reshape"], [322, 2, 1, "", "static_roll"], [322, 2, 1, "", "static_split"], [322, 2, 1, "", "static_squeeze"], [322, 2, 1, "", "static_stack"], [322, 2, 1, "", "static_swapaxes"], [322, 2, 1, "", "static_tile"], [322, 2, 1, "", "static_unstack"], [322, 2, 1, "", "static_zero_pad"], [322, 2, 1, "", "swapaxes"], [322, 2, 1, "", "tile"], [322, 2, 1, "", "unstack"], [322, 2, 1, "", "zero_pad"]], "ivy.container.norms": [[324, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[324, 2, 1, "", "layer_norm"]], "ivy.container.random": [[326, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[326, 2, 1, "", "beta"], [326, 2, 1, "", "multinomial"], [326, 2, 1, "", "randint"], [326, 2, 1, "", "random_normal"], [326, 2, 1, "", "random_uniform"], [326, 2, 1, "", "shuffle"], [326, 2, 1, "", "static_beta"], [326, 2, 1, "", "static_multinomial"], [326, 2, 1, "", "static_randint"], [326, 2, 1, "", "static_random_normal"], [326, 2, 1, "", "static_random_uniform"], [326, 2, 1, "", "static_shuffle"]], "ivy.container.searching": [[328, 1, 1, "", "ContainerWithSearching"]], "ivy.container.searching.ContainerWithSearching": [[328, 2, 1, "", "argmax"], [328, 2, 1, "", "argmin"], [328, 2, 1, "", "argwhere"], [328, 2, 1, "", "nonzero"], [328, 2, 1, "", "static_argmax"], [328, 2, 1, "", "static_argmin"], [328, 2, 1, "", "static_argwhere"], [328, 2, 1, "", "static_nonzero"], [328, 2, 1, "", "static_where"], [328, 2, 1, "", "where"]], "ivy.container.set": [[330, 1, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[330, 2, 1, "", "static_unique_all"], [330, 2, 1, "", "static_unique_counts"], [330, 2, 1, "", "static_unique_inverse"], [330, 2, 1, "", "static_unique_values"], [330, 2, 1, "", "unique_all"], [330, 2, 1, "", "unique_counts"], [330, 2, 1, "", "unique_inverse"], [330, 2, 1, "", "unique_values"]], "ivy.container.sorting": [[332, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[332, 2, 1, "", "argsort"], [332, 2, 1, "", "searchsorted"], [332, 2, 1, "", "sort"], [332, 2, 1, "", "static_argsort"], [332, 2, 1, "", "static_searchsorted"], [332, 2, 1, "", "static_sort"]], "ivy.container.statistical": [[334, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[334, 2, 1, "", "cumprod"], [334, 2, 1, "", "cumsum"], [334, 2, 1, "", "einsum"], [334, 2, 1, "", "max"], [334, 2, 1, "", "mean"], [334, 2, 1, "", "min"], [334, 2, 1, "", "prod"], [334, 2, 1, "", "static_cumprod"], [334, 2, 1, "", "static_cumsum"], [334, 2, 1, "", "static_sum"], [334, 2, 1, "", "static_var"], [334, 2, 1, "", "std"], [334, 2, 1, "", "sum"], [334, 2, 1, "", "var"]], "ivy.container.utility": [[336, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[336, 2, 1, "", "all"], [336, 2, 1, "", "any"], [336, 2, 1, "", "static_all"], [336, 2, 1, "", "static_any"]], "ivy.container.wrapping": [[338, 4, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[380, 4, 1, "", "from_zero_dim_arrays_to_float"], [381, 4, 1, "", "handle_nestable"], [382, 4, 1, "", "handle_out_argument"], [383, 4, 1, "", "infer_device"], [384, 4, 1, "", "infer_dtype"], [385, 4, 1, "", "inputs_to_ivy_arrays"], [386, 4, 1, "", "inputs_to_native_arrays"], [387, 4, 1, "", "integer_arrays_to_float"], [388, 4, 1, "", "outputs_to_ivy_arrays"], [389, 4, 1, "", "to_native_arrays_and_back"], [379, 4, 1, "", "with_supported_device_and_dtypes"], [379, 4, 1, "", "with_supported_devices"], [379, 4, 1, "", "with_supported_dtypes"], [379, 4, 1, "", "with_unsupported_device_and_dtypes"], [379, 4, 1, "", "with_unsupported_devices"], [379, 4, 1, "", "with_unsupported_dtypes"]], "ivy.functional.experimental": [[391, 0, 0, "-", "activations"], [392, 0, 0, "-", "compilation"], [393, 0, 0, "-", "constants"], [394, 0, 0, "-", "creation"], [401, 0, 0, "-", "data_type"], [402, 0, 0, "-", "device"], [403, 0, 0, "-", "elementwise"], [419, 0, 0, "-", "general"], [420, 0, 0, "-", "gradients"], [421, 0, 0, "-", "layers"], [427, 0, 0, "-", "linalg"], [430, 0, 0, "-", "losses"], [431, 0, 0, "-", "manipulation"], [445, 0, 0, "-", "meta"], [446, 0, 0, "-", "nest"], [447, 0, 0, "-", "norms"], [448, 0, 0, "-", "random"], [452, 0, 0, "-", "searching"], [453, 0, 0, "-", "set"], [454, 0, 0, "-", "sorting"], [456, 0, 0, "-", "sparse_array"], [461, 0, 0, "-", "statistical"]], "ivy.functional.experimental.creation": [[395, 4, 1, "", "hamming_window"], [396, 4, 1, "", "hann_window"], [397, 4, 1, "", "kaiser_bessel_derived_window"], [398, 4, 1, "", "kaiser_window"], [399, 4, 1, "", "triu_indices"], [400, 4, 1, "", "vorbis_window"]], "ivy.functional.experimental.elementwise": [[404, 4, 1, "", "exp2"], [405, 4, 1, "", "float_power"], [406, 4, 1, "", "fmax"], [407, 4, 1, "", "fmod"], [408, 4, 1, "", "gcd"], [409, 4, 1, "", "isclose"], [410, 4, 1, "", "isneginf"], [411, 4, 1, "", "isposinf"], [412, 4, 1, "", "lcm"], [413, 4, 1, "", "logaddexp2"], [414, 4, 1, "", "nan_to_num"], [415, 4, 1, "", "nansum"], [416, 4, 1, "", "signbit"], [417, 4, 1, "", "sinc"], [418, 4, 1, "", "trapz"]], "ivy.functional.experimental.layers": [[422, 4, 1, "", "avg_pool2d"], [423, 4, 1, "", "avg_pool3d"], [424, 4, 1, "", "max_pool1d"], [425, 4, 1, "", "max_pool2d"], [426, 4, 1, "", "max_pool3d"]], "ivy.functional.experimental.linalg": [[428, 4, 1, "", "diagflat"], [429, 4, 1, "", "kron"]], "ivy.functional.experimental.manipulation": [[432, 4, 1, "", "flatten"], [433, 4, 1, "", "fliplr"], [434, 4, 1, "", "flipud"], [435, 4, 1, "", "heaviside"], [436, 4, 1, "", "hstack"], [437, 4, 1, "", "i0"], [438, 4, 1, "", "moveaxis"], [439, 4, 1, "", "ndenumerate"], [440, 4, 1, "", "ndindex"], [441, 4, 1, "", "pad"], [442, 4, 1, "", "rot90"], [443, 4, 1, "", "top_k"], [444, 4, 1, "", "vstack"]], "ivy.functional.experimental.random": [[449, 4, 1, "", "beta"], [450, 4, 1, "", "dirichlet"], [451, 4, 1, "", "gamma"]], "ivy.functional.experimental.sorting": [[455, 4, 1, "", "msort"]], "ivy.functional.experimental.sparse_array": [[456, 1, 1, "", "NativeSparseArray"], [456, 1, 1, "", "SparseArray"], [457, 4, 1, "", "is_ivy_sparse_array"], [458, 4, 1, "", "is_native_sparse_array"], [459, 4, 1, "", "native_sparse_array"], [460, 4, 1, "", "native_sparse_array_to_indices_values_and_shape"]], "ivy.functional.experimental.sparse_array.SparseArray": [[456, 2, 1, "", "__init__"], [456, 3, 1, "", "coo_indices"], [456, 3, 1, "", "csr_col_indices"], [456, 3, 1, "", "csr_crow_indices"], [456, 3, 1, "", "data"], [456, 3, 1, "", "dense_shape"], [456, 2, 1, "", "to_dense_array"], [456, 3, 1, "", "values"]], "ivy.functional.experimental.statistical": [[462, 4, 1, "", "median"]], "ivy.verbosity": [[1813, 4, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"assert": [1, 349], "check_al": 2, "check_all_or_any_fn": 3, "check_ani": 4, "check_elem_in_list": 5, "check_equ": 6, "check_exist": 7, "check_fals": 8, "check_fill_value_and_dtype_are_compat": 9, "check_gather_input_valid": 10, "check_gather_nd_input_valid": 11, "check_great": 12, "check_inplace_sizes_valid": 13, "check_isinst": 14, "check_less": 15, "check_one_way_broadcast": 16, "check_shap": 17, "check_tru": 18, "backend": [19, 342, 345, 358, 361, 378], "handler": [19, 361], "choose_random_backend": 20, "clear_backend_stack": 21, "current_backend": 22, "fn_name_from_version_specific_fn_nam": 23, "get_backend": 24, "set_backend": 25, "set_backend_to_specific_vers": 26, "set_jax_backend": 27, "set_numpy_backend": 28, "set_tensorflow_backend": 29, "set_torch_backend": 30, "unset_backend": 31, "background": [32, 1752], "ml": [33, 1764, 1768], "explos": 33, "standard": [34, 359, 1759, 1768], "skeptic": 34, "complimentari": 34, "v": [34, 378], "competit": 34, "do": [34, 357], "work": [34, 38, 1758], "The": [34, 42, 355, 363, 378], "arrai": [34, 44, 47, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 340, 341, 344, 351, 363, 456, 469, 475, 480, 485, 490, 495, 500, 513, 520, 524, 532, 538, 549, 554, 559, 567, 573, 578, 586, 593, 598, 603, 608, 626, 637, 644, 649, 654, 659, 666, 687, 707, 716, 721, 726, 731, 736, 741, 746, 751, 756, 761, 766, 771, 776, 781, 786, 791, 796, 801, 806, 811, 816, 821, 826, 831, 836, 841, 846, 851, 856, 861, 866, 871, 876, 881, 886, 891, 896, 901, 906, 911, 916, 921, 926, 931, 936, 941, 946, 951, 956, 961, 966, 971, 976, 981, 986, 991, 996, 1001, 1006, 1012, 1017, 1022, 1027, 1032, 1038, 1045, 1048, 1054, 1059, 1066, 1069, 1074, 1079, 1084, 1087, 1094, 1099, 1111, 1119, 1125, 1130, 1135, 1141, 1147, 1152, 1157, 1167, 1172, 1187, 1192, 1198, 1204, 1210, 1215, 1226, 1232, 1236, 1242, 1246, 1252, 1256, 1260, 1266, 1273, 1278, 1285, 1290, 1295, 1304, 1309, 1317, 1322, 1329, 1334, 1339, 1344, 1350, 1355, 1360, 1365, 1370, 1375, 1379, 1382, 1387, 1392, 1397, 1406, 1411, 1416, 1421, 1426, 1431, 1436, 1442, 1447, 1452, 1457, 1462, 1467, 1472, 1477, 1483, 1488, 1493, 1499, 1504, 1509, 1514, 1519, 1524, 1529, 1534, 1539, 1544, 1549, 1554, 1560, 1565, 1570, 1575, 1602, 1607, 1612, 1617, 1622, 1628, 1634, 1639, 1644, 1649, 1655, 1661, 1666, 1671, 1676, 1681, 1686, 1691, 1697, 1702, 1707, 1711, 1715, 1719, 1723, 1727, 1732, 1737, 1742, 1747, 1759], "api": [34, 40, 42, 340, 343, 344, 358, 361, 363, 365, 366, 1759, 1766, 1768], "why": [35, 357], "unifi": [35, 363, 1764, 1768], "No": [35, 41], "more": [35, 41, 359], "re": [35, 357], "implement": 35, "infinit": 35, "shelf": 35, "life": 35, "contribut": [36, 1752], "appli": [37, 377], "librari": [37, 377], "introduct": [37, 355, 356], "exampl": [37, 347, 351, 356, 359], "ivi": [37, 40, 41, 42, 341, 344, 347, 349, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 469, 470, 471, 472, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 510, 511, 513, 514, 515, 520, 521, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 538, 539, 540, 541, 543, 544, 546, 547, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 585, 586, 587, 588, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 616, 617, 621, 622, 623, 626, 627, 628, 629, 631, 632, 634, 635, 637, 638, 639, 640, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 662, 666, 667, 668, 669, 687, 688, 689, 690, 706, 707, 708, 709, 716, 717, 718, 719, 721, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 748, 749, 751, 752, 753, 754, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 768, 769, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 799, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 843, 844, 846, 847, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 886, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 916, 917, 918, 919, 921, 922, 923, 924, 926, 927, 928, 929, 931, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 971, 972, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 986, 987, 988, 989, 991, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1038, 1039, 1040, 1041, 1045, 1046, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1066, 1067, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1085, 1087, 1088, 1089, 1090, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1111, 1112, 1113, 1114, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1141, 1142, 1143, 1144, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1197, 1198, 1199, 1200, 1203, 1204, 1205, 1206, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1225, 1226, 1227, 1228, 1232, 1233, 1234, 1236, 1237, 1238, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1252, 1253, 1254, 1256, 1257, 1258, 1260, 1261, 1262, 1265, 1266, 1267, 1268, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1285, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1329, 1330, 1331, 1332, 1334, 1335, 1336, 1337, 1339, 1340, 1341, 1342, 1344, 1345, 1346, 1347, 1350, 1351, 1352, 1353, 1355, 1356, 1357, 1358, 1360, 1361, 1362, 1363, 1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1375, 1376, 1377, 1379, 1380, 1382, 1383, 1384, 1385, 1387, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1397, 1398, 1399, 1400, 1402, 1403, 1404, 1406, 1407, 1408, 1409, 1411, 1412, 1413, 1414, 1416, 1417, 1418, 1419, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1431, 1432, 1433, 1434, 1436, 1437, 1438, 1439, 1441, 1442, 1443, 1444, 1446, 1447, 1448, 1449, 1451, 1452, 1453, 1454, 1456, 1457, 1458, 1459, 1461, 1462, 1463, 1464, 1466, 1467, 1468, 1469, 1471, 1472, 1473, 1474, 1476, 1477, 1478, 1479, 1483, 1484, 1485, 1486, 1488, 1489, 1490, 1491, 1493, 1494, 1495, 1496, 1499, 1500, 1501, 1502, 1504, 1505, 1506, 1507, 1509, 1510, 1511, 1512, 1514, 1515, 1516, 1517, 1519, 1520, 1521, 1522, 1524, 1525, 1526, 1527, 1529, 1530, 1531, 1532, 1534, 1535, 1536, 1537, 1539, 1540, 1541, 1542, 1544, 1545, 1546, 1547, 1549, 1550, 1551, 1552, 1554, 1555, 1556, 1557, 1559, 1560, 1561, 1562, 1564, 1565, 1566, 1567, 1569, 1570, 1571, 1572, 1574, 1575, 1576, 1577, 1602, 1603, 1604, 1607, 1608, 1609, 1610, 1612, 1613, 1614, 1615, 1617, 1618, 1619, 1620, 1622, 1623, 1624, 1625, 1628, 1629, 1630, 1631, 1634, 1635, 1636, 1637, 1639, 1640, 1641, 1642, 1644, 1645, 1646, 1647, 1649, 1650, 1651, 1652, 1654, 1655, 1656, 1657, 1660, 1661, 1662, 1663, 1665, 1666, 1667, 1668, 1670, 1671, 1672, 1673, 1675, 1676, 1677, 1678, 1681, 1682, 1683, 1684, 1686, 1687, 1688, 1689, 1691, 1692, 1693, 1694, 1697, 1698, 1699, 1700, 1702, 1703, 1704, 1705, 1707, 1708, 1709, 1711, 1712, 1713, 1715, 1716, 1717, 1719, 1720, 1721, 1723, 1724, 1725, 1727, 1728, 1729, 1731, 1732, 1733, 1734, 1736, 1737, 1738, 1739, 1742, 1743, 1744, 1745, 1747, 1748, 1749, 1750, 1768], "robot": [37, 374, 377], "build": [38, 361], "doc": 38, "docker": [38, 41, 42], "dockerless": 38, "us": [38, 41, 340, 364], "miniconda": [38, 41], "venv": [38, 41], "document": 38, "pipelin": [38, 344, 357, 378], "make_doc": 38, "sh": 38, "entrypoint": 38, "_make_doc": 38, "generate_src_rst_fil": 38, "py": 38, "sphinx": 38, "correct_built_html_fil": 38, "remove_fil": 38, "help": [39, 42], "resourc": 39, "open": 40, "task": 40, "function": [40, 343, 345, 346, 349, 351, 352, 353, 355, 356, 357, 358, 361, 366, 378], "format": [40, 350, 1761, 1768], "checklist": 40, "frontend": [40, 342, 344, 355, 356, 366], "where": [40, 1653, 1655, 1656, 1657], "place": 40, "experiment": [40, 42, 63, 187, 390], "set": [41, 132, 160, 301, 329, 342, 453, 1658], "up": 41, "clone": 41, "pycharm": [41, 42], "virtual": 41, "environ": 41, "interpret": 41, "window": 41, "maco": 41, "ubuntu": 41, "test": [41, 42, 340, 344, 356, 357], "detail": 41, "hypothesi": [41, 356, 357], "log": [41, 885, 886, 887, 888], "free": 41, "github": [41, 344], "codespac": 41, "pre": [41, 350], "commit": [41, 42, 350], "basic": [42, 355], "get": [42, 473], "todo": 42, "list": 42, "issu": 42, "manag": 42, "your": 42, "fork": 42, "who": 42, "To": 42, "ask": 42, "With": 42, "command": 42, "line": 42, "browser": 42, "pull": [42, 344], "request": [42, 344], "small": 42, "often": 42, "interact": 42, "contain": [42, 170, 175, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 343, 364, 470, 472, 476, 478, 481, 483, 486, 488, 491, 493, 496, 498, 501, 503, 511, 515, 525, 527, 530, 533, 535, 539, 541, 544, 547, 550, 552, 555, 557, 560, 562, 565, 568, 570, 572, 574, 577, 579, 582, 585, 587, 594, 596, 599, 601, 604, 606, 609, 611, 617, 621, 623, 627, 629, 632, 635, 638, 640, 645, 647, 650, 652, 655, 657, 660, 662, 667, 669, 688, 690, 706, 708, 717, 719, 722, 724, 727, 729, 732, 734, 737, 739, 742, 744, 747, 749, 752, 754, 757, 759, 762, 764, 767, 769, 772, 774, 777, 779, 782, 784, 787, 789, 792, 794, 797, 799, 802, 804, 807, 809, 812, 814, 817, 819, 822, 824, 827, 829, 832, 834, 837, 839, 842, 844, 847, 849, 852, 854, 857, 859, 862, 864, 867, 869, 872, 874, 877, 879, 882, 884, 887, 889, 892, 894, 897, 899, 902, 904, 907, 909, 912, 914, 917, 919, 922, 924, 927, 929, 932, 934, 937, 939, 942, 944, 947, 949, 952, 954, 957, 959, 962, 964, 967, 969, 972, 974, 977, 979, 982, 984, 987, 989, 992, 994, 997, 999, 1002, 1004, 1007, 1009, 1011, 1013, 1016, 1018, 1021, 1023, 1026, 1028, 1031, 1033, 1039, 1041, 1049, 1051, 1055, 1057, 1060, 1062, 1070, 1072, 1075, 1077, 1080, 1082, 1088, 1090, 1095, 1097, 1100, 1102, 1112, 1114, 1120, 1122, 1126, 1128, 1131, 1133, 1136, 1138, 1142, 1144, 1148, 1150, 1153, 1155, 1158, 1160, 1168, 1170, 1173, 1175, 1188, 1190, 1193, 1195, 1197, 1199, 1203, 1205, 1209, 1211, 1214, 1216, 1225, 1227, 1233, 1237, 1243, 1247, 1249, 1253, 1257, 1261, 1265, 1267, 1272, 1274, 1277, 1279, 1286, 1288, 1291, 1293, 1296, 1298, 1300, 1302, 1305, 1307, 1310, 1312, 1318, 1320, 1323, 1325, 1330, 1332, 1335, 1337, 1340, 1342, 1345, 1347, 1351, 1353, 1356, 1358, 1361, 1363, 1366, 1368, 1371, 1373, 1376, 1383, 1385, 1388, 1390, 1393, 1395, 1398, 1400, 1402, 1404, 1407, 1409, 1412, 1414, 1417, 1419, 1422, 1424, 1427, 1429, 1432, 1434, 1437, 1439, 1441, 1443, 1446, 1448, 1451, 1453, 1456, 1458, 1461, 1463, 1466, 1468, 1471, 1473, 1476, 1478, 1484, 1486, 1489, 1491, 1494, 1496, 1500, 1502, 1505, 1507, 1510, 1512, 1515, 1517, 1520, 1522, 1525, 1527, 1530, 1532, 1535, 1537, 1540, 1542, 1545, 1547, 1550, 1552, 1555, 1557, 1559, 1561, 1564, 1566, 1569, 1571, 1574, 1576, 1603, 1608, 1610, 1613, 1615, 1618, 1620, 1623, 1625, 1629, 1631, 1635, 1637, 1640, 1642, 1645, 1647, 1650, 1652, 1654, 1656, 1660, 1662, 1665, 1667, 1670, 1672, 1675, 1677, 1682, 1684, 1687, 1689, 1692, 1694, 1698, 1700, 1703, 1705, 1708, 1712, 1716, 1720, 1724, 1728, 1731, 1733, 1736, 1738, 1743, 1745, 1748, 1750], "run": [42, 340, 357], "local": 42, "most": 42, "out": [42, 351, 354], "id": [42, 340], "data": [43, 57, 106, 181, 275, 345, 355, 357, 364, 378, 401, 589], "class": [43, 349, 355, 363, 1770], "activ": [45, 64, 171, 188, 391, 466, 1771], "arraywithactiv": 46, "convers": [49, 102, 177, 271], "args_to_ivi": 50, "args_to_n": 51, "to_ivi": 52, "to_ivy_arrai": 53, "to_n": 54, "creation": [55, 104, 179, 273, 394, 507], "arraywithcr": 56, "type": [57, 106, 181, 275, 345, 352, 355, 378, 401, 589], "arraywithdatatyp": 58, "devic": [59, 108, 183, 277, 346, 351, 355, 402, 680], "arraywithdevic": 60, "elementwis": [61, 110, 185, 279, 403, 714], "arraywithelementwis": 62, "arraywithactivationsexperiment": 65, "method": [66, 190, 343, 355, 356, 363, 364], "avg_pool3d": [67, 192, 423], "diagflat": [68, 193, 428], "dirichlet": [69, 194, 450], "exp2": [70, 195, 404], "flatten": [71, 196, 432], "fliplr": [72, 197, 433], "flipud": [73, 198, 434], "float_pow": [74, 199, 405], "fmax": [75, 200, 406], "fmod": [76, 201, 407], "gcd": [77, 202, 408], "heavisid": [78, 205, 435], "hstack": [79, 206, 436], "i0": [80, 207, 437], "isclos": [81, 208, 409], "isneginf": [82, 209, 410], "isposinf": [83, 210, 411], "kron": [84, 213, 429], "lcm": [85, 214, 412], "logaddexp2": [86, 215, 413], "max_pool1d": [87, 216, 424], "max_pool2d": [88, 217, 425], "max_pool3d": [89, 218, 426], "median": [90, 219, 462], "moveaxi": [91, 220, 438], "msort": [92, 221, 455], "nan_to_num": [93, 222, 414], "nansum": [94, 223, 415], "pad": [95, 224, 441], "rot90": [96, 225, 442], "signbit": [97, 226, 416], "sinc": [98, 227, 417], "top_k": [99, 268, 443], "trapz": [100, 418], "vstack": [101, 270, 444], "arraywithconversionsexperiment": 103, "arraywithcreationexperiment": 105, "arraywithdata_typeexperiment": 107, "arraywithdeviceexperiment": 109, "arraywithelementwiseexperiment": 111, "gener": [112, 140, 281, 309, 357, 359, 419, 1036], "arraywithgeneralexperiment": 113, "gradient": [114, 142, 283, 311, 420, 1230], "arraywithgradientsexperiment": 115, "imag": [116, 144, 285, 313], "arraywithimageexperiment": 117, "layer": [118, 146, 287, 315, 421, 1282, 1786], "arraywithlayersexperiment": 119, "linalg": [120, 148, 289, 317, 427, 1348], "arraywithlinalgexperiment": 121, "loss": [122, 150, 291, 319, 430, 1481], "arraywithlossesexperiment": 123, "manipul": [124, 152, 293, 321, 431, 1497], "arraywithmanipulationexperiment": 125, "norm": [126, 154, 295, 323, 447, 1600, 1801], "arraywithnormsexperiment": 127, "random": [128, 156, 297, 325, 448, 1605], "arraywithrandomexperiment": 129, "search": [130, 158, 299, 327, 452, 1632], "arraywithsearchingexperiment": 131, "arraywithsetexperiment": 133, "sort": [134, 162, 303, 331, 454, 1679, 1690, 1691, 1692, 1693], "arraywithsortingexperiment": 135, "statist": [136, 164, 305, 333, 461, 1695], "arraywithstatisticalexperiment": 137, "util": [138, 166, 307, 335, 463, 1740], "arraywithutilityexperiment": 139, "arraywithgener": 141, "arraywithgradi": 143, "arraywithimag": 145, "arraywithlay": 147, "arraywithlinalg": 149, "arraywithloss": 151, "arraywithmanipul": 153, "arraywithnorm": 155, "arraywithrandom": 157, "arraywithsearch": 159, "arraywithset": 161, "arraywithsort": 163, "arraywithstatist": 165, "arraywithutil": 167, "wrap": [168, 337, 353], "add_ivy_array_instance_method": 169, "containerwithactiv": 172, "base": 173, "containerbas": 174, "containerwithconvers": 178, "containerwithcr": 180, "containerwithdatatyp": 182, "containerwithdevic": 184, "containerwithelementwis": 186, "containerwithactivationexperiment": 189, "avg_pool2d": [191, 422], "hamming_window": [203, 395], "hann_window": [204, 396], "kaiser_bessel_derived_window": [211, 397], "kaiser_window": [212, 398], "static_avg_pool2d": 228, "static_avg_pool3d": 229, "static_diagflat": 230, "static_dirichlet": 231, "static_exp2": 232, "static_flatten": 233, "static_fliplr": 234, "static_flipud": 235, "static_float_pow": 236, "static_fmax": 237, "static_fmod": 238, "static_gcd": 239, "static_hamming_window": 240, "static_hann_window": 241, "static_heavisid": 242, "static_hstack": 243, "static_i0": 244, "static_isclos": 245, "static_isneginf": 246, "static_isposinf": 247, "static_kaiser_bessel_derived_window": 248, "static_kaiser_window": 249, "static_kron": 250, "static_lcm": 251, "static_logaddexp2": 252, "static_max_pool1d": 253, "static_max_pool2d": 254, "static_max_pool3d": 255, "static_median": 256, "static_moveaxi": 257, "static_msort": 258, "static_nan_to_num": 259, "static_nansum": 260, "static_pad": 261, "static_rot90": 262, "static_signbit": 263, "static_sinc": 264, "static_top_k": 265, "static_triu_indic": 266, "static_vstack": 267, "triu_indic": [269, 399], "containerwithconversionexperiment": 272, "containerwithcreationexperiment": 274, "containerwithdata_typeexperiment": 276, "containerwithdeviceexperiment": 278, "containerwithelementwiseexperiment": 280, "containerwithgeneralexperiment": 282, "containerwithgradientsexperiment": 284, "containerwithimageexperiment": 286, "containerwithlayersexperiment": 288, "containerwithlinalgexperiment": 290, "containerwithlossesexperiment": 292, "containerwithmanipulationexperiment": 294, "containerwithnormsexperiment": 296, "containerwithrandomexperiment": 298, "containerwithsearchingexperiment": 300, "containerwithsetexperiment": 302, "containerwithsortingexperiment": 304, "containerwithstatisticalexperiment": 306, "containerwithutilityexperiment": 308, "containerwithgener": 310, "containerwithgradi": 312, "containerwithimag": 314, "containerwithlay": 316, "containerwithlinalg": 318, "containerwithloss": 320, "containerwithmanipul": 322, "containerwithnorm": 324, "containerwithrandom": 326, "containerwithsearch": 328, "containerwithset": 330, "containerwithsort": 332, "containerwithstatist": 334, "containerwithutil": 336, "add_ivy_container_instance_method": 338, "deep": 339, "dive": 339, "termin": 340, "skip": 340, "nativ": 341, "handl": [341, 349, 378], "version": [342, 358, 378], "support": [342, 345, 355, 378], "instanc": [343, 355, 356, 363], "static": 343, "special": [343, 355, 356], "nestabl": [343, 351, 352], "continu": 344, "integr": [344, 357], "action": 344, "core": 344, "nn": 344, "state": [344, 365, 378], "ci": 344, "push": 344, "schedul": 344, "cron": 344, "job": 344, "dashboard": 344, "modul": [345, 346, 365, 1798, 1799], "promot": [345, 355], "argument": [345, 346, 351, 354, 355], "other": [345, 346], "unsupport": 345, "bug": 345, "superset": [345, 359], "docstr": [347, 348], "tan": [347, 356, 1015, 1017, 1018, 1019], "roll": [347, 1538, 1539, 1540, 1541], "add": [347, 356, 730, 731, 732, 733, 1768], "except": 349, "handle_except": 349, "decor": 349, "lint": 350, "check": [350, 378], "hook": 350, "posit": [351, 955, 956, 957, 958], "keyword": 351, "input": 351, "dtype": [351, 620, 621, 622], "number": 351, "oper": [351, 363, 378], "integ": 351, "sequenc": 351, "primari": 352, "composit": [352, 355], "mix": 352, "standalon": 352, "conveni": 352, "inplac": 354, "updat": 354, "copi": 354, "unus": 355, "miss": 355, "temporari": 355, "rule": 355, "numpi": [355, 1762], "cast": 355, "full": [356, 536], "alia": 356, "helper": [356, 357, 358], "import": 357, "strategi": 357, "we": 357, "need": 357, "how": 357, "write": 357, "effect": 357, "bonu": 357, "extend": [357, 359], "featur": 357, "self": 357, "consist": 357, "explicit": 357, "test_array_funct": 357, "fail": 357, "navig": 358, "code": 358, "categor": 358, "submodul": 358, "design": [358, 360, 1752], "pin": 358, "behaviour": 359, "what": [359, 1768], "i": 359, "A": 359, "non": 359, "duplic": 359, "when": 359, "too": 359, "much": 359, "balanc": 359, "effici": 359, "block": 361, "graph": [361, 366, 1763, 1768], "compil": [361, 366, 392, 504, 505, 1760, 1765, 1767, 1768], "framework": [362, 1762, 1765, 1768, 1769, 1770], "monkei": 363, "patch": 363, "construct": 364, "represent": 364, "recurs": 364, "built": 364, "ins": 364, "access": 364, "save": 364, "load": 364, "comparison": 364, "custom": [364, 378], "case": 364, "compartment": 364, "configur": 364, "network": [364, 366], "weight": 364, "initi": [365, 1776, 1780], "optim": [365, 1803, 1807], "transpil": 366, "role": 366, "convert": [366, 1774], "model": [366, 373, 378], "builder": 368, "ecosystem": 369, "gym": [370, 377], "mech": 371, "memori": [372, 377], "vision": [375, 377], "extens": [376, 1752], "mechan": 377, "faq": 378, "maintain": 378, "dynam": 378, "size": 378, "shape": [378, 1184], "gpu": 378, "deploy": 378, "control": 378, "flow": 378, "auto": 378, "differenti": 378, "replica": 378, "parallel": 378, "altern": 378, "structur": 378, "func": 379, "wrapper": [379, 1768, 1769], "from_zero_dim_arrays_to_float": 380, "handle_nest": 381, "handle_out_argu": 382, "infer_devic": 383, "infer_dtyp": 384, "inputs_to_ivy_arrai": 385, "inputs_to_native_arrai": 386, "integer_arrays_to_float": 387, "outputs_to_ivy_arrai": 388, "to_native_arrays_and_back": 389, "constant": [393, 506, 1777], "vorbis_window": 400, "ndenumer": 439, "ndindex": 440, "meta": [445, 1578], "nest": [446, 1582], "beta": 449, "gamma": 451, "spars": 456, "is_ivy_sparse_arrai": 457, "is_native_sparse_arrai": 458, "native_sparse_arrai": 459, "native_sparse_array_to_indices_values_and_shap": 460, "is_storag": 464, "deseri": 467, "gelu": [468, 469, 470, 471, 1773], "static_gelu": 472, "leaky_relu": [474, 475, 476, 477], "static_leaky_relu": 478, "log_softmax": [479, 480, 481, 482], "static_log_softmax": 483, "relu": [484, 485, 486, 487], "static_relu": 488, "sigmoid": [489, 490, 491, 492], "static_sigmoid": 493, "softmax": [494, 495, 496, 497], "static_softmax": 498, "softplu": [499, 500, 501, 502], "static_softplu": 503, "nestedsequ": 508, "arang": [509, 510], "static_arang": 511, "asarrai": [512, 513, 514], "static_asarrai": 515, "asarray_handle_nest": 516, "asarray_infer_devic": 517, "asarray_to_native_arrays_and_back": 518, "copy_arrai": [519, 520, 521], "empti": 522, "empty_lik": [523, 524, 525, 526], "static_empty_lik": 527, "ey": [528, 529], "static_ey": 530, "from_dlpack": [531, 532, 533, 534], "static_from_dlpack": 535, "full_lik": [537, 538, 539, 540], "static_full_lik": 541, "linspac": [542, 543], "static_linspac": 544, "logspac": [545, 546], "static_logspac": 547, "meshgrid": [548, 549, 550, 551], "static_meshgrid": 552, "native_arrai": [553, 554, 555, 556], "static_native_arrai": 557, "one_hot": [558, 559, 560, 561], "static_one_hot": 562, "ones": [563, 564], "static_on": 565, "ones_lik": [566, 567, 568, 569], "static_ones_lik": 570, "tril": [571, 573, 574, 575], "static_tril": 572, "triu": [576, 578, 579, 580], "static_triu": 577, "zero": [581, 583, 1785], "static_zero": 582, "zeros_lik": [584, 586, 587, 588], "static_zeros_lik": 585, "as_ivy_dtyp": 590, "as_native_dtyp": 591, "astyp": [592, 593, 594, 595], "static_astyp": 596, "broadcast_arrai": [597, 598, 599, 600], "static_broadcast_arrai": 601, "broadcast_to": [602, 603, 604, 605], "static_broadcast_to": 606, "can_cast": [607, 608, 609, 610], "static_can_cast": 611, "check_float": 612, "closest_valid_dtyp": 613, "default_dtyp": 614, "default_float_dtyp": [615, 616], "static_default_float_dtyp": 617, "default_int_dtyp": 618, "default_uint_dtyp": 619, "static_dtyp": 623, "dtype_bit": 624, "finfo": [625, 626, 627, 628], "static_finfo": 629, "function_supported_dtyp": [630, 631], "static_function_supported_dtyp": 632, "function_unsupported_dtyp": [633, 634], "static_function_unsupported_dtyp": 635, "iinfo": [636, 637, 638, 639], "static_iinfo": 640, "infer_default_dtyp": 641, "invalid_dtyp": 642, "is_bool_dtyp": [643, 644, 645, 646], "static_is_bool_dtyp": 647, "is_float_dtyp": [648, 649, 650, 651], "static_is_float_dtyp": 652, "is_int_dtyp": [653, 654, 655, 656], "static_is_int_dtyp": 657, "is_uint_dtyp": [658, 659, 660, 661], "static_is_uint_dtyp": 662, "promote_typ": 663, "promote_types_of_input": 664, "result_typ": [665, 666, 667, 668], "static_result_typ": 669, "set_default_dtyp": 670, "set_default_float_dtyp": 671, "set_default_int_dtyp": 672, "set_default_uint_dtyp": 673, "type_promote_arrai": 674, "unset_default_dtyp": 675, "unset_default_float_dtyp": 676, "unset_default_int_dtyp": 677, "unset_default_uint_dtyp": 678, "valid_dtyp": 679, "profil": 681, "as_ivy_dev": 682, "as_native_dev": 683, "clear_mem_on_dev": 684, "default_devic": 685, "dev": [686, 687, 688, 689], "static_dev": 690, "dev_util": 691, "function_supported_devic": 692, "function_unsupported_devic": 693, "get_all_ivy_arrays_on_dev": 694, "gpu_is_avail": 695, "num_cpu_cor": 696, "num_gpu": 697, "num_ivy_arrays_on_dev": 698, "percent_used_mem_on_dev": 699, "print_all_ivy_arrays_on_dev": 700, "set_default_devic": 701, "set_split_factor": 702, "split_factor": 703, "split_func_cal": 704, "to_devic": [705, 707, 708, 709], "static_to_devic": 706, "total_mem_on_dev": 710, "tpu_is_avail": 711, "unset_default_devic": 712, "used_mem_on_dev": 713, "ab": [715, 716, 717, 718], "static_ab": 719, "aco": [720, 721, 722, 723], "static_aco": 724, "acosh": [725, 726, 727, 728], "static_acosh": 729, "static_add": 734, "asin": [735, 736, 737, 738], "static_asin": 739, "asinh": [740, 741, 742, 743], "static_asinh": 744, "atan": [745, 746, 747, 748], "static_atan": 749, "atan2": [750, 751, 752, 753], "static_atan2": 754, "atanh": [755, 756, 757, 758], "static_atanh": 759, "bitwise_and": [760, 761, 762, 763], "static_bitwise_and": 764, "bitwise_invert": [765, 766, 767, 768], "static_bitwise_invert": 769, "bitwise_left_shift": [770, 771, 772, 773], "static_bitwise_left_shift": 774, "bitwise_or": [775, 776, 777, 778], "static_bitwise_or": 779, "bitwise_right_shift": [780, 781, 782, 783], "static_bitwise_right_shift": 784, "bitwise_xor": [785, 786, 787, 788], "static_bitwise_xor": 789, "ceil": [790, 791, 792, 793], "static_ceil": 794, "co": [795, 796, 797, 798], "static_co": 799, "cosh": [800, 801, 802, 803], "static_cosh": 804, "deg2rad": [805, 806, 807, 808], "static_deg2rad": 809, "divid": [810, 811, 812, 813], "static_divid": 814, "equal": [815, 816, 817, 818], "static_equ": 819, "erf": [820, 821, 822, 823], "static_erf": 824, "exp": [825, 826, 827, 828], "static_exp": 829, "expm1": [830, 831, 832, 833], "static_expm1": 834, "floor": [835, 836, 837, 838], "static_floor": 839, "floor_divid": [840, 841, 842, 843], "static_floor_divid": 844, "greater": [845, 846, 847, 848], "static_great": 849, "greater_equ": [850, 851, 852, 853], "static_greater_equ": 854, "isfinit": [855, 856, 857, 858], "static_isfinit": 859, "isinf": [860, 861, 862, 863], "static_isinf": 864, "isnan": [865, 866, 867, 868], "static_isnan": 869, "isreal": [870, 871, 872, 873], "static_isr": 874, "less": [875, 876, 877, 878], "static_less": 879, "less_equ": [880, 881, 882, 883], "static_less_equ": 884, "static_log": 889, "log10": [890, 891, 892, 893], "static_log10": 894, "log1p": [895, 896, 897, 898], "static_log1p": 899, "log2": [900, 901, 902, 903], "static_log2": 904, "logaddexp": [905, 906, 907, 908], "static_logaddexp": 909, "logical_and": [910, 911, 912, 913], "static_logical_and": 914, "logical_not": [915, 916, 917, 918], "static_logical_not": 919, "logical_or": [920, 921, 922, 923], "static_logical_or": 924, "logical_xor": [925, 926, 927, 928], "static_logical_xor": 929, "maximum": [930, 931, 932, 933], "static_maximum": 934, "minimum": [935, 936, 937, 938], "static_minimum": 939, "multipli": [940, 941, 942, 943], "static_multipli": 944, "neg": [945, 946, 947, 948], "static_neg": 949, "not_equ": [950, 951, 952, 953], "static_not_equ": 954, "static_posit": 959, "pow": [960, 961, 962, 963], "static_pow": 964, "rad2deg": [965, 966, 967, 968], "static_rad2deg": 969, "reciproc": [970, 971, 972, 973], "static_reciproc": 974, "remaind": [975, 976, 977, 978], "static_remaind": 979, "round": [980, 981, 982, 983], "static_round": 984, "sign": [985, 986, 987, 988], "static_sign": 989, "sin": [990, 991, 992, 993], "static_sin": 994, "sinh": [995, 996, 997, 998], "static_sinh": 999, "sqrt": [1000, 1001, 1002, 1003], "static_sqrt": 1004, "squar": [1005, 1006, 1007, 1008], "static_squar": 1009, "subtract": [1010, 1012, 1013, 1014], "static_subtract": 1011, "static_tan": 1016, "tanh": [1020, 1022, 1023, 1024], "static_tanh": 1021, "trunc": [1025, 1027, 1028, 1029], "static_trunc": 1026, "trunc_divid": [1030, 1032, 1033, 1034], "static_trunc_divid": 1031, "all_equ": [1037, 1038, 1039, 1040], "static_all_equ": 1041, "arg_info": 1042, "arg_nam": 1043, "array_equ": [1044, 1045, 1046], "assert_supports_inplac": [1047, 1048, 1049, 1050], "static_assert_supports_inplac": 1051, "cache_fn": 1052, "clip_matrix_norm": [1053, 1054, 1055, 1056], "static_clip_matrix_norm": 1057, "clip_vector_norm": [1058, 1059, 1060, 1061], "static_clip_vector_norm": 1062, "container_typ": 1063, "current_backend_str": 1064, "default": [1065, 1066, 1067], "einops_rearrang": [1068, 1069, 1070, 1071], "static_einops_rearrang": 1072, "einops_reduc": [1073, 1074, 1075, 1076], "static_einops_reduc": 1077, "einops_repeat": [1078, 1079, 1080, 1081], "static_einops_repeat": 1082, "exist": [1083, 1084, 1085], "fourier_encod": [1086, 1087, 1088, 1089], "static_fourier_encod": 1090, "function_supported_devices_and_dtyp": 1091, "function_unsupported_devices_and_dtyp": 1092, "gather": [1093, 1094, 1095, 1096], "static_gath": 1097, "gather_nd": [1098, 1099, 1100, 1101], "static_gather_nd": 1102, "get_all_arrays_in_memori": 1103, "get_array_mod": 1104, "get_exception_trace_mod": 1105, "get_item": 1106, "get_min_bas": 1107, "get_min_denomin": 1108, "get_nestable_mod": 1109, "get_num_dim": [1110, 1111, 1112, 1113], "static_get_num_dim": 1114, "get_queue_timeout": 1115, "get_referrers_recurs": 1116, "get_tmp_dir": 1117, "has_nan": [1118, 1119, 1120, 1121], "static_has_nan": 1122, "inplace_arrays_support": 1123, "inplace_decr": [1124, 1125, 1126, 1127], "static_inplace_decr": 1128, "inplace_incr": [1129, 1130, 1131, 1132], "static_inplace_incr": 1133, "inplace_upd": [1134, 1135, 1136, 1137], "static_inplace_upd": 1138, "inplace_variables_support": 1139, "is_arrai": [1140, 1141, 1142, 1143], "static_is_arrai": 1144, "is_frontend_arrai": 1145, "is_ivy_arrai": [1146, 1147, 1148, 1149], "static_is_ivy_arrai": 1150, "is_ivy_contain": [1151, 1152, 1153, 1154], "static_is_ivy_contain": 1155, "is_native_arrai": [1156, 1157, 1158, 1159], "static_is_native_arrai": 1160, "isscalar": 1161, "match_kwarg": 1162, "multiprocess": 1163, "num_arrays_in_memori": 1164, "print_all_arrays_in_memori": 1165, "scatter_flat": [1166, 1167, 1168, 1169], "static_scatter_flat": 1170, "scatter_nd": [1171, 1172, 1173, 1174], "static_scatter_nd": 1175, "set_array_mod": 1176, "set_exception_trace_mod": 1177, "set_min_bas": 1178, "set_min_denomin": 1179, "set_nestable_mod": 1180, "set_queue_timeout": 1181, "set_shape_array_mod": 1182, "set_tmp_dir": 1183, "shape_array_mod": 1185, "stable_divid": [1186, 1187, 1188, 1189], "static_stable_divid": 1190, "stable_pow": [1191, 1192, 1193, 1194], "static_stable_pow": 1195, "supports_inplace_upd": [1196, 1198, 1199, 1200], "static_supports_inplace_upd": 1197, "to_ivy_shap": 1201, "to_list": [1202, 1204, 1205, 1206], "static_to_list": 1203, "to_native_shap": 1207, "to_numpi": [1208, 1210, 1211, 1212], "static_to_numpi": 1209, "to_scalar": [1213, 1215, 1216, 1217], "static_to_scalar": 1214, "try_else_non": 1218, "unset_array_mod": 1219, "unset_exception_trace_mod": 1220, "unset_nestable_mod": 1221, "unset_queue_timeout": 1222, "unset_shape_array_mod": 1223, "value_is_nan": [1224, 1226, 1227, 1228], "static_value_is_nan": 1225, "vmap": 1229, "adam_step": [1231, 1232, 1233, 1234], "adam_upd": [1235, 1236, 1237, 1238], "execute_with_gradi": 1239, "grad": 1240, "gradient_descent_upd": [1241, 1242, 1243, 1244], "is_vari": [1245, 1246, 1247, 1248], "static_is_vari": 1249, "jac": 1250, "lamb_upd": [1251, 1252, 1253, 1254], "lars_upd": [1255, 1256, 1257, 1258], "optimizer_upd": [1259, 1260, 1261, 1262], "set_with_grad": 1263, "stop_gradi": [1264, 1266, 1267, 1268], "static_stop_gradi": 1265, "unset_with_grad": 1269, "value_and_grad": 1270, "variabl": [1271, 1273, 1274, 1275], "static_vari": 1272, "variable_data": [1276, 1278, 1279, 1280], "static_variable_data": 1277, "with_grad": 1281, "conv": 1283, "conv1d": [1284, 1285, 1286, 1287, 1787], "static_conv1d": 1288, "conv1d_transpos": [1289, 1290, 1291, 1292], "static_conv1d_transpos": 1293, "conv2d": [1294, 1295, 1296, 1297, 1789], "static_conv2d": 1298, "conv2d_transpos": [1299, 1300, 1301], "static_conv2d_transpos": 1302, "conv3d": [1303, 1304, 1305, 1306, 1791], "static_conv3d": 1307, "conv3d_transpos": [1308, 1309, 1310, 1311], "static_conv3d_transpos": 1312, "conv_general_dil": 1313, "conv_general_transpos": 1314, "deconv_length": 1315, "depthwise_conv2d": [1316, 1317, 1318, 1319], "static_depthwise_conv2d": 1320, "dropout": [1321, 1322, 1323, 1324, 1794], "static_dropout": 1325, "get_x_data_format": 1326, "handle_pad": 1327, "linear": [1328, 1329, 1330, 1331, 1796], "static_linear": 1332, "lstm_updat": [1333, 1334, 1335, 1336], "static_lstm_upd": 1337, "multi_head_attent": [1338, 1339, 1340, 1341], "static_multi_head_attent": 1342, "scaled_dot_product_attent": [1343, 1344, 1345, 1346], "static_scaled_dot_product_attent": 1347, "choleski": [1349, 1350, 1351, 1352], "static_choleski": 1353, "cross": [1354, 1355, 1356, 1357], "static_cross": 1358, "det": [1359, 1360, 1361, 1362], "static_det": 1363, "diag": [1364, 1365, 1366, 1367], "static_diag": 1368, "diagon": [1369, 1370, 1371, 1372], "static_diagon": 1373, "eigh": [1374, 1375, 1376, 1377], "eigvalsh": [1378, 1379, 1380], "inner": [1381, 1382, 1383, 1384], "static_inn": 1385, "inv": [1386, 1387, 1388, 1389], "static_inv": 1390, "matmul": [1391, 1392, 1393, 1394], "static_matmul": 1395, "matrix_norm": [1396, 1397, 1398, 1399], "static_matrix_norm": 1400, "matrix_pow": [1401, 1402, 1403], "static_matrix_pow": 1404, "matrix_rank": [1405, 1406, 1407, 1408], "static_matrix_rank": 1409, "matrix_transpos": [1410, 1411, 1412, 1413], "static_matrix_transpos": 1414, "outer": [1415, 1416, 1417, 1418], "static_out": 1419, "pinv": [1420, 1421, 1422, 1423], "static_pinv": 1424, "qr": [1425, 1426, 1427, 1428], "static_qr": 1429, "slogdet": [1430, 1431, 1432, 1433], "static_slogdet": 1434, "solv": [1435, 1436, 1437, 1438], "static_solv": 1439, "svd": [1440, 1442, 1443, 1444], "static_svd": 1441, "svdval": [1445, 1447, 1448, 1449], "static_svdv": 1446, "tensordot": [1450, 1452, 1453, 1454], "static_tensordot": 1451, "trace": [1455, 1457, 1458, 1459], "static_trac": 1456, "vander": [1460, 1462, 1463, 1464], "static_vand": 1461, "vecdot": [1465, 1467, 1468, 1469], "static_vecdot": 1466, "vector_norm": [1470, 1472, 1473, 1474], "static_vector_norm": 1471, "vector_to_skew_symmetric_matrix": [1475, 1477, 1478, 1479], "static_vector_to_skew_symmetric_matrix": 1476, "binary_cross_entropi": [1482, 1483, 1484, 1485], "static_binary_cross_entropi": 1486, "cross_entropi": [1487, 1488, 1489, 1490], "static_cross_entropi": 1491, "sparse_cross_entropi": [1492, 1493, 1494, 1495], "static_sparse_cross_entropi": 1496, "clip": [1498, 1499, 1500, 1501], "static_clip": 1502, "concat": [1503, 1504, 1505, 1506], "static_concat": 1507, "constant_pad": [1508, 1509, 1510, 1511], "static_constant_pad": 1512, "expand_dim": [1513, 1514, 1515, 1516], "static_expand_dim": 1517, "flip": [1518, 1519, 1520, 1521], "static_flip": 1522, "permute_dim": [1523, 1524, 1525, 1526], "static_permute_dim": 1527, "repeat": [1528, 1529, 1530, 1531], "static_repeat": 1532, "reshap": [1533, 1534, 1535, 1536], "static_reshap": 1537, "static_rol": 1542, "split": [1543, 1544, 1545, 1546], "static_split": 1547, "squeez": [1548, 1549, 1550, 1551], "static_squeez": 1552, "stack": [1553, 1554, 1555, 1556], "static_stack": 1557, "swapax": [1558, 1560, 1561, 1562], "static_swapax": 1559, "tile": [1563, 1565, 1566, 1567], "static_til": 1564, "unstack": [1568, 1570, 1571, 1572], "static_unstack": 1569, "zero_pad": [1573, 1575, 1576, 1577], "static_zero_pad": 1574, "fomaml_step": 1579, "maml_step": 1580, "reptile_step": 1581, "all_nested_indic": 1583, "copy_nest": 1584, "index_nest": 1585, "insert_into_nest_at_index": 1586, "insert_into_nest_at_indic": 1587, "map": 1588, "map_nest_at_index": 1589, "map_nest_at_indic": 1590, "multi_index_nest": 1591, "nested_ani": 1592, "nested_argwher": 1593, "nested_map": 1594, "nested_multi_map": 1595, "prune_nest_at_index": 1596, "prune_nest_at_indic": 1597, "set_nest_at_index": 1598, "set_nest_at_indic": 1599, "layer_norm": [1601, 1602, 1603, 1604], "multinomi": [1606, 1607, 1608, 1609], "static_multinomi": 1610, "randint": [1611, 1612, 1613, 1614], "static_randint": 1615, "random_norm": [1616, 1617, 1618, 1619], "static_random_norm": 1620, "random_uniform": [1621, 1622, 1623, 1624], "static_random_uniform": 1625, "seed": 1626, "shuffl": [1627, 1628, 1629, 1630], "static_shuffl": 1631, "argmax": [1633, 1634, 1635, 1636], "static_argmax": 1637, "argmin": [1638, 1639, 1640, 1641], "static_argmin": 1642, "argwher": [1643, 1644, 1645, 1646], "static_argwher": 1647, "nonzero": [1648, 1649, 1650, 1651], "static_nonzero": 1652, "static_wher": 1654, "unique_al": [1659, 1661, 1662, 1663], "static_unique_al": 1660, "unique_count": [1664, 1666, 1667, 1668], "static_unique_count": 1665, "unique_invers": [1669, 1671, 1672, 1673], "static_unique_invers": 1670, "unique_valu": [1674, 1676, 1677, 1678], "static_unique_valu": 1675, "argsort": [1680, 1681, 1682, 1683], "static_argsort": 1684, "searchsort": [1685, 1686, 1687, 1688], "static_searchsort": 1689, "static_sort": 1694, "cumprod": [1696, 1697, 1698, 1699], "static_cumprod": 1700, "cumsum": [1701, 1702, 1703, 1704], "static_cumsum": 1705, "einsum": [1706, 1707, 1708, 1709], "max": [1710, 1711, 1712, 1713], "mean": [1714, 1715, 1716, 1717], "min": [1718, 1719, 1720, 1721], "prod": [1722, 1723, 1724, 1725], "std": [1726, 1727, 1728, 1729], "sum": [1730, 1732, 1733, 1734], "static_sum": 1731, "var": [1735, 1737, 1738, 1739], "static_var": 1736, "all": [1741, 1742, 1743, 1744], "static_al": 1745, "ani": [1746, 1747, 1748, 1749], "static_ani": 1750, "glossari": 1751, "content": 1752, "overview": 1752, "quick": 1752, "start": 1752, "citat": 1752, "inspect": 1755, "add_array_spec": 1756, "fn_array_spec": 1757, "relat": 1758, "infrastructur": [1760, 1768], "llvm": 1760, "mlir": 1760, "oneapi": 1760, "exchang": [1761, 1768], "onnx": 1761, "nnef": 1761, "coreml": 1761, "matlab": 1762, "scipi": 1762, "torch": [1762, 1763], "scikit": 1762, "learn": 1762, "theano": 1762, "panda": 1762, "julia": 1762, "apach": [1762, 1765], "spark": 1762, "mllib": 1762, "caff": 1762, "chainer": 1762, "tensorflow": 1762, "1": 1762, "mxnet": 1762, "cntk": 1762, "pytorch": 1762, "flux": 1762, "jax": 1762, "2": 1762, "dex": 1762, "languag": 1762, "tracer": [1763, 1768], "tf": 1763, "jaxpr": 1763, "jit": 1763, "fx": 1763, "compani": [1764, 1768], "quansight": 1764, "modular": 1764, "octoml": 1764, "multi": [1765, 1768], "vendor": [1765, 1766, 1767, 1768], "tvm": 1765, "xla": 1765, "gcc": 1765, "specif": [1766, 1767, 1768], "tensorrt": 1766, "cuda": 1766, "icc": 1767, "icx": 1767, "nvcc": 1767, "doe": 1768, "eagerpi": 1769, "kera": 1769, "thinc": 1769, "tensorli": 1769, "neuropod": 1769, "geglu": 1772, "to_ivy_modul": 1775, "firstlayersiren": 1778, "glorotuniform": 1779, "kaimingnorm": 1781, "Ones": 1782, "siren": 1783, "uniform": 1784, "conv1dtranspos": 1788, "conv2dtranspos": 1790, "conv3dtranspos": 1792, "depthwiseconv2d": 1793, "lstm": 1795, "multiheadattent": 1797, "newtorchmodul": 1800, "layernorm": 1802, "adam": 1804, "lamb": 1805, "lar": 1806, "sgd": 1808, "sequenti": [1809, 1810], "verbos": 1812, "cprint": 1813}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})